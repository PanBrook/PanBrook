FOC~EVENT~LIST

:: EventDebug [nobr] {"position":"600,24350","size":"100,100"}
<<set _dom = setup.DOM.Menu.Settings.Debug.event()>>
<<attach _dom>>


:: EventDebugAll [nobr] {"position":"850,24350","size":"100,100"}
<<set _dom = setup.DOM.Menu.Settings.Debug.event_debug_all()>>
<<attach _dom>>


:: EventDebugDo [nobr] {"position":"725,24350","size":"100,100"}
<<set _dom = setup.DOM.Menu.Settings.Debug.event_debug_one(
  setup.event[$qDebugEventTemplate_key],
  /* is debug all = */ false,
)>>
<<attach _dom>>


:: EventDefyingOddsCommon [nobr] {"position":"725,18475","size":"100,100"}
<p>
You paid the money, and the tome of <<= _name >> exchanged <<uhands $unit.player>>. You wrap the expensive book in a nice packaging and leave it in <<reps $g.a>> room for a little surprise.
</p>

<p>
<<Yourrep $g.a>> a|is always eager to learn, and <<they $g.a>> absolutely a|adore your present. In the coming days, you can see <<them $g.a>> reading the book and <<= _practicing>>. Judging by what the book instructs <<rep $g.a>> to practice, you have serious doubts about the effectiveness of the book, but practice never lies, and before long <<their $g.a>> skills in <<= _skill.getName()>> have improved.
</p>

<<run setup.qc.Money(-5000).apply($gQuest)>>
<<run setup.qc.SkillBoost('a', _skill).apply($gQuest)>>


:: EventGen [nobr] {"position":"1225,8475","size":"100,100"}
<<run setup.DevToolHelper.restoreScrollPos()>>

<<dtauthor "$dtquest.author" $dtquest.author>>

<<dtname "$dtquest.name" $dtquest.name>>

<<dtrarity "$dtquest.rarity" $dtquest.rarity 'EGChooseRarity'>>

<p>
  <b>Cooldown</b>:
  <<message '(?)'>>
    <div class='helpcard'>
      How many weeks before this event can be triggered again.
      <br/>
      <br/>
      Recommended to put at least 200 weeks for random events, but 0 for chain events.
    </div>
  <</message>>
  <<numberbox "$dtquest.cooldown" $dtquest.cooldown>>
</p>

<<dttags $dtquest>>

/*
<div class='card livingcard'>
  Roles (max. 5)
  <<message '(?)'>>
    <div class='helpcard'>
      Your units that are participating in this event.
      <br/>
      <br/>
      Maximum is 5 roles.
    </div>
  <</message>>
  <<if Object.keys($dtquest.getUnitRestrictions()).length < 5>>
    <br/>
    Add new role with actor name: <<textbox '_newactorname' ''>>
    <<link '(Add role)'>>
      <<if !_newactorname || $dtquest.getAllActorNames().includes(_newactorname)>>
        <<warning 'Duplicate actor name or missing actor name'>>
      <<else>>
        <<set $dtquest.unit_restrictions[_newactorname] = []>>
        <<run setup.DevToolHelper.saveScrollPos()>>
        <<goto 'EventGen'>>
      <</if>>
    <</link>>
  <</if>>

  <<for _irole, _role range $dtquest.unit_restrictions>>
    <div class='marketobjectcard'>
      <<= _irole>>
      <<message '(?)'>>
        <div class='helpcard'>
          Restrictions for this unit
          <br/>
          <br/>
          Only units that satisfies this will ever be assigned to this role.
          The game will try to find an assignment that matches.
          The most common requirement is Job: Slaver, which indicates that this role is for
          slavers only.
        </div>
      <</message>>:
      <<capture _irole, _role>>
        <<link '(DELETE THIS ROLE)' 'EventGen'>>
          <<run setup.DevToolHelper.saveScrollPos()>>
          <<run delete $dtquest.unit_restrictions[_irole]>>
        <</link>>
      <</capture>>
      <<set _listpath = '$dtquest.unit_restrictions[' + _irole + ']'>>
      <<devlist _listpath '(Add new restriction)' 'QGAddRestrictionUnit' 'EventGen'>>
      <br/>
    </div>
  <</for>>
</div>
*/

<<dtactor $dtquest>>

<<dtoutcome "$dtquest.rewards">>

<<dtrestriction "$dtquest.requirements">>

<hr/>

<<dtstoryhelp>>

<div class="overflow-story-container">

<hr/>

<p>
<b>Event text</b>:
<br/>
<<codeeditor '$edesc' $edesc>>
</p>

<hr/> 

<p class="center">
<br/>
<<button 'CREATE NEW EVENT!'>>
  <<run setup.DOM.Menu.devtoolverifycreate()>>
<</button>>
</p>

<<if $dtquest.old_key>>

<p class='center'>
<<link 'create event (override existing)'>>
  <<run setup.DOM.Menu.devtoolverifycreate(true)>>
<</link>>
</p>

<</if>>

</div>


:: EventGenSetup [nobr] {"position":"1100,8475","size":"100,100"}
<<set $devtooltype = 'event'>>

<<set $qcustomslaveorder = []>>
<<set $qcustomcriteria = []>>
<<set $qcustomunitgroup = []>>
<<set $qcustomtitle = []>>

<<set _ekey = '__devtool_event'>>
<<set _epassage = 'DummyEventPassageDesc'>>

<<set $edesc = "">>

<<if _ekey in setup.event>>
  <<run delete setup.event[_ekey]>>
<</if>>

<<if !_ebase>>
  <<set $dtquest = new setup.Event(
    _ekey,
    "",  /* name */
    {name: '', url: ''},  /* author */
    [],  /* tags */
    _epassage,  /* desc passage */
    [],  /* unit restrictions */
    {},  /* actors */
    [],  /* outcomes */
    [],  /* requirements */
    setup.EVENT_DEFAULT_COOLDOWN, /* cooldown */
    setup.rarity.never,   /* rarity */
  )>>

<<else>>
  <<set $edesc = Story.get(_ebase.getPassage()).text>>

  <<set $dtquest = new setup.Event(
    _ekey,
    _ebase.getName(),  /* name */
    _ebase.getAuthor(),  /* author */
    _ebase.getTags(),  /* tags */
    _epassage,  /* desc passage */
    _ebase.getUnitRestrictions(),  /* unit restrictions */
    _ebase.getActorUnitGroups(),  /* actors */
    _ebase.getRewards(),  /* outcomes */
    _ebase.getRequirements(),  /* requirements */
    _ebase.getCooldown(), /* cooldown */
    _ebase.getRarity(), /* rarity */
  )>>
  <<set $dtquest.old_key = _ebase.key>>
<</if>>


:: EventGenSetupExisting [nobr] {"position":"225,8725","size":"100,100"}
Choose existing event to base from:
<br/>

<<for _ievent, _event range setup.event>>
  <<capture _event>>
    <<link _event.getName()>>
      <<set _eventchosen = _event>>
      <<include 'EventGenSetupExistingDo'>>
    <</link>>
    <br/>
  <</capture>>
<</for>>


:: EventGenSetupExistingDo [nobr] {"position":"350,8725","size":"100,100"}
<<set _ebase = _eventchosen>>
<<include 'EventGenSetup'>>
<<goto 'EventGen'>>


:: EventLikeMeFuckThem [nobr] {"position":"100,13350","size":"100,100"}
You get to your feet and snap your fingers, pointing
<<if !$unit.player.isHasDick()>>

at the <<utile $g.slave>> in front of you<<if !$g.slave.isCanSee()>> along with a commanding "floor"<</if>>.
<<They $g.slave>> hurries over, but hesitates for an instant,
unsure of what to do next. You help <<them $g.slave>> understand by grabbing <<them $g.slave>> on either side of <<their $g.slave>> <<uneck $g.slave>> and shoving <<them $g.slave>> down to kneel at your <<ufeet $unit.player>> with <<their $g.slave>> face level with your cunt. One of your <<uhands $unit.player>> shifts behind <<their $g.slave>> head and tilts it back as you step forward, grinding against <<their $g.slave>> <<umouth $g.slave>>. <<They $g.slave>> struggles involuntarily, but then perceptibly recollects <<themself $g.slave>>, relaxes, and starts to eat you out. Whatever internal turmoil <<they $g.slave>>'s working through, you don't care, and neither does your pussy. When you climax and release <<them $g.slave>>, <<they $g.slave>> stumbles off, looking oddly proud of <<themself $g.slave>>. It seems <<they $g.slave>> got something out of that: a confidence boost, at least.

<<else>>

at the <<uslaverbed $g.slave>><<if !$g.slave.isCanSee()>> along with a commanding "bed"<</if>>.
<<They $g.slave>> hurries over and kneels,
<<their $g.slave>> rear pointing at you, but hesitates for an instant, unsure of what to do next. You help <<them $g.slave>> understand by shoving <<them $g.slave>> down so <<their $g.slave>> collarbone is resting on the back of the <<uslaverbed $g.slave>>
and <<their $g.slave>> ass is at just the right height.
You <<if $g.slave.isHasTail()>>life <<their $g.slave>> <<utail $g.slave>> and <</if>> fuck <<if $g.slave.isHasVagina()>><<their $g.slave>> pussy and then <<their $g.slave>> ass in quick succession, plundering <<their $g.slave>> holes without much regard for <<their $g.slave>> pleasure. <<They $g.slave>> gasps and bucks at all the right parts, and even manages to moan almost authentically when you blow your load up <<their $g.slave>> butt<<else>><<their $g.slave>> ass hard, without cruelty but without much concern for <<their $g.slave>> pleasure, either. <<They $g.slave>> takes it obediently, and does <<their $g.slave>> best to act like <<they $g.slave>>'s enjoying being sodomized<</if>>. <<They $g.slave>> stumbles off to wash, looking oddly proud of <<themself $g.slave>>. It seems <<they $g.slave>> got something out of that: a confidence boost, at least.

<</if>>


:: EventLikeMeRapeThem [nobr] {"position":"225,13350","size":"100,100"}
You get to your feet and snap your fingers, pointing

<<if !$unit.player.isHasDick()>>

at the <<utile $g.slave>> in front of you<<if !$g.slave.isCanSee()>> along with a commanding "floor"<</if>>. <<They $g.slave>> hurries over, but hesitates for an instant, unsure of what to do next. You help <<them $g.slave>> understand by <<uadv $unit.player>> slapping <<them $g.slave>>, and when <<they $g.slave>> instinctively cringes away from the blow, poking the back of one of <<their $g.slave>> knees with your <<ufoot $unit.player>>. <<They $g.slave>> collapses like a doll with its strings cut<<if $g.slave.isFemale()>>, already crying<</if>>.
You seize <<their $g.slave>> head in both <<uhands $unit.player>> and ride <<their $g.slave>> sobbing <<umouth $g.slave>>. If <<they $g.slave>> thought that rape required a dick, <<they $g.slave>> slave|was wrong. If <<they $g.slave>> thought that you needed a strap-on to rape <<them $g.slave>>, <<they $g.slave>> slave|was wrong. Your fingers form claws, holding <<their $g.slave>> head in a terrifying grip as you enjoy the not unfamiliar sensation of a slave weeping into your cunt as you grind it against <<their $g.slave>> crying face.

<<else>>

at the <<uslaverbed $g.slave>><<if !$g.slave.isCanSee()>> along with a commanding "bed"<</if>>. <<They $g.slave>> hurries over and kneels,
<<their $g.slave>> rear pointing at you, but hesitates for an instant, unsure of what to do next.
You help <<them $g.slave>> understand by <<if $g.slave.isHasTail()>> raising <<their $g.slave>> <<utail $g.slave>>, before <</if>> jabbing a thumb into one of <<their $g.slave>> kidneys, forcing <<their $g.slave>> back to arch in involuntary response, and then grinding <<their $g.slave>> face into the couch cushions.
<<if $g.slave.isHasVagina()>>
<<Their $g.slave>> cunt isn't all that wet, and <<they $g.slave>> has cause to regret this, first when you fuck it without mercy, and then when you switch your barely-lubricated dick to <<their $g.slave>> anus.
<<else>>
You spit on <<their $g.slave>> asshole and then give <<them $g.slave>> some anal foreplay, if slapping your dick against <<their $g.slave>> anus twice before shoving it inside <<them $g.slave>> counts as anal foreplay.
<</if>> <<They $g.slave>> tries to be brave and relax, but those are contradictory goals and <<they $g.slave>> manages neither as you assrape <<them $g.slave>> into <<if $g.slave.isFemale()>>inelegant, tearful<<else>>inelegant, desperate<</if>> begging for you to take your dick out of <<their $g.slave>> butt, because it hurts. It isn't the first time you've heard that<<if $unit.player.isHasTrait('join_senior')>>, or the hundredth<</if>>.
<</if>>

When you're done, you discard <<them $g.slave>> like the personal <<urace $g.slave>> sex toy <<they $g.slave>> is, and go outside to do some work.
<<They $g.slave>> stumbles off, looking fearful but strangely complacent, as though <<they $g.slave>>'s accepted this to an extent.


:: EventParadoxicalSlaverCommon [nobr] {"position":"1100,18475","size":"100,100"}
<p>
After staying, chatting, and <<uhobbyverb $g.you>> together with <<rep $g.a>> for the entire day, you do feel a little more <<= _powerful>>, ready to <<= _take>>.
</p>

<<run setup.qc.Blessing('you', 1, _blessing).apply($gQuest)>>


:: EventSetup_a_gift_from_faraway_land [nobr event] {"position":"975,14475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_faraway_land', /* key */
"A Gift from Faraway Land", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'sea',
],
'Event_a_gift_from_faraway_land',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_tease),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_tease),
  setup.qres.FavorAtLeast('humansea', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_bank [nobr event] {"position":"1225,14475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_bank', /* key */
"A Gift from the Bank", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'forest',
],
'Event_a_gift_from_the_bank',
{ /* roles (LEGACY) */
},
{ /* actors */
  'neko': 'subrace_neko',
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_lick_feet),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_lick_feet),
  setup.qres.FavorAtLeast('bank', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_city_of_lucgate [nobr event] {"position":"225,14600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_city_of_lucgate', /* key */
"A Gift from the City of Lucgate", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'city',
],
'Event_a_gift_from_the_city_of_lucgate',
{ /* roles */
},
{ /* actors */
  'them': 'subrace_humankingdom',
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_breasts_kiss),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_breasts_kiss),
  setup.qres.FavorAtLeast('humankingdom', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_dark [nobr event] {"position":"475,14600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_dark', /* key */
"A Gift from the Dark", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'desert',
],
'Event_a_gift_from_the_dark',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_tentacle_spitroast),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_tentacle_spitroast),
  setup.qres.FavorAtLeast('demon', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_desert [nobr event] {"position":"725,14600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_desert', /* key */
"A Gift from the Desert", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'sea',
],
'Event_a_gift_from_the_desert',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_grope),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_grope),
  setup.qres.FavorAtLeast('humandesert', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_dragonkins [nobr event] {"position":"975,14600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_dragonkins', /* key */
"A Gift from the Dragonkin", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'sea',
],
'Event_a_gift_from_the_dragonkins',
{ /* roles */
},
{ /* actors */
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Available(),
    setup.qres.Home(),
  ],
  'dragon': 'subrace_dragonkin',
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_bodypart_tail),
  setup.qc.SlaverMarker('dragon'),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_bodypart_tail),
  setup.qres.FavorAtLeast('dragonkin', 800),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_a_gift_from_the_drow [nobr event] {"position":"1225,14600","size":"100,100"}
<<run new setup.Event(
'a_gift_from_the_drow', /* key */
"A Gift from the Drow", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'item',
  'deep',
],
'Event_a_gift_from_the_drow',
{ /* roles (LEGACY) */
},
{ /* actors */
  'drow': 'subrace_drow',
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_step_on_dick, 1),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_step_on_dick),
  setup.qres.FavorAtLeast('drow', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_elves [nobr event] {"position":"225,14725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_elves', /* key */
"A Gift from the Elves", /* Title */
"darko", /* Author */
[ /* tags */
  'forest',
  'item',
],
'Event_a_gift_from_the_elves',
{ /* roles */
},
{ /* actors */
  'elf': 'subrace_elf',
},
[ /* outcomes */
  setup.qc.SlaveMarker('elf'),
  setup.qc.Item(setup.item.sexmanual_deepthroat),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_deepthroat),
  setup.qres.FavorAtLeast('elf', 800),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_a_gift_from_the_kobolds [nobr event] {"position":"475,14725","size":"100,100"}
<<run new setup.Event(
'a_gift_from_the_kobolds', /* key */
"A Gift from the Kobolds", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'deep',
  'item',
],
'Event_a_gift_from_the_kobolds',
{ /* roles (LEGACY) */
},
{ /* actors */
  'kobold': 'subrace_kobold',
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_spit_face, 1),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_spit_face),
  setup.qres.FavorAtLeast('kobold', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_lizardkins [nobr event] {"position":"725,14725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_lizardkins', /* key */
"A Gift from the Lizardkin", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'sea',
],
'Event_a_gift_from_the_lizardkins',
{ /* roles (LEGACY) */
},
{ /* actors */
  'lizardkin': 'subrace_lizardkin',
},
[ /* outcomes */
  setup.qc.SlaverMarker('lizardkin'),
  setup.qc.Item(setup.item.sexmanual_nibble_neck),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_nibble_neck),
  setup.qres.FavorAtLeast('lizardkin', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_nekos [nobr event] {"position":"975,14725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_nekos', /* key */
"A Gift from the Neko", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_a_gift_from_the_nekos',
{ /* roles */
},
{ /* actors */
  'neko': 'subrace_neko',
},
[ /* outcomes */
  setup.qc.SlaveMarker('neko'),
  setup.qc.Item(setup.item.sexmanual_earsblowjob),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_earsblowjob),
  setup.qres.FavorAtLeast('neko', 800),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_a_gift_from_the_orcs [nobr event] {"position":"1225,14725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_orcs', /* key */
"A Gift from the Orcs", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'desert',
],
'Event_a_gift_from_the_orcs',
{ /* roles */
},
{ /* actors */
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_cockaction),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_cockaction),
  setup.qres.FavorAtLeast('orc', 800),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_a_gift_from_the_outlaws [nobr event] {"position":"225,14850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_outlaws', /* key */
"A Gift from the Outlaws", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'fort',
],
'Event_a_gift_from_the_outlaws',
{ /* roles */
},
{ /* actors */
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Home(),
  ],
  'outlaw': 'all',
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_nipple_pinch),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_nipple_pinch),
  setup.qres.FavorAtLeast('outlaws', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_royals [nobr event] {"position":"475,14850","size":"100,100"}
<<run new setup.Event(
'a_gift_from_the_royals', /* key */
"A Gift from the Royals", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'item',
  'city',
],
'Event_a_gift_from_the_royals',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_upsidedown, 1),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_upsidedown),
  setup.qres.FavorAtLeast('royal', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_valefolks [nobr event] {"position":"725,14850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_valefolks', /* key */
"A Gift from the Valefolks", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'vale',
],
'Event_a_gift_from_the_valefolks',
{ /* roles */
},
{ /* actors */
  'outlaw': 'all',
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_slap_ass),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_slap_ass),
  setup.qres.FavorAtLeast('humanvale', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_gift_from_the_werewolves [nobr event] {"position":"975,14850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_gift_from_the_werewolves', /* key */
"A Gift from the Werewolves", /* Title */
"darko", /* Author */
[ /* tags */
  'item',
  'vale',
],
'Event_a_gift_from_the_werewolves',
{ /* roles */
},
{ /* actors */
  'slave': [
    setup.qres.Job(setup.job.slave),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_balls),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_balls),
  setup.qres.FavorAtLeast('werewolf', 800),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_high_class_brothel [nobr event] {"position":"225,16725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_high_class_brothel', /* key */
"A High-Class Brothel", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_a_high_class_brothel',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_progress', '500', -1),
  setup.qc.VarSet('quest_brothel_high_income', '400', -1),
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '116'),
],
53, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_letter_of_challenge [nobr event] {"position":"975,17850","size":"100,100"}
<<run new setup.UnitGroup(
"sacred_duel0",
"Lucgate Knight",
'city_all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_knight),
  setup.qc.Trait('unit', setup.trait.will_defiant),
  setup.qc.AddTraitsRandom('unit', [setup.trait.per_honorable, setup.trait.magic_light_master, setup.trait.per_loyal, setup.trait.per_brave], 2, false, false),
],
)>>

<<run new setup.Event(
'a_letter_of_challenge', /* key */
"A Letter of Challenge", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'vale',
],
'Event_a_letter_of_challenge',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Equipped('slaving_weapon_master'),
  ],
  'k': 'sacred_duel0',
},
[ /* outcomes */
  setup.qc.QuestDirect('a_letter_of_challenge', {
k: "k",
}),
  setup.qc.VarSet('quest_excalibur_radiant', '1', 250),
],
[ /* restrictions */
  setup.qres.VarNull('quest_excalibur_radiant'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_a_merchant_s_rage [nobr event] {"position":"225,14350","size":"100,100"}
<<run new setup.Event(
'a_merchant_s_rage', /* key */
"A Merchant\'s Rage", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'fort',
  'city',
],
'Event_a_merchant_s_rage',
{ /* roles (LEGACY) */
},
{ /* actors */
  'merchant': 'a_merchant_s_revenge1',
},
[ /* outcomes */
  setup.qc.Return('merchant'),
  setup.qc.VarSet('mlang_merchantrevenge_caravancount', '0', -1),
  setup.qc.VarSet('mlang_merchantrevenge_questrival', '1', -1),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_a_merchant_s_revenge_an_unfortunate_report [nobr event] {"position":"475,14225","size":"100,100"}
<<run new setup.Event(
'a_merchant_s_revenge_an_unfortunate_report', /* key */
"A Merchant\'s Revenge: An Unfortunate Report", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'city',
  'fort',
],
'Event_a_merchant_s_revenge_an_unfortunate_report',
{ /* roles (LEGACY) */
},
{ /* actors */
  'merchant': 'a_merchant_s_revenge1',
},
[ /* outcomes */
  setup.qc.Return('merchant'),
  setup.qc.VarSet('mlang_merchantrevenge_caravancount', '0', -1),
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_a_merchant_s_revenge_complications [nobr event] {"position":"725,14225","size":"100,100"}
<<run new setup.Event(
'a_merchant_s_revenge_complications', /* key */
"A Merchant\'s Revenge: Complications", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'city',
],
'Event_a_merchant_s_revenge_complications',
{ /* roles (LEGACY) */
},
{ /* actors */
  'merchant': 'a_merchant_s_revenge1',
},
[ /* outcomes */
  setup.qc.Return('merchant'),
  setup.qc.VarSet('mlang_merchantrevenge_questrival', '1', -1),
  setup.qc.IfThenElse(
setup.qres.VarEqual('mlangmerchantprinceflirt', '1'),
setup.qc.DoAll([
setup.qc.SetCooldownOpportunity('a_merchant_s_revenge_payback_is_sweet', 12)
], undefined),
setup.qc.DoAll([

], undefined)),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_a_merchant_s_revenge_payback_is_sweet [nobr event] {"position":"975,14225","size":"100,100"}
<<run new setup.Event(
'a_merchant_s_revenge_payback_is_sweet', /* key */
"A Merchant\'s Revenge: Payback is Sweet", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'city',
  'unknown',
],
'Event_a_merchant_s_revenge_payback_is_sweet',
{ /* roles (LEGACY) */
},
{ /* actors */
  'merchant': 'a_merchant_s_revenge1',
  'player': [
    setup.qres.You(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('a_merchant_s_revenge_payback_is_sweet', {
merchant: "merchant",
player: "player",
}),
],
[ /* restrictions */
  setup.qres.UnitGroupNotBusy('a_merchant_s_revenge1'),
  setup.qres.VarEqual('mlangmerchantprincequest', '2'),
  setup.qres.NoOpportunity('a_merchant_s_revenge_payback_is_sweet'),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_a_merchant_s_revenge_visiting_the_captured [nobr event] {"position":"1225,14225","size":"100,100"}
<<run new setup.Event(
'a_merchant_s_revenge_visiting_the_captured', /* key */
"A Merchant\'s Revenge: Visiting the Captured", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'watersport',
  'fort',
  'order',
],
'Event_a_merchant_s_revenge_visiting_the_captured',
{ /* roles (LEGACY) */
},
{ /* actors */
  'pc': [
    setup.qres.You(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.HasTitle('quest_merchant_s_bandit_0'),
  ],
  'merchant': 'a_merchant_s_revenge1',
},
[ /* outcomes */
  setup.qc.Opportunity('a_merchant_s_revenge_visiting_the_captured', {
pc: "pc",
slave: "slave",
merchant: "merchant",
}),
  setup.qc.SetCooldownEvent(null, 1000),
],
[ /* restrictions */
  setup.qres.VarGte('mlangmerchantprincequest', 1),
],
100, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_a_most_noble_extortion [nobr event] {"position":"475,16725","size":"100,100"}
<<run new setup.Event(
'a_most_noble_extortion', /* key */
"A Most Expensive Extortion", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_a_most_noble_extortion',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'noble': 'forest_all',
},
[ /* outcomes */
  setup.qc.QuestDirect('a_most_noble_extortion', {
head: "head",
noble: "noble",
owner: "owner",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '76'),
  setup.qres.NoQuest('a_most_noble_extortion'),
],
10, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_name [nobr event] {"position":"725,16725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_name', /* key */
"A Name", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_a_name',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('a_name', {
owner: "owner",
head: "head",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '44'),
  setup.qres.NoOpportunity('a_name'),
],
10, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_a_nympho_elf [nobr event] {"position":"600,20600","size":"100,100"}
<<run new setup.Title(
"quest_slut_0", /* key */
"Slut", /* name */
"Loves sex more than anything else", /* description */
"a|was a sex addict who volunteered to be your slave", /* unit text */
1500, /* slave value */
{ /* skill additives */
 social: 1, sex: 2,},
{
 is_negative: false,
},
)
>>
<<run new setup.UnitGroup(
"a_nympho_elf2",
"Nympho Elf",
[ /* pools */
  [setup.unitpool.subrace_elf_female, 0.5],
  [setup.unitpool.subrace_elf_male, 0.5],
],
0, /* reuse chance */
[ /* unit post process */
  setup.qc.Trait('unit', setup.trait.per_sexaddict),
  setup.qc.Trait('unit', setup.trait.per_playful),
  setup.qc.TraitIncreaseExisting('unit', setup.trait.balls_large),
  setup.qc.TraitIncreaseExisting('unit', setup.trait.breast_large),
  setup.qc.TraitIncreaseExisting('unit', setup.trait.vagina_gape),
  setup.qc.TraitIncreaseExisting('unit', setup.trait.anus_gape),
  setup.qc.AddTitle('unit', 'quest_slut_0'),
  setup.qc.BgTraitReset('unit', setup.trait.bg_whore),
],
)>>

<<run new setup.Event(
'a_nympho_elf', /* key */
"A Nympho Elf", /* Title */
{ /* Author */
  name: "toyRubberDucky",
  url: "",
},
[ /* tags */
  'unit',
],
'Event_a_nympho_elf',
{ /* roles (LEGACY) */
},
{ /* actors */
  'player': [
    setup.qres.You(),
  ],
  'alerter': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.SkillAtLeast(setup.skill.sex, 50),
  ],
  'nymphoelf': 'a_nympho_elf2',
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Prestige(10),
  setup.qres.FortSkillBonusAtLeast(setup.skill.sex, 5),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_a_permanent_solution [nobr event] {"position":"475,16475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'a_permanent_solution', /* key */
"A Permanent Solution", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'unit',
],
'Event_a_permanent_solution',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
  ],
  'boss': [
  ],
},
[ /* outcomes */
  setup.qc.VarRemove('rival_blackmail_progress'),
  setup.qc.Opportunity('subtle_retaliation', {
    slaver: "slaver",
    boss: "boss",
  }),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_a_very_special_wine_order2 [nobr event] {"position":"475,14350","size":"100,100"}
<<run new setup.Event(
'a_very_special_wine_order2', /* key */
"A Very Special Wine Order", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'watersport',
  'money',
  'order',
  'city',
],
'Event_a_very_special_wine_order2',
{ /* roles (LEGACY) */
},
{ /* actors */
  'mlangmerchantprince': 'a_merchant_s_revenge1',
  'wineagent': 'city_all',
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.AnyTrait([
      'training_toilet_basic', 'training_toilet_advanced', 'training_toilet_master',
    ], true),
    setup.qres.SlaveUsableByYou(),
  ],
},
[ /* outcomes */
  setup.qc.SlaveMarker('wineagent'),
  setup.qc.SlaveOrderFlex(
'Order: The Prince of Cups', /* name */
'independent', /* company */
12, /* expires in */
2000, /* base price */
200, /* trait multi */
0.8, /* value multi */
[ /* crit traits */
setup.trait.training_obedience_advanced,
setup.trait.training_obedience_master,
setup.trait.training_endurance_basic,
setup.trait.training_endurance_advanced,
setup.trait.training_endurance_master,
setup.trait.training_toilet_basic,
setup.trait.training_toilet_advanced,
setup.trait.training_toilet_master,
setup.trait.eq_blind,
],
[ /* disaster traits */
setup.trait.vagina_gape,
setup.trait.anus_gape,
setup.trait.face_hideous,
setup.trait.face_scary,
setup.trait.per_chaste,
setup.trait.per_dominant,
setup.trait.per_lunatic,
setup.trait.training_mindbreak,
],
[ /* restrictions */
setup.qres.Job(setup.job.slave),
setup.qres.AnyTrait([setup.trait.training_toilet_basic, setup.trait.training_toilet_advanced, setup.trait.training_toilet_master], true),
],
[ /* addons */
setup.SlaveOrderAddon.TraitsRandom([
setup.trait.training_oral_basic,
setup.trait.training_masochist_basic,
setup.trait.vagina_tight,
setup.trait.anus_tight,
setup.trait.face_attractive,
setup.trait.per_lustful
], 2, 0, 0),
],
[ /* fulfilled outcomes */
],
[ /* unfulfilled outcomes */
],
),
],
[ /* restrictions */
  setup.qres.VarGte('mlangmerchantprincequest', 1),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_ambivalent_sleeping [nobr event] {"position":"975,12600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'ambivalent_sleeping', /* key */
"Ambivalent Sleeping", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_ambivalent_sleeping',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_none, setup.trait.training_obedience_basic], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_an_educated_opportunity [nobr event] {"position":"475,18850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Title(
"quest_certified_instructor_0", /* key */
"Certified Instructor", /* name */
"Has completed the instructor certifications from the Institute of Higher Learning ", /* description */
"a|have completed the instructor certifications from the Institute of Higher Learning ", /* unit text */
1000, /* slave value */
{ /* skill additives */
slaving: 2,knowledge: 1,},
)
>>


<<run new setup.Event(
'an_educated_opportunity', /* key */
"An Educated Opportunity", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
  'unknown',
],
'Event_an_educated_opportunity',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_certified_instructor_0'),
  ],
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 30),
  setup.qc.Opportunity('an_educated_opportunity', {
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.technology_obediencemaster),
],
0, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_an_offer_for_a_slave [nobr event] {"position":"475,16100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.UnitGroup(
"a_discerning_letter0",
"Master of Waves",
'subrace_humansea',  /* pools */
1, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_boss),
  setup.qc.TraitsReplace('unit', [setup.trait.magic_wind_master, setup.trait.per_cruel, setup.trait.per_playful]),
],
)>> <<run new setup.UnitGroup(
"a_discerning_letter1",
"Slave of Waves",
'sea_all', /* pools */
1, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_pirate),
  setup.qc.TraitsReplace('unit', [setup.trait.bg_maid, setup.trait.per_submissive, setup.trait.training_obedience_master, setup.trait.per_loyal, setup.trait.per_humble, setup.trait.per_chaste]),
],
)>>

<<run new setup.Event(
'an_offer_for_a_slave', /* key */
"An Offer for a Slave", /* Title */
"darko", /* Author */
[ /* tags */
  'sea',
],
'Event_an_offer_for_a_slave',
{ /* roles (LEGACY) */
},
{ /* actors */
  'master': 'a_discerning_letter0',
  'slave': 'a_discerning_letter1',
},
[ /* outcomes */
  setup.qc.SlaverMarker('master'),
  setup.qc.SlaveMarker('slave'),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_anal_cowgirl [nobr event] {"position":"1225,12600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'anal_cowgirl', /* key */
"Anal Cowgirl", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_anal_cowgirl',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
    setup.qres.BedchamberOtherSlave(setup.qres.And([
setup.qres.Available(),
setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
setup.qres.NoTraits([setup.trait.training_anal_master], true)
])),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_angry_peasants [nobr event] {"position":"975,15600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'angry_peasants', /* key */
"Angry Peasants", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_angry_peasants',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humanvale', -20),
setup.qc.QuestDirect('angry_peasants'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humanvale', 20),
setup.qres.Building('veteranhall'),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_animal_tamer__payment_cancelled [nobr event] {"position":"1225,16350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'animal_tamer__payment_cancelled', /* key */
"Animal Tamer: Payment Cancelled", /* Title */
"darko", /* Author */
[ /* tags */
  'sea',
],
'Event_animal_tamer__payment_cancelled',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarRemove('animal_tamer_slave_order_active'),
  setup.qc.VarRemove('animal_tamer_slave_being_trained'),
  setup.qc.VarRemove('animal_tamer_slave_order_fulfilled'),
  setup.qc.RemoveTagGlobal('in_training_defiant_slave'),
],
[ /* restrictions */
  setup.qres.VarEqual('animal_tamer_slave_being_trained', '1'),
  setup.qres.VarNull('animal_tamer_slave_order_active'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_animal_tamer__payment_received [nobr event] {"position":"225,16475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'animal_tamer__payment_received', /* key */
"Animal Tamer: Payment Received", /* Title */
"darko", /* Author */
[ /* tags */
  'sea',
],
'Event_animal_tamer__payment_received',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarRemove('animal_tamer_slave_order_active'),
  setup.qc.VarRemove('animal_tamer_slave_being_trained'),
  setup.qc.VarRemove('animal_tamer_slave_order_fulfilled'),
  setup.qc.RemoveTagGlobal('in_training_defiant_slave'),
],
[ /* restrictions */
  setup.qres.VarEqual('animal_tamer_slave_order_fulfilled', '3'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_another_new_path [nobr event] {"position":"1225,14350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'another_new_path', /* key */
"Another New Path", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
],
'Event_another_new_path',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_living_pawst_0'),
  ],
},
[ /* outcomes */
  setup.qc.RemoveTitleGlobal('quest_living_pawst_0'),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_assassin_benefits [nobr event] {"position":"225,19100","size":"100,100"}
<<run new setup.UnitGroup(
"assassin_benefits0",
"Assassin",
'all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_assassin),
],
)>>

<<run new setup.Event(
'assassin_benefits', /* key */
"Assassin Benefits", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_assassin_benefits',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_assassin], true),
    setup.qres.AllTraits([setup.trait.join_senior], true),
  ],
  'slave': 'assassin_benefits0',
},
[ /* outcomes */
  setup.qc.Slave('slave', "a|was a spy sent over by one of your many enemies", undefined),
  setup.qc.BoonizeRandom('slaver', 5),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.veteranhall),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_assault_on_your_lover [nobr event] {"position":"1225,18100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'assault_on_your_lover', /* key */
"Assault on Your Lover", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_assault_on_your_lover',
{ /* roles */
},
{ /* actors */
  'victim': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NoTag('future_assassin_parent'),
    setup.qres.YourLover(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('future_assassin_progress', '1', -1),
  setup.qc.VarSet('future_assassin_cooldown', '1', 4),
],
[ /* restrictions */
  setup.qres.VarNull('future_assassin_progress'),
  setup.qres.VarNull('future_assassin_cooldown'),
  setup.qres.HasUnitWithTagAndJob('future_assassin_parent', setup.job.slaver),
],
0, /* Cooldown */
setup.rarity.common,  /* Rarity */
)>>


:: EventSetup_asspussy [nobr event] {"position":"225,12725","size":"100,100"}
<<run new setup.Event(
'asspussy', /* key */
"Asspussy", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_asspussy',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_anal_advanced, setup.trait.training_anal_master], true),
    setup.qres.BedchamberOtherSlave(setup.qres.And([
setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
setup.qres.Available(),
])),
    setup.qres.AnyTrait([setup.trait.anus_loose, setup.trait.anus_gape], true),
    setup.qres.NoTraits([setup.trait.join_junior], true),
  ],
  'other': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
  ],
  'lover': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.YourLover(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_at_what_cost2 [nobr event] {"position":"225,20475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'at_what_cost2', /* key */
"At What Cost", /* Title */
"darko", /* Author */
[ /* tags */
  'playercapture',
],
'Event_at_what_cost2',
{ /* roles */
},
{ /* actors */
  'you': null,
},
[ /* outcomes */
  setup.qc.Opportunity('at_what_cost', {
you: "you",
}),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_bad_dreams [nobr event] {"position":"600,12725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'bad_dreams', /* key */
"Bad Dreams", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_bad_dreams',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_none, setup.trait.training_obedience_basic], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_bandit_ambush_ambush [nobr event] {"position":"1225,15225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'bandit_ambush_ambush', /* key */
"Bandit Ambush Ambush", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_bandit_ambush_ambush',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('outlaws', -20),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('outlaws', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_banditry_ [nobr event] {"position":"975,14100","size":"100,100"}
<<run new setup.Event(
'banditry_', /* key */
"Banditry!", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'vale',
],
'Event_banditry_',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.MoneyCustom(-240),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_bank_marketing_strategy [nobr event] {"position":"1225,15350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'bank_marketing_strategy', /* key */
"Bank Marketing Strategy", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_bank_marketing_strategy',
{ /* roles */
'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('bank', -20),
setup.qc.IreSpread('bank'),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('bank', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_bar_delights [nobr event] {"position":"850,12725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'bar_delights', /* key */
"Bar Delights", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_bar_delights',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.OnDuty('entertainmentslave'),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_bedroom_lessons [nobr event] {"position":"225,19225","size":"100,100"}
<<run new setup.Event(
'bedroom_lessons', /* key */
"Bedroom Lessons", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_bedroom_lessons',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_whore, setup.trait.bg_courtesan], true),
    setup.qres.Not(setup.qres.OnDuty('entertainmentpimp')),
  ],
  'pimp': [
    setup.qres.OnDuty('entertainmentpimp'),
    setup.qres.NoTraits([setup.trait.join_junior], true),
  ],
},
[ /* outcomes */
  setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.AllTraits([setup.trait.bg_courtesan], true)),
setup.qc.DoAll([
setup.qc.Trauma('pimp', setup.trait.boon_slaving, 16)
], undefined),
setup.qc.DoAll([
setup.qc.Trauma('pimp', setup.trait.boon_slaving, 11)
], undefined)),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.recreationwing),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_best_ass_rescue [nobr event] {"position":"1225,16225","size":"100,100"}
<<run new setup.Event(
'best_ass_rescue', /* key */
"Best Ass Rescue", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'desert',
],
'Event_best_ass_rescue',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
  ],
},
[ /* outcomes */
  setup.qc.Money(8000),
  setup.qc.Opportunity('best_ass_rescue', {
a: "a",
}),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_blackmail_due [nobr event] {"position":"725,16475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'blackmail_due', /* key */
"Blackmail Due", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_blackmail_due',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarRemove('rival_blackmail_cancel'),
  setup.qc.IfThenElse(
    setup.qres.VarEqual('rival_blackmail_active', '1'),
    setup.qc.DoAll([
      setup.qc.MoneyCustom(-2000),
      setup.qc.Event('blackmail_due', 4, null, true),
    ], undefined),
    setup.qc.DoAll([

    ], undefined)),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_blackmailed [nobr event] {"position":"975,16475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Title(
"quest_former_leader_of_a_slaving_company_0", /* key */
"Former Leader of a Slaving Company", /* name */
"Formerly led a slaving company", /* description */
"a|was a former leader in a slaving company whom you bankrupted", /* unit text */
25000, /* slave value */
{ /* skill additives */
combat: 1,brawn: 1,survival: 1,intrigue: 1,slaving: 1,knowledge: 1,social: 1,aid: 1,arcane: 1,sex: 1,},
)
>>
<<run new setup.UnitGroup(
"blackmailed1",
"Slaving Company Leader",
'all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_slaver),
  setup.qc.AddTraitsRandom('unit', [setup.trait.skill_ambidextrous, setup.trait.skill_intimidating, setup.trait.skill_connected, setup.trait.skill_hypnotic, setup.trait.skill_creative, setup.trait.skill_entertain, setup.trait.skill_alchemy, setup.trait.skill_animal, setup.trait.magic_fire_master, setup.trait.magic_water_master, setup.trait.magic_wind_master, setup.trait.magic_earth_master, setup.trait.magic_light_master, setup.trait.magic_dark_master], 1, false, true),
  setup.qc.AddTraitsRandom('unit', [setup.trait.muscle_extremelystrong, setup.trait.face_beautiful, setup.trait.per_smart], 1, false, true),
  setup.qc.TraitsReplace('unit', [setup.trait.per_frugal]),
  setup.qc.AddTitle('unit', 'quest_former_leader_of_a_slaving_company_0'),
],
)>>

<<run new setup.Event(
'blackmailed', /* key */
"Blackmailed", /* Title */
{ /* Author */
  name: "darko",
  url: "FCdev and darko",
},
[ /* tags */
  'fort',
  'special',
  'unit',
],
'Event_blackmailed',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': 'missingslavers',
  'boss': 'blackmailed1',
  'messenger': 'all',
},
[ /* outcomes */
  setup.qc.VarSet('rival_blackmail_active', '1', -1),
  setup.qc.Opportunity('blackmailed', {
slaver: "slaver",
boss: "boss",
messenger: "messenger",
}),
  setup.qc.RemoveFromUnitGroup('slaver'),
],
[ /* restrictions */
  setup.qres.Building('veteranhall'),
  setup.qres.VarNull('rival_blackmail_active'),
  setup.qres.UnitGroupHasUnit('missingslavers'),
],
0, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_blame_on_you [nobr event] {"position":"725,17600","size":"100,100"}
<<run new setup.Event(
'blame_on_you', /* key */
"Blame on You", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_blame_on_you',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_doppelganged'),
    setup.qres.Available(),
    setup.qres.Home(),
  ],
  'dop': setup.contacttemplate.quest_doppelganger,
  'slave': 'all',
},
[ /* outcomes */
  setup.qc.Ire('humanvale', 1),
  setup.qc.VarSet('quest_doppelganger_progress', '4', -1),
  setup.qc.SetCooldownEvent('nearby_violations', 5),
  setup.qc.SlaveMarker('slave'),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_doppelganger_progress', '3'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_bodyswap_epilogue [nobr event] {"position":"225,16350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'bodyswap_epilogue', /* key */
"Serial Bodyswapper Epilogue", /* Title */
"darko", /* Author */
[ 'desert',
], /* tags */
'Event_bodyswap_epilogue',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.EmptyUnitGroup('quest_night_shift231'),
setup.qc.Favor('humandesert', 250),
setup.qc.MoneyCustom(3000), ],
[ /* restrictions to generate */
],
0,
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_bondage_cage [nobr event] {"position":"475,19225","size":"100,100"}
<<run new setup.Event(
'bondage_cage', /* key */
"Bondage Cage", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_bondage_cage',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.join_senior, setup.trait.bg_metalworker], true),
  ],
  'tenant': setup.contacttemplate.blacksmithpeddler,
},
[ /* outcomes */
  setup.qc.Item(setup.item.f_slavebed_good_slaver),
  setup.qc.BoonizeRandom('slaver', 5),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.workshop),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_boobs_collision [nobr event] {"position":"1100,12725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'boobs_collision', /* key */
"Boobs Collision", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_boobs_collision',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
    setup.qres.AnyTrait([setup.trait.breast_huge, setup.trait.breast_titanic], true),
    setup.qres.BedchamberOtherSlave(setup.qres.And([
setup.qres.Available(),
setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
setup.qres.AnyTrait([setup.trait.breast_huge, setup.trait.breast_titanic], true)
])),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_boss_visit [nobr event] {"position":"975,17100","size":"100,100"}
<<run new setup.UnitGroup(
"boss_visit0",
"NPC Boss",
'forest_all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_boss),
  setup.qc.TraitRemove('unit', setup.trait.per_submissive),
  setup.qc.TraitRemove('unit', setup.trait.per_dominant),
  setup.qc.AddTraitsRandom('unit', [setup.trait.skill_intimidating, setup.trait.skill_connected, setup.trait.skill_hypnotic, setup.trait.face_hideous], 2, true, false),
],
)>>

<<run new setup.Event(
'boss_visit', /* key */
"Boss Visit", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_boss_visit',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
  'target': 'boss_visit0',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.QuestDirect('boss_visit', {
head: "head",
owner: "owner",
slave: "slave",
target: "target",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
  setup.qres.VarNull('quest_brothel_royal_visit'),
  setup.qres.VarGte('quest_brothel_class', -19),
  setup.qres.VarLte('quest_brothel_class', 19),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_bouncer_needed [nobr event] {"position":"975,16725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'bouncer_needed', /* key */
"Bouncer Needed", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_bouncer_needed',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.IfThenElse(
setup.qres.Actor('head', setup.qres.AllTraits([setup.trait.gender_male], true)),
setup.qc.DoAll([
setup.qc.SlaveOrderFlex(
'Bouncer', /* name */
'player', /* company */
50, /* expires in */
0, /* base price */
1000, /* trait multi */
0, /* value multi */
[ /* crit traits */
setup.trait.bg_thug,
setup.trait.height_tall,
setup.trait.height_giant,
setup.trait.muscle_strong,
setup.trait.muscle_verystrong,
setup.trait.muscle_extremelystrong,
setup.trait.face_hideous,
setup.trait.face_scary,
setup.trait.per_dominant,
setup.trait.skill_intimidating,
setup.trait.magic_earth,
setup.trait.magic_earth_master,
],
[ /* disaster traits */
setup.trait.height_dwarf,
setup.trait.height_short,
setup.trait.muscle_extremelythin,
setup.trait.muscle_verythin,
setup.trait.muscle_thin,
setup.trait.face_attractive,
setup.trait.face_beautiful,
setup.trait.per_submissive,
],
[ /* restrictions */
setup.qres.Job(setup.job.slave),
setup.qres.AllTraits([setup.trait.gender_male], true),
setup.qres.XTraits([setup.trait.bg_thug, setup.trait.height_tall, setup.trait.height_giant, setup.trait.muscle_strong, setup.trait.muscle_verystrong, setup.trait.muscle_extremelystrong, setup.trait.face_hideous, setup.trait.face_scary, setup.trait.per_dominant, setup.trait.skill_intimidating, setup.trait.magic_earth, setup.trait.magic_earth_master], 1),
setup.qres.AnyTrait([setup.trait.training_dominance_advanced, setup.trait.training_dominance_master], true),
],
[ /* addons */
],
[ /* fulfilled outcomes */
setup.qc.HideAll([
  setup.qc.VarSet('quest_brothel_progress', '44', -1),
  setup.qc.VarSet('quest_brothel_wait', '4', -1),
], "Increase your brothel's profit",),
],
[ /* unfulfilled outcomes */
],
)
], undefined),
setup.qc.DoAll([
setup.qc.SlaveOrderFlex(
'Bouncer', /* name */
'player', /* company */
50, /* expires in */
0, /* base price */
1000, /* trait multi */
0, /* value multi */
[ /* crit traits */
setup.trait.bg_thug,
setup.trait.height_tall,
setup.trait.height_giant,
setup.trait.muscle_strong,
setup.trait.muscle_verystrong,
setup.trait.muscle_extremelystrong,
setup.trait.face_hideous,
setup.trait.face_scary,
setup.trait.per_dominant,
setup.trait.skill_intimidating,
setup.trait.magic_earth,
setup.trait.magic_earth_master,
],
[ /* disaster traits */
setup.trait.height_dwarf,
setup.trait.height_short,
setup.trait.muscle_extremelythin,
setup.trait.muscle_verythin,
setup.trait.muscle_thin,
setup.trait.face_attractive,
setup.trait.face_beautiful,
setup.trait.per_submissive,
],
[ /* restrictions */
setup.qres.Job(setup.job.slave),
setup.qres.AllTraits([setup.trait.gender_female], true),
setup.qres.XTraits([setup.trait.bg_thug, setup.trait.height_tall, setup.trait.height_giant, setup.trait.muscle_strong, setup.trait.muscle_verystrong, setup.trait.muscle_extremelystrong, setup.trait.face_hideous, setup.trait.face_scary, setup.trait.per_dominant, setup.trait.skill_intimidating, setup.trait.magic_earth, setup.trait.magic_earth_master], 1),
setup.qres.AnyTrait([setup.trait.training_dominance_advanced, setup.trait.training_dominance_master], true),
],
[ /* addons */
],
[ /* fulfilled outcomes */
setup.qc.HideAll([
  setup.qc.VarSet('quest_brothel_progress', '44', -1),
  setup.qc.VarSet('quest_brothel_wait', '4', -1),
], "Increase your brothel's profit",),
],
[ /* unfulfilled outcomes */
],
)
], undefined)),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_brothel_progress', '36'),
  setup.qres.VarNull('quest_brothel_wait'),
],
53, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_bounties_of_the_sea [nobr event] {"position":"725,19225","size":"100,100"}
<<run new setup.Event(
'bounties_of_the_sea', /* key */
"Bounties of the Sea", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'sea',
],
'Event_bounties_of_the_sea',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
  ],
  'slave': 'subrace_humansea',
},
[ /* outcomes */
  setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.AllTraits([setup.trait.bg_pirate], true)),
setup.qc.DoAll([
setup.qc.Slave('slave', "a|was an unfortunate traveler in the Southern Seas who got captured by your ex-pirate slaver", undefined)
], undefined),
setup.qc.DoAll([
setup.qc.MoneyCustom(5000)
], undefined)),
  setup.qc.BoonizeRandom('slaver', 5),
  setup.qc.Return('slaver'),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_broken_soul [nobr event] {"position":"725,16600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'broken_soul', /* key */
"Broken Soul", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
  'unknown',
],
'Event_broken_soul',
{ /* roles */
},
{ /* actors */
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.AllowDefiant(),
    setup.qres.HasTitle('quest_broken_ascent_0'),
  ],
  'wizard': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AnyTrait([setup.trait.magic_dark, setup.trait.magic_dark_master, setup.trait.magic_light, setup.trait.magic_light_master, setup.trait.magic_earth, setup.trait.magic_earth_master, setup.trait.magic_wind, setup.trait.magic_wind_master, setup.trait.magic_water, setup.trait.magic_water_master, setup.trait.magic_fire, setup.trait.magic_fire_master], true),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('broken_soul', {
slave: "slave",
wizard: "wizard",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.traininggrounds),
  setup.qres.NoQuest('broken_soul'),
  setup.qres.VarNull('broken_wings_cooldown'),
],
15, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_broken_soul_wanders_in [nobr event] {"position":"975,16600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.UnitGroup(
"broken_soul_wanders_in0",
"Broken Ascent",
'subrace_angel',  /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.AddTitle('unit', 'quest_broken_ascent_0'),
  setup.qc.TraitReplace('unit', 'subrace_humankingdom'),
  setup.qc.RemoveTraitsWithTag('unit', 'per'),
  setup.qc.RemoveTraitsWithTag('unit', 'wings'),
  setup.qc.RemoveTraitsWithTag('unit', 'skill'),
  setup.qc.RemoveTraitsWithTag('unit', 'bg'),
  setup.qc.Trait('unit', 'will_indomitable'),
  setup.qc.ResetInnateTraits('unit'),
  setup.qc.Mindbreak('unit'),
],
)>>

<<run new setup.Event(
'broken_soul_wanders_in', /* key */
"Broken Soul Wanders In", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
  'unit',
],
'Event_broken_soul_wanders_in',
{ /* roles */
},
{ /* actors */
  'slave': 'broken_soul_wanders_in0',
},
[ /* outcomes */
  setup.qc.VarSet('broken_wings_cooldown', '1', 15),
  setup.qc.Slave('slave'),
],
[ /* restrictions */
  setup.qres.VarNull('broken_wings_cooldown'),
  setup.qres.NoUnitWithTitle('quest_broken_ascent_0', {
}),
  setup.qres.NoUnitWithTitle('quest_broken_descent_0', {
}),
  setup.qres.Building(setup.buildingtemplate.slavepens),
],
500, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_broken_wings [nobr event] {"position":"1225,16600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'broken_wings', /* key */
"Broken Wings", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
],
'Event_broken_wings',
{ /* roles */
},
{ /* actors */
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.AllowDefiant(),
    setup.qres.HasTitle('quest_broken_descent_0'),
    setup.qres.HasTitle('quest_joy_restored_2'),
    setup.qres.HasTitle('quest_lust_restore_3'),
    setup.qres.HasTitle('quest_empathy_restored_4'),
    setup.qres.HasTitle('quest_spirit_restored_5'),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('broken_wings', null),
],
[ /* restrictions */
  setup.qres.VarNull('broken_wings_cooldown'),
  setup.qres.NoQuest('broken_wings'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_cleanup [nobr event] {"position":"1225,16725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.UnitGroup(
"brothel_cleanup0",
"Brothel Head",
[], /* pools */
1, /* reuse chance */
[ /* unit post process */
],
)>>

<<run new setup.Event(
'brothel_cleanup', /* key */
"Brothel Cleanup", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_cleanup',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('brothel_cleanup', {
    owner: "owner",
    head: 'head',
  }),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_brothel_progress', '8'),
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.NoQuest('brothel_cleanup'),
],
10, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_decline [nobr event] {"position":"225,16850","size":"100,100"}
<<run new setup.Event(
'brothel_decline', /* key */
"Brothel Decline", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_decline',
{ /* roles (LEGACY) */
},
{ /* actors */
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_high_income_warning', '1', -1),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_high_income_warning'),
  setup.qres.VarNull('quest_brothel_high_income'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
10, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_ex_whore [nobr event] {"position":"1225,17100","size":"100,100"}
<<run new setup.Event(
'brothel_ex_whore', /* key */
"Brothel Ex-Whore", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_ex_whore',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_brothel_expansion [nobr event] {"position":"475,16850","size":"100,100"}
<<run new setup.Event(
'brothel_expansion', /* key */
"Brothel Expansion", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_expansion',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('brothel_expansion', {
head: "head",
owner: "owner",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.NoQuest('brothel_expansion'),
  setup.qres.NoOpportunity('brothel_expansion'),
  setup.qres.VarEqual('quest_brothel_progress', '68'),
],
10, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_focus [nobr event] {"position":"725,16850","size":"100,100"}
<<run new setup.Event(
'brothel_focus', /* key */
"Brothel Focus", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_focus',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('brothel_focus', {
head: "head",
owner: "owner",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '52'),
  setup.qres.NoQuest('brothel_focus'),
  setup.qres.NoOpportunity('brothel_focus'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_focus_ii [nobr event] {"position":"975,16850","size":"100,100"}
<<run new setup.Event(
'brothel_focus_ii', /* key */
"Brothel Focus II", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_focus_ii',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('brothel_focus_ii', {
head: "head",
owner: "owner",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '92'),
  setup.qres.NoQuest('brothel_focus_ii'),
  setup.qres.NoOpportunity('brothel_focus_ii'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_high_season [nobr event] {"position":"225,17225","size":"100,100"}
<<run new setup.Event(
'brothel_high_season', /* key */
"Brothel High Season", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_high_season',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.IfThenElse(
setup.qres.VarEqual('quest_brothel_sub', 'sub'),
setup.qc.DoAll([
setup.qc.QuestDirect('high_brothel_season_sub_', {
owner: "owner",
head: "head",
slave: "slave",
})
], undefined),
setup.qc.DoAll([
setup.qc.IfThenElse(
setup.qres.VarEqual('quest_brothel_sub', 'dom'),
setup.qc.DoAll([
setup.qc.QuestDirect('high_brothel_season_dom_', {
owner: "owner",
head: "head",
slave: "slave",
})
], undefined),
setup.qc.DoAll([
setup.qc.QuestDirect('high_brothel_season', {
owner: "owner",
head: "head",
slave: "slave",
})
], undefined))
], undefined)),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_brothel_palace [nobr event] {"position":"1225,16850","size":"100,100"}
<<run new setup.Event(
'brothel_palace', /* key */
"Brothel Palace", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_palace',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.QuestDirect('brothel_palace', {
head: "head",
owner: "owner",
slave: "slave",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '108'),
  setup.qres.NoQuest('brothel_palace'),
  setup.qres.NoOpportunity('brothel_palace'),
],
10, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_pickup [nobr event] {"position":"725,15725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'brothel_pickup', /* key */
"Brothel Pickup", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_brothel_pickup',
{ /* roles */
'victim': [
setup.qres.Available(),
setup.qres.Job(setup.job.slave),
],

'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humandesert', -20),
setup.qc.MissingUnit('victim'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humandesert', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_brothel_promotion [nobr event] {"position":"225,16975","size":"100,100"}
<<run new setup.Event(
'brothel_promotion', /* key */
"Brothel Promotion", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_promotion',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('brothel_promotion', {
head: "head",
owner: "owner",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '84'),
  setup.qres.NoOpportunity('brothel_promotion'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_rejuvenation [nobr event] {"position":"475,17225","size":"100,100"}
<<run new setup.Event(
'brothel_rejuvenation', /* key */
"Brothel Rejuvenation", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_rejuvenation',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.QuestDirect('brothel_rejuvenation', {
owner: "owner",
head: "head",
slave: "slave",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
  setup.qres.VarNull('quest_brothel_high_income'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_brothel_reopening [nobr event] {"position":"475,16975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'brothel_reopening', /* key */
"Brothel Reopening", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_reopening',
{ /* roles (LEGACY) */
},
{ /* actors */
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('brothel_reopening', {
owner: "owner",
}),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_brothel_progress', '1'),
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.NoOpportunity('brothel_reopening'),
],
10, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_security [nobr event] {"position":"725,16975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'brothel_security', /* key */
"Brothel Security", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_security',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('brothel_security', {
head: "head",
owner: "owner",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '28'),
  setup.qres.NoQuest('brothel_security'),
],
10, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_suite [nobr event] {"position":"725,17225","size":"100,100"}
<<run new setup.Event(
'brothel_suite', /* key */
"Brothel Suite", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_suite',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.Opportunity('brothel_suite', {
owner: "owner",
head: "head",
slave: "slave",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_brothel_training [nobr event] {"position":"975,16975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'brothel_training', /* key */
"Brothel Training", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_training',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('brothel_training', {
owner: "owner",
head: "head",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '20'),
  setup.qres.NoQuest('brothel_training'),
  setup.qres.NoOpportunity('intense_brothel_training'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_brothel_volunteer [nobr event] {"position":"975,17225","size":"100,100"}
<<run new setup.UnitGroup(
"brothel_volunteer0",
"Brothel Volunteer (Male)",
'forest_allmale', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_unemployed),
  setup.qc.AddTraitsRandom('unit', [setup.trait.per_lustful, setup.trait.per_playful, setup.trait.per_dreamy, setup.trait.per_lavish], 2, true, false),
],
)>>

<<run new setup.UnitGroup(
"brothel_volunteer1",
"Brothel Volunteer (Female)",
'forest_allfemale', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_unemployed),
  setup.qc.AddTraitsRandom('unit', [setup.trait.per_lustful, setup.trait.per_playful, setup.trait.per_dreamy, setup.trait.per_lavish], 2, true, false),
],
)>>

<<run new setup.Event(
'brothel_volunteer', /* key */
"Brothel Volunteer", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_brothel_volunteer',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
  'volunteer_male': 'brothel_volunteer0',
  'volunteer_female': 'brothel_volunteer1',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.IfThenElse(
    setup.qres.VarEqual('quest_brothel_gender', 'male'),
    setup.qc.Opportunity('brothel_volunteer', {
      owner: "owner",
      head: "head",
      slave: "slave",
      volunteer: "volunteer_male",
    }),
    setup.qc.Opportunity('brothel_volunteer', {
      owner: "owner",
      head: "head",
      slave: "slave",
      volunteer: "volunteer_female",
    }),
  ),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_busy_brothel [nobr event] {"position":"1225,17225","size":"100,100"}
<<run new setup.Event(
'busy_brothel', /* key */
"Busy Brothel", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_busy_brothel',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_cage_relief [nobr event] {"position":"100,12850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'cage_relief', /* key */
"Cage Relief", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_cage_relief',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.eq_chastity], true),
    setup.qres.AnyTrait([setup.trait.dick_tiny, setup.trait.dick_small, setup.trait.dick_medium, setup.trait.dick_large, setup.trait.dick_huge, setup.trait.dick_titanic], true),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master, setup.trait.training_obedience_basic], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_change_to_position [nobr event] {"position":"725,14475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'change_to_position', /* key */
"Change to Position", /* Title */
{  /* Author */
  name: "Quiver",
  url: "https://www.reddit.com/r/FortOfChains/comments/ktx1fr/new_event_post_for_playing_a_submissive_slaver/",
},
[ /* tags */
  'fort',
  'special',
  'unknown',
],
'Event_change_to_position',
{ /* roles */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.AllTraits([setup.trait.per_submissive, setup.trait.per_sexaddict], true),
    setup.qres.Trait(setup.trait.join_senior),
    setup.qres.NoTitle('quest_slave_leader_of_the_company_0'),
  ],
  'them': [
    setup.qres.NotYou(),
    setup.qres.Job(setup.job.slaver),
    setup.qres.NoTrait(setup.trait.per_submissive),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('change_to_position', {
you: "you",
them: "them",
}),
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.common,  /* Rarity */
)>>


:: EventSetup_choose_your_own_adventure_chapter_2 [nobr event] {"position":"975,17475","size":"100,100"}
<<run new setup.Event(
'choose_your_own_adventure_chapter_2', /* key */
"Choose Your Own Adventure: Chapter 2", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
'fort',
],
'Event_choose_your_own_adventure_chapter_2',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarSet('choose_your_own_adventure_progress', '2a', -1),
  setup.qc.Opportunity('choose_your_own_adventure__chapter_2', null),
],
[ /* restrictions */
  setup.qres.VarEqual('choose_your_own_adventure_progress', '2'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_choose_your_own_adventure_chapter_3 [nobr event] {"position":"1225,17475","size":"100,100"}
<<run new setup.Event(
'choose_your_own_adventure_chapter_3', /* key */
"Choose Your Own Adventure: Chapter 3", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
'fort',
],
'Event_choose_your_own_adventure_chapter_3',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarSet('choose_your_own_adventure_progress', '4a', -1),
  setup.qc.Opportunity('choose_your_own_adventure__chapter_3', null),
],
[ /* restrictions */
  setup.qres.VarEqual('choose_your_own_adventure_progress', '4'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_choose_your_own_adventure_chapter_4 [nobr event] {"position":"225,17600","size":"100,100"}
<<run new setup.Event(
'choose_your_own_adventure_chapter_4', /* key */
"Choose Your Own Adventure: Chapter 4", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_choose_your_own_adventure_chapter_4',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarSet('choose_your_own_adventure_progress', '6a', -1),
  setup.qc.Opportunity('choose_your_own_adventure__chapter_4', null),
],
[ /* restrictions */
  setup.qres.VarEqual('choose_your_own_adventure_progress', '6'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_choose_your_own_adventure_final_chapter [nobr event] {"position":"475,17600","size":"100,100"}
<<run new setup.Event(
'choose_your_own_adventure_final_chapter', /* key */
"Choose Your Own Adventure: Final Chapter", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_choose_your_own_adventure_final_chapter',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarSet('choose_your_own_adventure_progress', '8a', -1),
  setup.qc.IfThenElse(
setup.qres.VarGte('choose_your_own_adventure_changes', 4),
setup.qc.DoAll([
setup.qc.Opportunity('choose_your_own_adventure__final_chapter', null)
], undefined),
setup.qc.DoAll([
setup.qc.Opportunity('choose_your_own_adventure__final_chapter_true_end', null)
], undefined)),
],
[ /* restrictions */
  setup.qres.VarEqual('choose_your_own_adventure_progress', '8'),
  setup.qres.Building(setup.buildingtemplate.veteranhall),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_cleaning_punishment [nobr event] {"position":"350,12850","size":"100,100"}
<<run new setup.Event(
'cleaning_punishment', /* key */
"Cleaning Punishment", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_cleaning_punishment',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_maid], true),
    setup.qres.NoTraits([setup.trait.per_kind, setup.trait.per_submissive], true),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.OnDuty('maidslave'),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_clerk_exercise [nobr event] {"position":"975,19225","size":"100,100"}
<<run new setup.Event(
'clerk_exercise', /* key */
"Clerk Exercise", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_clerk_exercise',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_clerk], true),
    setup.qres.NoTraits([setup.trait.muscle_verythin, setup.trait.muscle_extremelythin, setup.trait.muscle_strong, setup.trait.muscle_verystrong, setup.trait.muscle_extremelystrong, setup.trait.tough_tough], true),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('clerk_exercise', {
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.traininggrounds),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_clerk_exercise_outcome [nobr event] {"position":"1225,19225","size":"100,100"}
<<run new setup.Event(
'clerk_exercise_outcome', /* key */
"Clerk Exercise Outcome", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_clerk_exercise_outcome',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
  ],
},
[ /* outcomes */
  setup.qc.BoonizeRandom('slaver', 5),
  setup.qc.OneRandomSeed([
setup.qc.Trait('slaver', setup.trait.muscle_strong),
setup.qc.Trait('slaver', setup.trait.tough_tough)
]),
  setup.qc.Return('slaver'),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.traininggrounds),
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_cold_blooded [nobr event] {"position":"225,15850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'cold_blooded', /* key */
"Cold-Blooded", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_cold_blooded',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.NotYou(),
],

'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('lizardkin', -20),
setup.qc.MissingUnit('victim'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('lizardkin', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_combat_training [nobr event] {"position":"225,19350","size":"100,100"}
<<run new setup.Event(
'combat_training', /* key */
"Combat Training", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_combat_training',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_knight, setup.trait.bg_mercenary, setup.trait.bg_soldier], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.traininggrounds),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_coming_of_age [nobr event] {"position":"1225,12475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'coming_of_age', /* key */
"Coming of Age", /* Title */
{ /* Author */
  name: "Alberich",
  url: 'https://www.reddit.com/r/FortOfChains/comments/k53ydc/enlightenment/',
},
[ ], /* tags */
'Event_coming_of_age',
{ /* roles */
},
{ /* actors */
'child': null },
[ /* outcomes */
setup.qc.Opportunity('coming_of_age', {child: 'child',}), ],
[ /* restrictions to generate */
],
1, /* Cooldown */
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_company_history_ledger [nobr event] {"position":"475,19350","size":"100,100"}
<<run new setup.Event(
'company_history_ledger', /* key */
"Company History Ledger", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_company_history_ledger',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_scholar, setup.trait.join_senior], true),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.f_object_good_slaver),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.bedchamberwing),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_company_rug [nobr event] {"position":"725,19350","size":"100,100"}
<<run new setup.Event(
'company_rug', /* key */
"Company Rug", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_company_rug',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_artisan, setup.trait.join_senior], true),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.f_tile_good_slaver),
  setup.qc.BoonizeRandom('slaver', 5),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.bedchamberwing),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_connected_slaver [nobr event] {"position":"975,19350","size":"100,100"}
<<run new setup.Event(
'connected_slaver', /* key */
"Connected Slaver", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_connected_slaver',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_boss, setup.trait.bg_informer, setup.trait.skill_connected], true),
  ],
  'rescue': 'missingslavers',
},
[ /* outcomes */
  setup.qc.Slaver('rescue', "", undefined),
],
[ /* restrictions */
  setup.qres.UnitGroupHasUnit('missingslavers'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_consensual_topping [nobr event] {"position":"600,12850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'consensual_topping', /* key */
"Consensual Topping", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_consensual_topping',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'top': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.LoverExist(),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Trait(setup.trait.per_dominant),
    setup.qres.BestFriend(setup.qres.And([
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
setup.qres.Available(),
setup.qres.NoTrait(setup.trait.per_dominant)
])),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_corruption_rain [nobr event] {"position":"1225,14850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'corruption_rain', /* key */
"Corruption Rain", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_corruption_rain',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('demon', -20),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('demon', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_court_gossip [nobr event] {"position":"225,15475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'court_gossip', /* key */
"Court Gossip", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_court_gossip',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('royal', -20),
setup.qc.IreSpread('royal'),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('royal', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_cow_milking [nobr event] {"position":"850,12850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'cow_milking', /* key */
"Cow Milking", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_cow_milking',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Home(),
    setup.qres.OnDuty('milkcowslave'),
    setup.qres.AnyTrait([setup.trait.breast_huge, setup.trait.breast_titanic], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_cumslut_whore [nobr event] {"position":"1100,12850","size":"100,100"}
<<run new setup.Event(
'cumslut_whore', /* key */
"Cumslut Whore", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_cumslut_whore',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.training_oral_master], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_curse_bestowed [nobr event] {"position":"975,14975","size":"100,100"}
<<run new setup.Event(
'curse_bestowed', /* key */
"Curse Bestowed", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_curse_bestowed',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Ire('demon', -20),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
],
[ /* restrictions */
  setup.qres.IreAtLeast('demon', 20),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_curse_of_misfortune [nobr event] {"position":"225,18350","size":"100,100"}
<<run new setup.Event(
'curse_of_misfortune', /* key */
"Curse of Misfortune", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_curse_of_misfortune',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTag('quest_harbinger_of_luck_tagged'),
  ],
},
[ /* outcomes */
  setup.qc.RemoveTagGlobal('quest_harbinger_of_luck_tagged'),
  setup.qc.AddTitle('a', 'quest_harbinger_of_misfortune_0'),
  setup.qc.VarSet('quest_harbinger_of_luck_progress', '3', -1),
  setup.qc.SetCooldownEvent('luck_chaser', 5),
  setup.qc.Blessing('a', 1, null, true),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_harbinger_of_luck_progress', '2'),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_daylight_robbery [nobr event] {"position":"975,15475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'daylight_robbery', /* key */
"Daylight Robbery", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_daylight_robbery',
{ /* roles */
'slaver': [
setup.qres.NotYou(),
setup.qres.Job(setup.job.slaver),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.MoneyCustom(-15000),
setup.qc.Ire('royal', -20), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('royal', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_debtor_for_sale [nobr event] {"position":"100,12975","size":"100,100"}
<<run new setup.UnitGroup(
"debtor_for_sale0",
"Debtor",
'all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_merchant),
  setup.qc.TraitReplace('unit', setup.trait.per_lavish),
],
)>>

<<run new setup.Event(
'debtor_for_sale', /* key */
"Debtor for Sale", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
  'unit',
],
'Event_debtor_for_sale',
{ /* roles (LEGACY) */
},
{ /* actors */
  'man': 'all',
  'debtor': 'debtor_for_sale0',
},
[ /* outcomes */
  setup.qc.VarSet('quest_tiger_bank_repo_resale', '1', 250),
  setup.qc.Slave('debtor', "a|was enslaved after a|they fell into a debt far too big for a|their own worth", true, 0.8),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
  setup.qres.FavorAtLeast('bank', 300),
  setup.qres.VarNull('quest_tiger_bank_repo_resale'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_defiant_slave [nobr event] {"position":"725,16100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'defiant_slave', /* key */
"Defiant Slave", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
],
'Event_defiant_slave',
{ /* roles */
},
{ /* actors */
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.AllowDefiant(),
    setup.qres.Trait(setup.trait.will_defiant),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.technology_research),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.technology_research),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_defying_odds [nobr event] {"position":"475,18475","size":"100,100"}
<<run new setup.Event(
'defying_odds', /* key */
"Defying Odds", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_defying_odds',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.AllTraits([setup.trait.perk_harbinger_of_crow], true),
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_harbinger_of_crows_radiant', '1', 250),
  setup.qc.Blessing('a', 1, null, true),
],
[ /* restrictions */
  setup.qres.VarNull('quest_harbinger_of_crows_radiant'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_demon_visit [nobr event] {"position":"225,17350","size":"100,100"}
<<run new setup.UnitGroup(
"demon_visit0",
"Demon Royal",
'subrace_demon', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_royal),
  setup.qc.TraitsReplace('unit', [setup.trait.magic_dark_master, setup.trait.per_cruel]),
],
)>>

<<run new setup.Event(
'demon_visit', /* key */
"Demon Visit", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_demon_visit',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
  'target': 'demon_visit0',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.QuestDirect('demon_visit', {
head: "head",
owner: "owner",
slave: "slave",
target: "target",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
  setup.qres.VarNull('quest_brothel_royal_visit'),
  setup.qres.VarLte('quest_brothel_class', -20),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_demonic_pitfall [nobr event] {"position":"1225,15850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'demonic_pitfall', /* key */
"Unknown Tentacle Object", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_demonic_pitfall',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('demon', -20),
setup.qc.MissingUnitRecapture('victim', 'capturedhard'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('demon', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_demonic_roleplay [nobr event] {"position":"350,12975","size":"100,100"}
<<run new setup.Event(
'demonic_roleplay', /* key */
"Demonic Roleplay", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_demonic_roleplay',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Home(),
    setup.qres.OnDuty('theatreslave'),
    setup.qres.AnyTrait([setup.trait.training_roleplay_advanced, setup.trait.training_roleplay_master], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_desert_raiders [nobr event] {"position":"1225,15600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'desert_raiders', /* key */
"Desert Raiders", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_desert_raiders',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humandesert', -20),
setup.qc.QuestDirect('desert_raider'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humandesert', 20),
setup.qres.Building('veteranhall'),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_desperately_horny [nobr event] {"position":"600,12975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'desperately_horny', /* key */
"Desperately Horny", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_desperately_horny',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_obedience_basic, setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
    setup.qres.AnyTrait([setup.trait.per_lustful, setup.trait.per_sexaddict], true),
    setup.qres.Not(setup.qres.IsCanOrgasm()),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_devoted_entertainment_slave [nobr event] {"position":"850,12975","size":"100,100"}
<<run new setup.Event(
'devoted_entertainment_slave', /* key */
"Devoted Entertainment Slave", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_devoted_entertainment_slave',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.OnDuty('entertainmentslave'),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_disappearing_act [nobr event] {"position":"475,15100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'disappearing_act', /* key */
"Disappearing Act", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_disappearing_act',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slave),
setup.qres.Available(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('elf', -20),
setup.qc.MissingUnitRecapture('victim', 'escapehard'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('elf', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_doctor_molestation [nobr event] {"position":"1100,12975","size":"100,100"}
<<run new setup.Event(
'doctor_molestation', /* key */
"Doctor Molestation", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_doctor_molestation',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.OnDuty('doctor'),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.NoTraits([setup.trait.per_chaste, setup.trait.per_submissive], true),
    setup.qres.AnyTrait([setup.trait.per_dominant, setup.trait.per_lustful, setup.trait.per_sexaddict], true),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.IsInjured(1),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_dominant_slave_1 [nobr event] {"position":"725,12600","size":"100,100"}
<<run new setup.Event(
'dominant_slave_1', /* key */
"Dominant Slave 1", /* Title */
{ /* Author */
  name: "Bigal",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_dominant_slave_1',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.training_dominance_master], true),
    setup.qres.BedchamberOtherSlave(setup.qres.And([
setup.qres.Available(),
setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
setup.qres.AllTraits([setup.trait.per_submissive], true)
])),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_doppelganger_epilogue [nobr event] {"position":"975,17600","size":"100,100"}
<<run new setup.Event(
'doppelganger_epilogue', /* key */
"Doppelganger Epilogue", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_doppelganger_epilogue',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_doppelganged'),
    setup.qres.Available(),
    setup.qres.Home(),
  ],
  'dop': setup.contacttemplate.quest_doppelganger,
},
[ /* outcomes */
  setup.qc.Opportunity('doppelganger_epilogue', {
dop: "dop",
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_doppelganger_progress', '6'),
  setup.qres.NoOpportunity('doppelganger_epilogue'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_doppelganger_show [nobr event] {"position":"1225,17600","size":"100,100"}
<<run new setup.Event(
'doppelganger_show', /* key */
"Doppelganger Show", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_doppelganger_show',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_doppelganged'),
    setup.qres.Available(),
    setup.qres.Home(),
  ],
  'dop': setup.contacttemplate.quest_doppelganger,
},
[ /* outcomes */
  setup.qc.VarSet('quest_doppelganger_event_cooldown', '1', 100),
],
[ /* restrictions */
  setup.qres.VarNull('quest_doppelganger_progress'),
  setup.qres.VarNull('quest_doppelganger_event_cooldown'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


<<run new setup.Event(
'doppelganger_show2', /* key */
"Doppelganger Show", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_doppelganger_show',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_doppelganged'),
    setup.qres.Available(),
    setup.qres.Home(),
  ],
  'dop': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_doppelganger'),
    setup.qres.Available(),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_doppelganger_event_cooldown', '1', 100),
],
[ /* restrictions */
  setup.qres.VarNull('quest_doppelganger_progress'),
  setup.qres.VarNull('quest_doppelganger_event_cooldown'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_drow_hex [nobr event] {"position":"1225,14975","size":"100,100"}
<<run new setup.Event(
'drow_hex', /* key */
"Drow Hex", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_drow_hex',
{ /* roles (LEGACY) */
},
{ /* actors */
  'drow': 'subrace_drow',
},
[ /* outcomes */
  setup.qc.Ire('drow', -20),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
],
[ /* restrictions */
  setup.qres.IreAtLeast('drow', 20),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_dungeons_and_dragons [nobr event] {"position":"225,17850","size":"100,100"}
<<run new setup.Event(
'dungeons_and_dragons', /* key */
"Dungeons and Dragons", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_dungeons_and_dragons',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.join_senior, setup.trait.bg_adventurer], true),
  ],
},
[ /* outcomes */
  setup.qc.AddTitle('slaver', 'quest_heroic_withdrawal_0'),
  setup.qc.VarRemove('dungeons_and_dragons_withdrawal_progress'),
  setup.qc.QuestDirect('dungeons_and_dragons', null),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.veteranhall),
  setup.qres.NoUnitWithTitle('quest_heroic_withdrawal_0', {
}),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_dungeons_and_dragons_fetch_quest [nobr event] {"position":"475,17850","size":"100,100"}
<<run new setup.Event(
'dungeons_and_dragons_fetch_quest', /* key */
"Dungeons and Dragons: Fetch Quest", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'prep',
  'unknown',
  'fort',
],
'Event_dungeons_and_dragons_fetch_quest',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_heroic_withdrawal_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarRemove('dungeons_and_dragons_withdrawal_progress'),
  setup.qc.Opportunity('dungeons_and_dragons_fetch_quest', {
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.VarEqual('dungeons_and_dragons_withdrawal_progress', '3'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_dungeons_and_dragons_lair_of_evil [nobr event] {"position":"725,17850","size":"100,100"}
<<run new setup.Event(
'dungeons_and_dragons_lair_of_evil', /* key */
"Dungeons and Dragons: Lair of Evil", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'sea',
  'prep',
  'unknown',
],
'Event_dungeons_and_dragons_lair_of_evil',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_heroic_withdrawal_0'),
  ],
},
[ /* outcomes */
  setup.qc.VarRemove('dungeons_and_dragons_withdrawal_progress'),
  setup.qc.Opportunity('dungeons_and_dragons_lair_of_evil_captive', {
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.VarEqual('dungeons_and_dragons_withdrawal_progress', '4'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_earth_priests_ire [nobr event] {"position":"1225,13975","size":"100,100"}
<<run new setup.Event(
'earth_priests_ire', /* key */
"Earth Priests Ire", /* Title */
{ /* Author */
  name: "Fae",
  url: "",
},
[ /* tags */
],
'Event_earth_priests_ire',
{ /* roles (LEGACY) */
},
{ /* actors */
  'tiredone': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
  ],
  'tiredtwo': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
  setup.qc.Ire('kobold', -20),
  setup.qc.Leave('tiredone', "a|is cleaning the growths and debris from your fort ", 5),
  setup.qc.Leave('tiredtwo', "a|is cleaning the growths and debris from your fort", 5),
  setup.qc.MoneyCustom(-5000),
],
[ /* restrictions */
  setup.qres.IreAtLeast('kobold', 20),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_eastern_swindlers [nobr event] {"position":"1225,15475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'eastern_swindlers', /* key */
"Eastern Swindlers", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_eastern_swindlers',
{ /* roles */
'slaver': [
setup.qres.NotYou(),
setup.qres.Job(setup.job.slaver),
],

'slaver2': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.MoneyCustom(-10000),
setup.qc.Ire('humandesert', -20), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humandesert', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_elven_hot_springs_consequences [nobr event] {"position":"1225,14100","size":"100,100"}
<<run new setup.Event(
'elven_hot_springs_consequences', /* key */
"Elven Hot Springs: Consequences", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'fort',
],
'Event_elven_hot_springs_consequences',
{ /* roles (LEGACY) */
},
{ /* actors */
  'elf': [
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.race_elf], true),
    setup.qres.AnyTrait([setup.trait.per_kind, setup.trait.per_honorable], true)
  ],
},
[ /* outcomes */
  setup.qc.MissingUnitForever('elf'),
  setup.qc.AllUnitSatisfyDo([
    setup.qres.Job(setup.job.slave),
    setup.qres.Available(),
    setup.qres.AllTraits([setup.trait.subrace_elf, setup.trait.training_none,], true),
    setup.qres.ZeroTitle(),
  ],
  [
    setup.qc.OneRandom([
      setup.qc.MissingUnit('unit'),
      setup.qc.MissingUnit('unit'),
      setup.qc.MissingUnitRecapture('unit', 'escapeeasy'),
      setup.qc.MissingUnitRecapture('unit', 'escapemedium'),
      setup.qc.MissingUnitRecapture('unit', 'escapehard'),
    ])
  ],
),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_elvish_hex [nobr event] {"position":"225,15100","size":"100,100"}
<<run new setup.Event(
'elvish_hex', /* key */
"Elvish Hex", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_elvish_hex',
{ /* roles (LEGACY) */
},
{ /* actors */
  'elf': 'subrace_elf',
},
[ /* outcomes */
  setup.qc.Ire('elf', -20),
  /* elven hex is slightly weaker, only 4 curses instead of 5 */
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
  setup.qc.CurseRandomSlaverHome(),
],
[ /* restrictions */
  setup.qres.IreAtLeast('elf', 20),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_end_of_a_company [nobr event] {"position":"1225,16475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'end_of_a_company', /* key */
"End of a Company", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
],
'Event_end_of_a_company',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
  ],
  'boss': [
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('end_of_a_company', {
slaver: "slaver",
boss: "boss",
}),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_end_of_management [nobr event] {"position":"1225,16975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'end_of_management', /* key */
"End of Management", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_end_of_management',
{ /* roles (LEGACY) */
},
{ /* actors */
},
setup.dutytemplate.questbrothelmanager.resetChain().concat([
  /* outcomes */

]),
[ /* restrictions */
  setup.qres.NoUnitWithTitle('quest_brothel_owner_0'),
  setup.qres.VarLte('quest_brothel_progress', 499),
  setup.qres.Not(setup.qres.VarNull('quest_brothel_progress')),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_end_of_management2 [nobr event] {"position":"225,17100","size":"100,100"}
<<run new setup.Event(
'end_of_management2', /* key */
"End of Management", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_end_of_management2',
{ /* roles (LEGACY) */
},
{ /* actors */
  'courtesan': 'brothel_head_courtesan',
  'head': 'brothel_cleanup0',
},
setup.dutytemplate.questbrothelmanager.resetChain().concat([
  /* outcomes */
  setup.qc.Slave('courtesan', "", undefined),
  setup.qc.AddHistory('courtesan', 'a|was appointed head courtesan in your brothel, but returned as a slave to your company when it closes'),
  setup.qc.Slaver('head', "a|was the former head-whore of your brothel", undefined),
]),
[ /* restrictions */
  setup.qres.NoUnitWithTitle('quest_brothel_owner_0', {}),
  setup.qres.Not(setup.qres.VarNull('quest_brothel_progress')),
  setup.qres.VarGte('quest_brothel_progress', 500),
  setup.qres.UnitGroupHasUnit('brothel_head_courtesan'),
  setup.qres.UnitGroupHasUnit('brothel_cleanup0'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_enlightenment_of_the_soul___interlude [nobr event] {"position":"225,12600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'enlightenment_of_the_soul___interlude', /* key */
"Enlightenment of the Soul - Interlude", /* Title */
{ /* Author */
  name: "Alberich",
  url: 'https://www.reddit.com/r/FortOfChains/comments/k53ydc/enlightenment/',
},
[ ], /* tags */
'Event_enlightenment_of_the_soul___interlude',
{ /* roles */
},
{ /* actors */
'pupil': null,
'child': null,
},
[ /* outcomes */
setup.qc.TraitRemove('pupil', setup.trait.per_chaste),
setup.qc.QuestDirect('enlightenment_of_the_soul', {child: 'child'}),
],
[ /* restrictions to generate */
],
1,
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_enlightenment_of_the_soul___interlude2 [nobr event] {"position":"475,12600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'enlightenment_of_the_soul___interlude2', /* key */
"Enlightenment of the Soul - Interlude", /* Title */
{ /* Author */
  name: "Alberich",
  url: 'https://www.reddit.com/r/FortOfChains/comments/k53ydc/enlightenment/',
},
[ ], /* tags */
'Event_enlightenment_of_the_soul___interlude2',
{ /* roles */
},
{ /* actors */
'child': null,
'pupil': null,
},
[ /* outcomes */
setup.qc.TraitRemove('pupil', setup.trait.per_chaste),
setup.qc.QuestDirect('enlightenment_of_the_soul', {child: 'child'}),
],
[ /* restrictions to generate */
],
1,
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_entertainer_dance [nobr event] {"position":"1225,19350","size":"100,100"}
<<run new setup.Event(
'entertainer_dance', /* key */
"Entertainer Dance", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_entertainer_dance',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_entertainer], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.hiringsquare),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_equivalent_exchange [nobr event] {"position":"475,20475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'equivalent_exchange', /* key */
"Equivalent Exchange", /* Title */
"darko", /* Author */
[ /* tags */
  'playercapture',
],
'Event_equivalent_exchange',
{ /* roles */
},
{ /* actors */
  'you': null,
},
[ /* outcomes */
  setup.qc.Opportunity('equivalent_exchange', {
you: "you",
}),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_ex_leader [nobr event] {"position":"225,19475","size":"100,100"}
<<run new setup.Event(
'ex_leader', /* key */
"Ex-Leader", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_ex_leader',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.join_senior], true),
    setup.qres.HasTitle('ex_leader'),
  ],
},
[ /* outcomes */
      setup.qc.Opportunity('ex_leader', {
you: "you",
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_ex_reserved [nobr event] {"position":"100,13100","size":"100,100"}
<<run new setup.Event(
'ex_reserved', /* key */
"Ex-Reserved", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_ex_reserved',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveUsableByYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_priest, setup.trait.bg_mythical, setup.trait.bg_scholar, setup.trait.bg_engineer, setup.trait.bg_monk, setup.trait.bg_noble, setup.trait.bg_royal, setup.trait.bg_healer], true),
    setup.qres.AnyTrait([setup.trait.per_sexaddict, setup.trait.training_oral_master, setup.trait.training_anal_master], true),
    setup.qres.NoTraits([setup.trait.join_junior], true),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.gym),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_ex_slaver_for_sale [nobr event] {"position":"475,15850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'ex_slaver_for_sale', /* key */
"Ex-Slaver for Sale", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_ex_slaver_for_sale',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.NotYou(),
],

'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('outlaws', -20),
setup.qc.MissingUnit('victim'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('outlaws', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_fallen_knight [nobr event] {"position":"475,19475","size":"100,100"}
<<run new setup.Event(
'fallen_knight', /* key */
"Fallen Knight", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_fallen_knight',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveUsableByYou(),
    setup.qres.Available(),
    setup.qres.AllTraits([setup.trait.bg_knight], true),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_faraway_disapproval [nobr event] {"position":"225,15225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'faraway_disapproval', /* key */
"Faraway Disapproval", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_faraway_disapproval',
{ /* roles */
'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humansea', -20),
setup.qc.Favor('humansea', -500),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humansea', 20),
setup.qres.FavorAtLeast('humansea', 500), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_farmer_harvest [nobr event] {"position":"725,19475","size":"100,100"}
<<run new setup.Event(
'farmer_harvest', /* key */
"Farmer Harvest", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_farmer_harvest',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_farmer], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_fetters_with_pulleys [nobr event] {"position":"975,19475","size":"100,100"}
<<run new setup.Event(
'fetters_with_pulleys', /* key */
"Fetters with Pulleys", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_fetters_with_pulleys',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.join_senior, setup.trait.bg_engineer], true),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.f_punishment_good_slaver),
  setup.qc.BoonizeRandom('slaver', 5),
  setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.AllTraits([setup.trait.per_frugal], true)),
setup.qc.DoAll([
setup.qc.MoneyCustom(-4000)
], undefined),
setup.qc.DoAll([
setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.AllTraits([setup.trait.per_lavish], true)),
setup.qc.DoAll([
setup.qc.MoneyCustom(-500)
], undefined),
setup.qc.DoAll([
setup.qc.MoneyCustom(-2000)
], undefined))
], undefined)),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.forge),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_flickering_flame [nobr event] {"position":"725,20475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'flickering_flame', /* key */
"Flickering Flame", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_flickering_flame',
{ /* roles */
},
{ /* actors */
  'you': [
    setup.qres.You(),
  ],
  'lover': [
    setup.qres.NotYou(),
    setup.qres.CanBeLoverWithYou(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('flickering_flame', {
you: "you",
lover: "lover",
}),
],
[ /* restrictions */
],
100, /* Cooldown */
setup.rarity.common,  /* Rarity */
)>>


:: EventSetup_fort_clearing [nobr event] {"position":"975,16100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'fort_clearing', /* key */
"Fort Clearing", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_fort_clearing',
{ /* roles */
},
{ /* actors */
  'slaver': [
    setup.qres.NotYou(),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_bodypart_anus),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_bodypart_anus),
  setup.qres.FortLevelAtLeast(3),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_fort_rescue [nobr event] {"position":"975,15725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'fort_rescue', /* key */
"Fort Rescue", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_fort_rescue',
{ /* roles */
'victim': [
setup.qres.Available(),
setup.qres.Job(setup.job.slave),
],

'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humankingdom', -20),
setup.qc.MissingUnit('victim'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humankingdom', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_fort_restoration_awards [nobr event] {"position":"475,17975","size":"100,100"}
<<run new setup.Event(
'fort_restoration_awards', /* key */
"Fort Restoration Awards", /* Title */
{ /* Author */
  name: "darko",
  url: "darko",
},
[ /* tags */
  'fort',
],
'Event_fort_restoration_awards',
{ /* roles (LEGACY) */
},
{ /* actors */
  'inspector': 'all',
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 50),
  setup.qc.Opportunity('fort_restoration_awards', {
inspector: "inspector",
}),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_fort_restoration_progress', '2'),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_fort_restoration_awards_efficiency [nobr event] {"position":"725,17975","size":"100,100"}
<<run new setup.Event(
'fort_restoration_awards_efficiency', /* key */
"Fort Restoration Awards: Efficiency", /* Title */
{ /* Author */
  name: "darko",
  url: "darko",
},
[ /* tags */
  'fort',
],
'Event_fort_restoration_awards_efficiency',
{ /* roles (LEGACY) */
},
{ /* actors */
  'inspector': 'all',
},
[ /* outcomes */
  setup.qc.Opportunity('fort_restoration_awards_semi_finals', {
    inspector: "inspector",
  }),
  setup.qc.SetCooldownEvent(null, 50),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_fort_restoration_progress', '1'),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_fort_restoration_awards_preliminaries [nobr event] {"position":"975,17975","size":"100,100"}
<<run new setup.Event(
'fort_restoration_awards_preliminaries', /* key */
"Fort Restoration Awards: Theme", /* Title */
{ /* Author */
  name: "darko",
  url: "darko",
},
[ /* tags */
  'fort',
],
'Event_fort_restoration_awards_preliminaries',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Opportunity('fort_restoration_awards_preliminaries', {
  }),
  setup.qc.SetCooldownEvent(null, 50),
],
[ /* restrictions */
  setup.qres.VarNull('quest_fort_restoration_progress'),
  setup.qres.Building('veteranhall'),
  setup.qres.Money(50000),
],
10, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_furging_a_new_path [nobr event] {"position":"225,14475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'furging_a_new_path', /* key */
"Furging a New Path", /* Title */
{ /* Author */
  name: "Milk Maid Sona",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_furging_a_new_path',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_living_pawst_0'),
    setup.qres.NoTraits([setup.trait.training_mindbreak, setup.trait.will_defiant, setup.trait.will_indomitable], true),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
  ],
  'you': [
    setup.qres.You(),
  ],
},
[ /* outcomes */
  setup.qc.Favor('neko', 100),
  setup.qc.Opportunity('furging_a_new_path', {
slaver: "slaver",
slave: "slave",
you: "you",
}),
],
[ /* restrictions */
  setup.qres.NoOpportunity('furging_a_new_path'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_gift_of_the_lizardkin [nobr event] {"position":"225,15350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'gift_of_the_lizardkin', /* key */
"Gift of the Lizardkin", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_gift_of_the_lizardkin',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('lizardkin', -20),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('lizardkin', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_girlish_slave [nobr event] {"position":"350,13100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'girlish_slave', /* key */
"Girlish Slave", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_girlish_slave',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.Or([
setup.qres.TraitExact(setup.trait.training_obedience_basic),
setup.qres.TraitExact(setup.trait.training_obedience_advanced)
]),
    setup.qres.NoTrait(setup.trait.breast_large),
    setup.qres.NoTrait(setup.trait.muscle_strong),
    setup.qres.NoTrait(setup.trait.tough_tough),
    setup.qres.NoTrait(setup.trait.dick_large),
    setup.qres.NoTrait(setup.trait.balls_large),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.market),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_good_slaver_bad_slaver [nobr event] {"position":"1225,19475","size":"100,100"}
<<run new setup.Event(
'good_slaver_bad_slaver', /* key */
"Good Slaver Bad Slaver", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_good_slaver_bad_slaver',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'good': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.AllTraits([setup.trait.per_kind], true),
  ],
  'bad': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.AllTraits([setup.trait.per_cruel], true),
  ],
  'slave': [
    setup.qres.NotBusy(),
    setup.qres.Job(setup.job.slave),
    setup.qres.AllTraits([setup.trait.training_none, setup.trait.join_junior], true),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('good_slaver_bad_slaver', {
good: "good",
bad: "bad",
slave: "slave",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.trainingchamber),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_grand_lunacy [nobr event] {"position":"225,19600","size":"100,100"}
<<run new setup.Event(
'grand_lunacy', /* key */
"Grand Lunacy", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'vale',
  'unit',
  'unknown',
],
'Event_grand_lunacy',
{ /* roles (LEGACY) */
},
{ /* actors */
  'lunatic': [
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('grand_lunacy', {lunatic: 'lunatic'}),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_gym_sex [nobr event] {"position":"600,13100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<set _outcomes =
[ /* outcomes */
  setup.qc.IfThenElse(
setup.qres.Actor('gym', setup.qres.AnyTrait([setup.trait.per_chaste, setup.trait.per_submissive, setup.trait.per_kind], true)),
setup.qc.DoAll([
setup.qc.BoonizeRandom('other', 2)
], undefined),
setup.qc.DoAll([
setup.qc.Friendship('gym', 'other', 300)
], undefined)),
  setup.qc.SetCooldownEvent('gym_sex_mm', 1000),
  setup.qc.SetCooldownEvent('gym_sex_mf', 1000),
  setup.qc.SetCooldownEvent('gym_sex_ff', 1000),
]
>>

<<set _gymreq = [
  setup.qres.Job(setup.job.slaver),
  setup.qres.NotYou(),
  setup.qres.Available(),
  setup.qres.Trait(setup.trait.muscle_strong),
]>>

<<set _otherreq = [
  setup.qres.Job(setup.job.slaver),
  setup.qres.NotYou(),
  setup.qres.Available(),
  setup.qres.NoTrait(setup.trait.muscle_strong),
  setup.qres.NoTrait(setup.trait.per_dominant),
]>>

<<run new setup.Event(
'gym_sex_mm', /* key */
"Gym Sex", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_gym_sex',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'gym': _gymreq.concat([
    setup.qres.TraitExact(setup.trait.gender_male),
  ]),
  'other': _otherreq.concat([
    setup.qres.TraitExact(setup.trait.gender_male),
  ]),
},
_outcomes,
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.gym),
  setup.qres.AllowLovers('gender_male', 'gender_male'),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'gym_sex_mf', /* key */
"Gym Sex", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_gym_sex',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'gym': _gymreq.concat([
    setup.qres.TraitExact(setup.trait.gender_male),
  ]),
  'other': _otherreq.concat([
    setup.qres.TraitExact(setup.trait.gender_female),
  ]),
},
_outcomes,
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.gym),
  setup.qres.AllowLovers('gender_male', 'gender_female'),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'gym_sex_ff', /* key */
"Gym Sex", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_gym_sex',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'gym': _gymreq.concat([
    setup.qres.TraitExact(setup.trait.gender_female),
  ]),
  'other': _otherreq.concat([
    setup.qres.TraitExact(setup.trait.gender_female),
  ]),
},
_outcomes,
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.gym),
  setup.qres.AllowLovers('gender_female', 'gender_female'),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_half_werewolf__epilogue [nobr event] {"position":"475,18225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'half_werewolf__epilogue', /* key */
"Half-Werewolf: Epilogue", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_half_werewolf__epilogue',
{ /* roles */
},
{ /* actors */
  'child': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_avenger_0'),
    setup.qres.NotInjured(),
  ],
  'father': [
    setup.qres.Job(setup.job.slave),
    setup.qres.HasTag('half_werewolf_father'),
  ],
},
[ /* outcomes */
  setup.qc.VarRemove('half_werewolf_epilogue'),
  setup.qc.RemoveTagGlobal('half_werewolf_father'),
  setup.qc.AddTraitsRandom('child', [setup.trait.skill_ambidextrous, setup.trait.skill_intimidating, setup.trait.skill_hypnotic, setup.trait.skill_connected, setup.trait.skill_creative, setup.trait.skill_entertain, setup.trait.skill_alchemy, setup.trait.skill_animal], 1, false, true),
],
[ /* restrictions */
  setup.qres.VarEqual('half_werewolf_epilogue', '1'),
],
0, /* Cooldown */
setup.rarity.common, /* Rarity */
)>>


:: EventSetup_happy_dance [nobr event] {"position":"850,13100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'happy_dance', /* key */
"Happy Dance", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_happy_dance',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_courtesan, setup.trait.bg_entertainer, setup.trait.skill_entertain], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_harbinger_of_chaos [nobr event] {"position":"475,18350","size":"100,100"}
<<run new setup.Title(
"quest_harbinger_of_chaos_0", /* key */
"Harbinger of Chaos", /* name */
"Blessed with both good and bad luck in excess", /* description */
"a|is blessed with both good and bad fortune in an excess", /* unit text */
0, /* slave value */
{ /* skill additives */
arcane: 4,},
)
>>


<<run new setup.Event(
'harbinger_of_chaos', /* key */
"Harbinger of Chaos", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_harbinger_of_chaos',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_harbinger_of_misfortune_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarRemove('quest_harbinger_of_luck_done'),
  setup.qc.VarRemove('quest_harbinger_of_luck_crit'),
  setup.qc.VarRemove('quest_harbinger_of_luck_progress'),
  setup.qc.VarRemove('quest_harbinger_of_luck_magic'),
  setup.qc.VarRemove('quest_harbinger_of_luck_lucky'),
  setup.qc.VarRemove('quest_harbinger_of_luck_horse'),
  setup.qc.VarRemove('quest_harbinger_of_luck_clover'),
  setup.qc.VarRemove('quest_harbinger_of_luck_bath'),
  setup.qc.VarSet('quest_harbinger_of_crows_radiant', '1', 250),
  setup.qc.RemoveTitle('a', 'quest_harbinger_of_misfortune_0'),
  setup.qc.AddTitle('a', 'quest_harbinger_of_chaos_0'),
  setup.qc.PerkChoice('a', 'perk_harbinger_of_chaos'),
],
[ /* restrictions */
  setup.qres.VarGte('quest_harbinger_of_luck_done', 3),
  setup.qres.VarGte('quest_harbinger_of_luck_crit', 2),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_harbinger_of_crows [nobr event] {"position":"725,18350","size":"100,100"}
<<run new setup.Title(
"quest_harbinger_of_misfortune_0", /* key */
"Harbinger of Misfortune", /* name */
"Seems to attract bad luck around", /* description */
"a|is a beacon for misfortune, drawing bad luck much more than the average person", /* unit text */
-1000, /* slave value */
{ /* skill additives */
},
)
>>
<<run new setup.Title(
"quest_harbinger_of_crows_1", /* key */
"Harbinger of Crows", /* name */
"May have a lower than average luck than the average person, but has resolved to offset it with hard work", /* description */
"a|is cursed with bad luck, but that does not stop a|them from doing a|their hardest in a|their lot in life", /* unit text */
1000, /* slave value */
{ /* skill additives */
combat: 1,brawn: 1,survival: 1,intrigue: 1,slaving: 1,knowledge: 1,social: 1,aid: 1,arcane: 1,sex: 1,},
)
>>


<<run new setup.Event(
'harbinger_of_crows', /* key */
"Harbinger of Crows", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_harbinger_of_crows',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_harbinger_of_misfortune_0'),
  ],
},
[ /* outcomes */
  setup.qc.VarRemove('quest_harbinger_of_luck_done'),
  setup.qc.VarRemove('quest_harbinger_of_luck_crit'),
  setup.qc.VarRemove('quest_harbinger_of_luck_progress'),
  setup.qc.VarRemove('quest_harbinger_of_luck_magic'),
  setup.qc.VarRemove('quest_harbinger_of_luck_lucky'),
  setup.qc.VarRemove('quest_harbinger_of_luck_horse'),
  setup.qc.VarRemove('quest_harbinger_of_luck_clover'),
  setup.qc.VarRemove('quest_harbinger_of_luck_bath'),
  setup.qc.VarSet('quest_harbinger_of_crows_radiant', '1', 250),
  setup.qc.RemoveTitle('a', 'quest_harbinger_of_misfortune_0'),
  setup.qc.AddTitle('a', 'quest_harbinger_of_crows_1'),
  setup.qc.PerkChoice('a', 'perk_harbinger_of_crow'),
],
[ /* restrictions */
  setup.qres.VarGte('quest_harbinger_of_luck_done', 3),
  setup.qres.VarLte('quest_harbinger_of_luck_crit', 1),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_head_courtesan [nobr event] {"position":"475,17100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.UnitGroup(
"brothel_head_courtesan",
"Head Courtesan",
[], /* pools */
1, /* reuse chance */
[ /* unit post process */
],
)>>

<<run new setup.Event(
'head_courtesan', /* key */
"Head Courtesan", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_head_courtesan',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.SlaveOrderHeadCourtesan(),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '100'),
],
53, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_head_courtesan_meeting [nobr event] {"position":"475,17350","size":"100,100"}
<<run new setup.Event(
'head_courtesan_meeting', /* key */
"Head Courtesan Meeting", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_head_courtesan_meeting',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_healer_slaver [nobr event] {"position":"475,19600","size":"100,100"}
<<run new setup.Event(
'healer_slaver', /* key */
"Healer Slaver", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_healer_slaver',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_healer], true),
  ],
  'injured': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.IsInjured(5),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.hospital),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_heavenly_recruit [nobr event] {"position":"725,19600","size":"100,100"}
<<run new setup.Title(
"quest_archangel_of_knowledge_0", /* key */
"Archangel of Knowledge", /* name */
"An angel envoy from the heavens who obliviouslyl came to your fort in hopes of enlisting your skilled slavers in the war against the demons", /* description */
"a|was an envoy from the heavens who obliviouslyl came to your fort in hopes of enlisting your skilled slavers in the war against the demons, but ended up locked behind your bars", /* unit text */
100000, /* slave value */
{ /* skill additives */
knowledge: 5,aid: 5,},
)
>>
<<run new setup.Title(
"quest_angel_touched_1", /* key */
"Angel-Touched", /* name */
"Was head-hunted by an angel to participate in the battle against the demons", /* description */
"a|was head-hunted by an angel to participate in the battle against the demons, but turned the tables on the angel instead", /* unit text */
3000, /* slave value */
{ /* skill additives */
combat: 1,brawn: 1,survival: 1,intrigue: 1,slaving: 1,knowledge: 1,social: 1,aid: 1,arcane: 1,sex: 1,},
)
>>
<<run new setup.UnitGroup(
"heavenly_recruit1",
"Angel of Knowledge",
'subrace_angel', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.AddTitle('unit', 'quest_archangel_of_knowledge_0'),
  setup.qc.TraitsReplace('unit', [setup.trait.per_smart]),
],
)>>

<<run new setup.Event(
'heavenly_recruit', /* key */
"Heavenly Recruit", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'unit',
],
'Event_heavenly_recruit',
{ /* roles (LEGACY) */
},
{ /* actors */
  'angel': 'heavenly_recruit1',
},
[ /* outcomes */
  setup.qc.Slave('angel', "a|was an envoy from the skies who came to your fort, lured by skilled slavers, but ended up enslaved", undefined),
  setup.qc.AllUnitSatisfyDo([setup.qres.Or([
setup.qres.HasTitle('quest_master_of_aid_0'),
setup.qres.HasTitle('quest_master_of_arcane_0'),
setup.qres.HasTitle('quest_master_of_brawn_0'),
setup.qres.HasTitle('quest_master_of_combat_0'),
setup.qres.HasTitle('quest_master_of_intrigue_0'),
setup.qres.HasTitle('quest_master_of_knowledge_0'),
setup.qres.HasTitle('quest_master_of_sex_0'),
setup.qres.HasTitle('quest_master_of_slaving_0'),
setup.qres.HasTitle('quest_master_of_social_0'),
setup.qres.HasTitle('quest_master_of_survival_0')
])],
[setup.qc.AddTitle('unit', 'quest_angel_touched_1')],
),
],
[ /* restrictions */
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_aid_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_arcane_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_brawn_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_combat_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_intrigue_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_knowledge_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_sex_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_slaving_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_social_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
  setup.qres.ExistUnit([
    setup.qres.HasTitle('quest_master_of_survival_0'),
    setup.qres.NoTitle('quest_angel_touched_1')
  ], 1),
],
100, /* Cooldown */
setup.rarity.legendary, /* Rarity */
)>>


:: EventSetup_heisted_by_ninjas [nobr event] {"position":"225,15600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'heisted_by_ninjas', /* key */
"Heisted by Ninjas", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_heisted_by_ninjas',
{ /* roles */
'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.MoneyCustom(-10000),
setup.qc.Ire('humansea', -20), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humansea', 20), ],
0,
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_herald_of_misfortune [nobr event] {"position":"975,18350","size":"100,100"}
<<run new setup.Event(
'herald_of_misfortune', /* key */
"Herald of Misfortune", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_herald_of_misfortune',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.Available(),
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
  ],
  'you': [
    setup.qres.You(),
  ],
},
[ /* outcomes */
  setup.qc.VarRemove('quest_harbinger_of_luck_done'),
  setup.qc.VarRemove('quest_harbinger_of_luck_crit'),
  setup.qc.VarRemove('quest_harbinger_of_luck_progress'),
  setup.qc.VarRemove('quest_harbinger_of_luck_magic'),
  setup.qc.VarRemove('quest_harbinger_of_luck_lucky'),
  setup.qc.VarRemove('quest_harbinger_of_luck_horse'),
  setup.qc.VarRemove('quest_harbinger_of_luck_clover'),
  setup.qc.VarRemove('quest_harbinger_of_luck_bath'),
  setup.qc.VarSet('quest_harbinger_of_luck_progress', '1', -1),
  setup.qc.SetCooldownEvent('just_coincidence', 10),
  setup.qc.AddTag('a', 'quest_harbinger_of_luck_tagged'),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.veteranhall),
  setup.qres.NoUnitWithTitle('quest_harbinger_of_misfortune_0', {
}),
  setup.qres.NoUnitWithTitle('quest_harbinger_of_crows_1', {
}),
  setup.qres.NoUnitWithTitle('quest_harbinger_of_chaos_0', {
}),
  setup.qres.NoUnitWithTag('quest_harbinger_of_luck_tagged'),
],
500, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_heroic_lunatic [nobr event] {"position":"975,19600","size":"100,100"}
<<run new setup.Event(
'heroic_lunatic', /* key */
"Heroic Lunatic", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_heroic_lunatic',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.per_lunatic], true),
  ],
},
[ /* outcomes */
  setup.qc.Leave('slaver', "a|is trying to fulfill a|their dream of becoming a hero... or just being stark ravingly mad", undefined),
  setup.qc.Event('grand_lunacy', 4, {
lunatic: "slaver",
}, true),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.veteranhall),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_hoisted_by_ninjas [nobr event] {"position":"225,15975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'hoisted_by_ninjas', /* key */
"Hoisted by Ninjas", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_hoisted_by_ninjas',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humansea', -20),
setup.qc.MissingUnitRecapture('victim', 'capturedhard'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humansea', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_hospital_visit [nobr event] {"position":"725,14350","size":"100,100"}
<<run new setup.Event(
'hospital_visit', /* key */
"Hospital Visit", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'fort',
  'special',
  'unknown',
],
'Event_hospital_visit',
{ /* roles (LEGACY) */
},
{ /* actors */
  'injured': [
    setup.qres.IsInjured(1),
    setup.qres.Job(setup.job.slaver),
    setup.qres.Not(setup.qres.YourLover()),
  ],
  'you': [
    setup.qres.You(),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('visiting_the_injured', {
covalescent: "injured",
you: "you",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.hospital),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_hospital_visit_lover [nobr event] {"position":"975,14350","size":"100,100"}
<<run new setup.Event(
'hospital_visit_lover', /* key */
"Hospital Visit (Lover)", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
  'fort',
  'special',
  'unknown',
],
'Event_hospital_visit_lover',
{ /* roles (LEGACY) */
},
{ /* actors */
  'injured': [
    setup.qres.IsInjured(1),
    setup.qres.Job(setup.job.slaver),
    setup.qres.YourLover(),
  ],
  'you': [
    setup.qres.You(),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('visiting_the_injured', {
covalescent: "injured",
you: "you",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.hospital),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_houndmaster_s_boon [nobr event] {"position":"1225,18475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'houndmaster_s_boon', /* key */
"Houndmaster\'s Boon", /* Title */
"darko", /* Author */
[ /* tags */
  'forest',
],
'Event_houndmaster_s_boon',
{ /* roles */
},
{ /* actors */
  'master': 'the_dog_whisperer0',
},
[ /* outcomes */
  setup.qc.VarRemove('houndmaster_pets_delivered'),
  setup.qc.Opportunity('houndmastery', null),
],
[ /* restrictions */
  setup.qres.VarEqual('houndmaster_pets_delivered', '2'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_huge_dicked_slave [nobr event] {"position":"1100,13100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'huge_dicked_slave', /* key */
"Huge Dicked Slave", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_huge_dicked_slave',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.Trait(setup.trait.training_obedience_basic),
    setup.qres.IsCanPhysicallyCum(),
    setup.qres.Trait(setup.trait.dick_huge),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_huge_tits [nobr event] {"position":"100,13225","size":"100,100"}
<<run new setup.Event(
'huge_tits', /* key */
"Huge Tits", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_huge_tits',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.breast_huge, setup.trait.breast_titanic], true),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_hunting_party [nobr event] {"position":"475,15350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'hunting_party', /* key */
"Hunting Party", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_hunting_party',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('werewolf', -20),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('werewolf', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_if_you_like_it [nobr event] {"position":"350,13225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'if_you_like_it', /* key */
"If You Like It", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_if_you_like_it',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Owner(setup.qres.And([
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
setup.qres.NoTraits([setup.trait.per_submissive], true)
])),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_illegal_masturbation [nobr event] {"position":"600,13225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'illegal_masturbation', /* key */
"Illegal Masturbation", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_illegal_masturbation',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_obedience_basic, setup.trait.training_obedience_advanced, setup.trait.training_none], true),
    setup.qres.Not(setup.qres.IsCanOrgasm()),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_in_debt [nobr event] {"position":"725,18600","size":"100,100"}
<<run new setup.Event(
'in_debt', /* key */
"In Debt", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_in_debt',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Event('loan_tiger_payment_due', 53, null, true),
  setup.qc.SetCooldownEvent('loan_tiger_payment_due2', 27),
],
[ /* restrictions */
  setup.qres.VarNull('tiger_bank_loan'),
  setup.qres.HaveMetCompany('bank'),
  setup.qres.MoneyAtMost(-1),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_innocent_tourist [nobr event] {"position":"850,13225","size":"100,100"}
<<run new setup.UnitGroup(
"innocent_tourist1",
"Tourist",
'subrace_humankingdom', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_merchant),
  setup.qc.TraitReplace('unit', setup.trait.per_chaste),
  setup.qc.TraitReplaceExisting('unit', setup.trait.vagina_tight),
  setup.qc.TraitReplaceExisting('unit', setup.trait.anus_tight),
  setup.qc.TraitReplaceExisting('unit', setup.trait.breast_huge),
  setup.qc.TraitReplaceExisting('unit', setup.trait.dick_huge),
],
)>>

<<run new setup.Event(
'innocent_tourist', /* key */
"Innocent Tourist", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_innocent_tourist',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.OnDuty('entertainmentslave'),
    setup.qres.Home(),
  ],
  'slave2': [
    setup.qres.Job(setup.job.slave),
    setup.qres.OnDuty('oralfuckholeslave'),
  ],
  'pimp': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.OnDuty('entertainmentpimp'),
  ],
  'tourist': 'innocent_tourist1',
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_investigate_the_earth [nobr event] {"position":"1225,16100","size":"100,100"}
<<run new setup.Event(
'investigate_the_earth', /* key */
"Investigate the Earth", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'unknown',
],
'Event_investigate_the_earth',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.QuestDirect('investigate_the_earth', null),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.lorebook_deep),
  setup.qres.Building(setup.buildingtemplate.library),
  setup.qres.NoQuest('investigate_the_earth'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_ire_of_the_dark_dragon_lord [nobr event] {"position":"225,14975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'ire_of_the_dark_dragon_lord', /* key */
"Ire of the Dark Dragon Lord", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_ire_of_the_dark_dragon_lord',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('dragonkin', -20),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('dragonkin', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_job_change [nobr event] {"position":"725,17350","size":"100,100"}
<<run new setup.Event(
'job_change', /* key */
"Job Change", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_job_change',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.Opportunity('job_change', {
head: "head",
owner: "owner",
slave: "slave",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_just_coincidence [nobr event] {"position":"1225,18350","size":"100,100"}
<<run new setup.Event(
'just_coincidence', /* key */
"Just Coincidence", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_just_coincidence',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTag('quest_harbinger_of_luck_tagged'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_harbinger_of_luck_progress', '2', -1),
  setup.qc.SetCooldownEvent('curse_of_misfortune', 8),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_harbinger_of_luck_progress', '1'),
],
0, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_knight_of_honor [nobr event] {"position":"475,15975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'knight_of_honor', /* key */
"Knight of Honor", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_knight_of_honor',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.NotYou(),
],
},
{ /* actors */
'knight': 'all', },
[ /* outcomes */
setup.qc.Ire('royal', -20),
setup.qc.MissingUnitRecapture('victim', 'capturedhard'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('royal', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_kobold_ [nobr event] {"position":"975,18850","size":"100,100"}
<<run new setup.Event(
'kobold_', /* key */
"Kobold?", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'deep',
  'unknown',
],
'Event_kobold_',
{ /* roles (LEGACY) */
},
{ /* actors */
  'kobold': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_the_shunned_kobold_0'),
    setup.qres.AllTraits([setup.trait.subrace_kobold, setup.trait.wings_dragonkin], true),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('kobold_', null),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_shunned_kobold_progress', '35'),
  setup.qres.HaveMetCompany('dragonkin'),
  setup.qres.NoQuest('kobold_'),
],
100, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_kobold_advice [nobr event] {"position":"1225,18850","size":"100,100"}
<<run new setup.Event(
'kobold_advice', /* key */
"Kobold Advice", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'trait',
],
'Event_kobold_advice',
{ /* roles (LEGACY) */
},
{ /* actors */
  'kobold': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_the_shunned_kobold_0'),
    setup.qres.AllTraits([setup.trait.subrace_kobold, setup.trait.wings_dragonkin], true),
    setup.qres.Home(),
    setup.qres.NotInjured(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_shunned_kobold_progress', '15', -1),
  setup.qc.OneRandomSeed([
setup.qc.Opportunity('kobold_approach', {
kobold: "kobold",
}),
setup.qc.Opportunity('kobold_learning', {
kobold: "kobold",
})
]),
  setup.qc.SetCooldownEvent('kobold_growth', 8),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_shunned_kobold_progress', '5'),
],
0, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_kobold_advice_2 [nobr event] {"position":"225,18975","size":"100,100"}
<<run new setup.Event(
'kobold_advice_2', /* key */
"Kobold Advice 2", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'trait',
],
'Event_kobold_advice_2',
{ /* roles (LEGACY) */
},
{ /* actors */
  'kobold': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_the_shunned_kobold_0'),
    setup.qres.AllTraits([setup.trait.subrace_kobold, setup.trait.wings_dragonkin], true),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_shunned_kobold_progress', '25', -1),
  setup.qc.SetCooldownEvent('kobold_magic', 8),
  setup.qc.OneRandomSeed([
setup.qc.Opportunity('kobold_money', {
kobold: "kobold",
}),
setup.qc.Opportunity('kobold_friends', {
kobold: "kobold",
})
]),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_shunned_kobold_progress', '20'),
],
0, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_kobold_advice_3 [nobr event] {"position":"475,18975","size":"100,100"}
<<run new setup.Event(
'kobold_advice_3', /* key */
"Kobold Advice 3", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'trait',
],
'Event_kobold_advice_3',
{ /* roles (LEGACY) */
},
{ /* actors */
  'kobold': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_the_shunned_kobold_0'),
    setup.qres.AllTraits([setup.trait.subrace_kobold, setup.trait.wings_dragonkin], true),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_shunned_kobold_progress', '35', -1),
  setup.qc.SetCooldownEvent('kobold_', 8),
  setup.qc.OneRandomSeed([
setup.qc.Opportunity('kobold_hoard', {
kobold: "kobold",
}),
setup.qc.Opportunity('kobold_goals', {
kobold: "kobold",
})
]),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_shunned_kobold_progress', '30'),
],
0, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_kobold_growth [nobr event] {"position":"725,18975","size":"100,100"}
<<run new setup.Event(
'kobold_growth', /* key */
"Kobold Growth", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'trait',
],
'Event_kobold_growth',
{ /* roles (LEGACY) */
},
{ /* actors */
  'kobold': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_the_shunned_kobold_0'),
    setup.qres.AllTraits([setup.trait.subrace_kobold, setup.trait.wings_dragonkin], true),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_shunned_kobold_progress', '20', -1),
  setup.qc.SetCooldownEvent('kobold_advice_2', 8),
  setup.qc.TraitRemove('kobold', setup.trait.height_dwarf),
  setup.qc.TraitRemove('kobold', setup.trait.height_short),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_shunned_kobold_progress', '15'),
],
0, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_kobold_magic [nobr event] {"position":"975,18975","size":"100,100"}
<<run new setup.Event(
'kobold_magic', /* key */
"Kobold Magic", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'trait',
],
'Event_kobold_magic',
{ /* roles (LEGACY) */
},
{ /* actors */
  'kobold': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_the_shunned_kobold_0'),
    setup.qres.AllTraits([setup.trait.subrace_kobold, setup.trait.wings_dragonkin], true),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_shunned_kobold_progress', '30', -1),
  setup.qc.SetCooldownEvent('kobold_advice_3', 8),
  setup.qc.OneRandomSeed([
setup.qc.Trait('kobold', setup.trait.magic_fire_master),
setup.qc.Trait('kobold', setup.trait.magic_light_master)
]),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_shunned_kobold_progress', '25'),
],
0, /* Cooldown */
setup.rarity.uncommon, /* Rarity */
)>>


:: EventSetup_library_inauguration [nobr event] {"position":"225,16225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'library_inauguration', /* key */
"Library Inauguration", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
],
'Event_library_inauguration',
{ /* roles */
  'slaver1': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
  ],
  'slaver2': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
  ],
  'slaver3': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
  ],
  'slaver4': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
  ],
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
  ],
  'gender': 'subrace_humanvale',
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_sixtynine),
  setup.qc.SlaverMarker('gender'),
],
[ /* restrictions */
  setup.qres.NoItem(setup.item.sexmanual_sixtynine),
  setup.qres.Building(setup.buildingtemplate.library),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_lies_and_slander [nobr event] {"position":"475,15475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'lies_and_slander', /* key */
"Lies and Slander", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_lies_and_slander',
{ /* roles */
'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humankingdom', -20),
setup.qc.IreSpread('humankingdom'),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humankingdom', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_like_me [nobr event] {"position":"1100,13225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'like_me', /* key */
"Like Me", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_like_me',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_none, setup.trait.training_obedience_basic], true),
    setup.qres.FriendshipWithYouAtMost(-200),
    setup.qres.BedchamberOtherSlave(setup.qres.And([
setup.qres.Available(),
setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true)
])),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_living_god [nobr event] {"position":"1225,19600","size":"100,100"}
<<run new setup.Event(
'living_god', /* key */
"Living God", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'money',
],
'Event_living_god',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.join_senior, setup.trait.bg_mythical], true),
  ],
},
[ /* outcomes */
  setup.qc.AddTitle('slaver', 'quest_living_god'),
  setup.qc.QuestDirect('living_god', {}),
  setup.qc.VarSet('quest_living_god_active', '1', -1),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.market),
  setup.qres.NoUnitWithTitle('quest_living_god', {
}),
  setup.qres.VarNull('quest_living_god_active'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_living_god_s_end [nobr event] {"position":"225,19725","size":"100,100"}
<<run new setup.Event(
'living_god_s_end', /* key */
"Living God\'s End", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_living_god_s_end',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarRemove('quest_living_god_active'),
  setup.qc.VarRemove('quest_living_god_isfavor'),
  setup.qc.MoneyCustom(1000),
  setup.qc.RemoveDuty('questlivinggod'),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_living_god_active', '1'),
  setup.qres.NoUnitWithTitle('quest_living_god', {
}),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_lizardkins_at_your_doorstep [nobr event] {"position":"225,15725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'lizardkins_at_your_doorstep', /* key */
"Lizardkin at Your Doorstep", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_lizardkins_at_your_doorstep',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('lizardkin', -20),
setup.qc.QuestDirect('lizardkins_at_your_doorstep'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('lizardkin', 20),
setup.qres.Building('veteranhall'),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_loan_tiger [nobr event] {"position":"975,18600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.UnitGroup(
'quest_event_loan_tiger1',
"Loan Tiger Agent",
'subrace_neko', /* pools */
1, /* reuse chance */
[
setup.qc.BgTraitReset('unit', setup.trait.bg_clerk),
setup.qc.TraitReplace('unit', setup.trait.per_frugal), ],
)>>

<<run new setup.Event(
'loan_tiger', /* key */
"Loan Tiger", /* Title */
"darko", /* Author */
[ 'special',
], /* tags */
'Event_loan_tiger',
{ /* roles */
'you': [
setup.qres.You(),
],
},
{ /* actors */
'tiger': 'quest_event_loan_tiger1', },
[ /* outcomes */
setup.qc.SlaverMarker('tiger'),
setup.qc.Favor('bank', 100),
setup.qc.Opportunity('loan_tiger'),
],
[ /* restrictions to generate */
],
1,
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_loan_tiger__payment [nobr event] {"position":"1225,18600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'loan_tiger__payment', /* key */
"Loan Tiger: Payment", /* Title */
"darko", /* Author */
[ 'special',
], /* tags */
'Event_loan_tiger__payment',
{ /* roles */
},
{ /* actors */
'tiger': 'quest_event_loan_tiger1', },
[ /* outcomes */
setup.qc.SlaverMarker('tiger'),
setup.qc.Money(-15000), ],
[ /* restrictions to generate */
],
1,
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_loan_tiger_payment_due [nobr event] {"position":"225,18725","size":"100,100"}
<<run new setup.Event(
'loan_tiger_payment_due', /* key */
"Loan Tiger: Payment Due", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_loan_tiger_payment_due',
{ /* roles (LEGACY) */
},
{ /* actors */
  'neko': 'subrace_neko',
},
[ /* outcomes */
  setup.qc.IfThenElse(
setup.qres.Function(() => {
  return State.variables.company.player.getMoney() >= State.variables.varstore.get('tiger_bank_loan');
}),
setup.qc.DoAll([
setup.qc.Function((quest) => {
  setup.qc.Money(-State.variables.varstore.get('tiger_bank_loan')).apply(quest);
}),
setup.qc.VarRemove('tiger_bank_loan'),
setup.qc.IfThenElse(
setup.qres.VarNull('tiger_bank_loan_extension'),
setup.qc.DoAll([
setup.qc.Favor('bank', 100)
], undefined),
setup.qc.DoAll([

], undefined)),
setup.qc.VarRemove('tiger_bank_loan_extension')
], undefined),
setup.qc.DoAll([
setup.qc.VarAdd('tiger_bank_loan', 10000, -1),
setup.qc.VarSet('tiger_bank_loan_extension', '1', -1),
setup.qc.Ire('bank', 5),
setup.qc.Event('loan_tiger_payment_due', 53, null, true)
], undefined)),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_loan_tiger_payment_due2 [nobr event] {"position":"475,18725","size":"100,100"}
<<run new setup.UnitGroup(
"loan_tiger_payment_due0",
"Neko Swindler",
'subrace_neko', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_thief),
  setup.qc.TraitsReplace('unit', [setup.trait.per_evil, setup.trait.per_sly]),
],
)>>

<<run new setup.Event(
'loan_tiger_payment_due2', /* key */
"Loan Tiger: Payment Due", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_loan_tiger_payment_due2',
{ /* roles (LEGACY) */
},
{ /* actors */
  'neko': 'loan_tiger_payment_due0',
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.VarGte('tiger_bank_loan', 1),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_loose_buttslut [nobr event] {"position":"350,13350","size":"100,100"}
<<run new setup.Event(
'loose_buttslut', /* key */
"Loose Buttslut", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_loose_buttslut',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_anal_advanced, setup.trait.training_anal_master], true),
    setup.qres.AllTraits([setup.trait.anus_gape], true),
    setup.qres.SlaveBedchamberHasFurniture(setup.item.f_object_master_fuckmachine),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_lost_flame [nobr event] {"position":"975,20475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'lost_flame', /* key */
"Lost Flame", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_lost_flame',
{ /* roles */
},
{ /* actors */
  'you': [
    setup.qres.You(),
  ],
  'lover': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.YourLover(),
    setup.qres.FriendshipWithYouAtMost(setup.LOVERS_BREAKUP_FRIENDSHIP - 1),
  ],
},
[ /* outcomes */
  setup.qc.BreakupWithYou('lover'),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_lost_hound [nobr event] {"position":"225,18600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'lost_hound', /* key */
"Lost Hound", /* Title */
"darko", /* Author */
[ /* tags */
  'forest',
],
'Event_lost_hound',
{ /* roles */
},
{ /* actors */
  'master': 'the_dog_whisperer0',
},
[ /* outcomes */
  setup.qc.VarRemove('houndmastery_sniffer_lent'),
  setup.qc.RemoveTitleGlobal('quest_houndmaster_s_sniffer_0'),
  setup.qc.Ire('neko', 20),
  setup.qc.Ire('elf', 20),
  setup.qc.Ire('werewolf', 20),
  setup.qc.Ire('lizardkin', 20),
  setup.qc.Ire('dragonkin', 20),
  setup.qc.Ire('orc', 20),
  setup.qc.Ire('outlaws', 20),
  setup.qc.Ire('humansea', 20),
  setup.qc.Ire('humandesert', 20),
],
[ /* restrictions */
  setup.qres.VarEqual('houndmastery_sniffer_lent', '1'),
  setup.qres.NotExistUnit([
setup.qres.HasTitle('quest_houndmaster_s_sniffer_0'),
setup.qres.Job(setup.job.slave),
setup.qres.NoTrait(setup.trait.training_mindbreak),
setup.qres.AllTraits([setup.trait.arms_neko, setup.trait.legs_neko, setup.trait.mouth_neko, setup.trait.body_neko, setup.trait.ears_neko, setup.trait.tail_neko], true)
]),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_loving_lover [nobr event] {"position":"600,13350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'loving_lover', /* key */
"Loving Lover", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_loving_lover',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.YourLover(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_luck_chaser [nobr event] {"position":"225,18475","size":"100,100"}
<<run new setup.Event(
'luck_chaser', /* key */
"Luck Chaser", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_luck_chaser',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_harbinger_of_misfortune_0'),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('luck_chaser', {a: 'a'}),
  setup.qc.SetCooldownEvent(null, 100),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_harbinger_of_luck_progress', '3'),
  setup.qres.VarLte('quest_harbinger_of_luck_done', 2),
  setup.qres.NoOpportunity('luck_chaser'),
  setup.qres.NoQuest('seven_petal_baths'),
  setup.qres.NoQuest('lucky_horseshoe'),
  setup.qres.NoQuest('clover_witch'),
  setup.qres.NoQuest('blessings_of_the_south'),
  setup.qres.NoQuest('luckiest_person_on_mestia'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_magic_bondage_room [nobr event] {"position":"975,17350","size":"100,100"}
<<run new setup.Event(
'magic_bondage_room', /* key */
"Magic Bondage Room", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_magic_bondage_room',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
  setup.qres.VarEqual('quest_brothel_attraction', 'bondage'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_magic_gravity_room [nobr event] {"position":"1225,17350","size":"100,100"}
<<run new setup.Event(
'magic_gravity_room', /* key */
"Magic Gravity Room", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_magic_gravity_room',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
  setup.qres.VarEqual('quest_brothel_attraction', 'gravity'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_magical_candlestick [nobr event] {"position":"475,19725","size":"100,100"}
<<run new setup.Event(
'magical_candlestick', /* key */
"Magical Candlestick", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_magical_candlestick',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.join_senior], true),
    setup.qres.AnyTrait([setup.trait.bg_mystic, setup.trait.bg_apprentice]),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Available(),
    setup.qres.AnyTrait([setup.trait.magic_fire, setup.trait.magic_fire_master, setup.trait.magic_water, setup.trait.magic_water_master, setup.trait.magic_wind, setup.trait.magic_wind_master, setup.trait.magic_earth, setup.trait.magic_earth_master, setup.trait.magic_light, setup.trait.magic_light_master, setup.trait.magic_dark, setup.trait.magic_dark_master], true),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.f_lighting_good_slaver),
  setup.qc.BoonizeRandom('slaver', 5),
  setup.qc.Injury('slave', 5),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.bedchamberwing),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_man_woman_of_the_sea [nobr event] {"position":"725,19725","size":"100,100"}
<<run new setup.Event(
'man_woman_of_the_sea', /* key */
"Man/Woman of the Sea", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'sea',
],
'Event_man_woman_of_the_sea',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_pirate, setup.trait.bg_seaman], true),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('man_woman_of_the_sea', {
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.scoutharbor),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_manual_labor [nobr event] {"position":"975,19725","size":"100,100"}
<<run new setup.Event(
'manual_labor', /* key */
"Manual Labor", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_manual_labor',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_laborer], true),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.NotBusy(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.bath),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_masochist_slaver [nobr event] {"position":"1225,19725","size":"100,100"}
<<run new setup.Event(
'masochist_slaver', /* key */
"Masochist Slaver", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
  'gore',
],
'Event_masochist_slaver',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.per_masochistic], true),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
  ],
  'other': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NoTraits([setup.trait.per_masochistic], true),
  ],
},
[ /* outcomes */
  setup.qc.Injury('slaver', 2),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.hospital),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_meek_slaver [nobr event] {"position":"225,19850","size":"100,100"}
<<run new setup.Event(
'meek_slaver', /* key */
"Meek Slaver", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_meek_slaver',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_unemployed, setup.trait.bg_slave], true),
    setup.qres.NoTraits([setup.trait.per_dominant], true),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
  ],
  'other': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_midwork_confession [nobr event] {"position":"850,13350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'midwork_confession', /* key */
"Midwork Confession", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_midwork_confession',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.YourLover(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_mindbroken_morning [nobr event] {"position":"1100,13350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'mindbroken_morning', /* key */
"Mindbroken Morning", /* Title */
{ /* Author */
  name: "Anon (Free Cities)",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_mindbroken_morning',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.Trait(setup.trait.training_mindbreak),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_missing_doppelganged [nobr event] {"position":"225,17725","size":"100,100"}
<<run new setup.Event(
'missing_doppelganged', /* key */
"Missing Doppelganged", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_missing_pair',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.AllUnitSatisfyDo([setup.qres.HasTitle('quest_doppelganger')],
[setup.qc.RemovePerkChoice('unit', 'perk_doppelganger'), setup.qc.RemoveTitle('unit', 'quest_doppelganger')],
),
  setup.qc.ContactLose(setup.contacttemplate.quest_doppelganger),
  setup.qc.VarRemove('quest_doppelganger_progress'),
],
[ /* restrictions */
  setup.qres.HasUnitWithTitle('quest_doppelganger', {
}),
  setup.qres.NoUnitWithTitle('quest_doppelganged', {
}),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_missing_doppelganger [nobr event] {"position":"475,17725","size":"100,100"}
<<run new setup.Event(
'missing_doppelganger', /* key */
"Missing Doppelganger", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_missing_doppelganger',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.AllUnitSatisfyDo([setup.qres.HasTitle('quest_doppelganged')],
[setup.qc.RemovePerkChoice('unit', 'perk_doppelganged'), setup.qc.RemoveTitle('unit', 'quest_doppelganged')],
),
  setup.qc.VarRemove('quest_doppelganger_progress'),
],
[ /* restrictions */
  setup.qres.HasUnitWithTitle('quest_doppelganged', {
}),
  setup.qres.NoUnitWithTitle('quest_doppelganger', {
}),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_missing_sword [nobr event] {"position":"1225,17850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'excalibur_missing_sword', /* key */
"Missing Sword", /* Title */
"darko", /* Author */
[ 'veteran',
], /* tags */
'Event_missing_sword',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.VarSet('quest_excalibur', '2', -1),
],
[ /* restrictions to generate */
setup.qres.VarEqual('quest_excalibur', '1'),
setup.qres.Building(setup.buildingtemplate.veteranhall),
],
0,  /* cooldown */
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_mist_apprentice_final_payment [nobr event] {"position":"725,18725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'mist_apprentice_final_payment', /* key */
"Mist Apprentice: Final Payment", /* Title */
"darko", /* Author */
[ /* tags */
  'desert',
  'unknown',
  'trait',
],
'Event_mist_apprentice_final_payment',
{ /* roles (LEGACY) */
},
{ /* actors */
  'master': 'mist_apprenticeship0',
  'slaver': [
    setup.qres.HasTitle('quest_mist_apprentice_0'),
    setup.qres.HomeExceptOnLeave(),
  ],
},
[ /* outcomes */
  setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.Trait(setup.trait.join_senior)),
setup.qc.DoAll([
setup.qc.Opportunity('consumed_by_darkness', {
master: "master",
slaver: "slaver",
})
], undefined),
setup.qc.DoAll([
setup.qc.QuestDirect('to_master_the_dark', {
master: "master",
slaver: "slaver",
})
], undefined)),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_mist_apprentice_first_payment [nobr event] {"position":"975,18725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'mist_apprentice_first_payment', /* key */
"Mist Apprentice: First Payment", /* Title */
"darko", /* Author */
[ /* tags */
  'desert',
  'trait',
],
'Event_mist_apprentice_first_payment',
{ /* roles (LEGACY) */
},
{ /* actors */
  'master': 'mist_apprenticeship0',
  'slaver': [
    setup.qres.HasTitle('quest_mist_apprentice_0'),
    setup.qres.HomeExceptOnLeave(),
  ],
},
[ /* outcomes */
  setup.qc.OneRandomSeed([
setup.qc.QuestDirect('mist_apprentice_payment_the_first', {
master: "master",
slaver: "slaver",
}),
setup.qc.QuestDirect('mist_apprentice_payment_the_first2', {
master: "master",
slaver: "slaver",
})
]),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_mist_apprentice_second_payment [nobr event] {"position":"1225,18725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'mist_apprentice_second_payment', /* key */
"Mist Apprentice: Second Payment", /* Title */
"darko", /* Author */
[ /* tags */
  'desert',
  'trait',
],
'Event_mist_apprentice_second_payment',
{ /* roles (LEGACY) */
},
{ /* actors */
  'master': 'mist_apprenticeship0',
  'slaver': [
    setup.qres.HasTitle('quest_mist_apprentice_0'),
    setup.qres.HomeExceptOnLeave(),
  ],
},
[ /* outcomes */
  setup.qc.OneRandomSeed([
setup.qc.QuestDirect('mist_apprentice_payment_the_second', {
master: "master",
slaver: "slaver",
}),
setup.qc.QuestDirect('mist_apprentice_payment_the_second2', {
master: "master",
slaver: "slaver",
})
]),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_mist_vacation [nobr event] {"position":"475,19850","size":"100,100"}
<<run new setup.Event(
'mist_vacation', /* key */
"Mist Vacation", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'desert',
],
'Event_mist_vacation',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_mist], true),
    setup.qres.AllTraits([setup.trait.join_senior], true),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('mist_vacation', null),
  setup.qc.RemoveTagGlobal('mist_guide_slaver'),
  setup.qc.AddTag('slaver', 'mist_guide_slaver'),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.veteranhall),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_more_whore_for_your_brothel [nobr event] {"position":"725,17100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'more_whore_for_your_brothel', /* key */
"More Whore for Your Brothel", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_more_whore_for_your_brothel',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.SlaveOrderMoreWhoreForYourBrothel(),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '60'),
],
53, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_morphing_cage [nobr event] {"position":"725,19850","size":"100,100"}
<<run new setup.Event(
'morphing_cage', /* key */
"Morphing Cage", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_morphing_cage',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.SlaveBedchamberHasFurniture(setup.item.f_slavebed_master),
    setup.qres.NoTraits([setup.trait.training_mindbreak], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_muscle_slave [nobr event] {"position":"100,13475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'muscle_slave', /* key */
"Muscle Slave", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_muscle_slave',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.Trait(setup.trait.muscle_verystrong),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.gym),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_nearby_violations [nobr event] {"position":"725,17725","size":"100,100"}
<<run new setup.UnitGroup(
"nearby_violations0",
"Victim",
'subrace_humanvale', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.TraitReplaceExisting('unit', setup.trait.vagina_gape),
  setup.qc.TraitReplaceExisting('unit', setup.trait.anus_gape),
],
)>>

<<run new setup.Event(
'nearby_violations', /* key */
"Nearby Violations", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_nearby_violations',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_doppelganged'),
    setup.qres.Available(),
  ],
  'violated': 'nearby_violations0',
  'dop': setup.contacttemplate.quest_doppelganger,
},
[ /* outcomes */
  setup.qc.Ire('humanvale', 2),
  setup.qc.QuestDirect('nearby_violations', {
dop: "dop",
slaver: "slaver",
violated: "violated",
}),
  setup.qc.SetCooldownEvent(null, 30),
],
[ /* restrictions */
  setup.qres.NoQuest('nearby_violations'),
  setup.qres.NoOpportunity('nearby_violations'),
  setup.qres.VarEqual('quest_doppelganger_progress', '4'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_nectar_of_the_gods [nobr event] {"position":"475,16350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'nectar_of_the_gods', /* key */
"Nectar of the Gods", /* Title */
"darko", /* Author */
[ /* tags */
  'veteran',
  'sea',
  'item',
],
'Event_nectar_of_the_gods',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_bewitchment_alternative', '1', -1),
],
[ /* restrictions */
  setup.qres.VarNull('quest_bewitchment_alternative'),
  setup.qres.VarGte('quest_bewitchment_progress', 2),
  setup.qres.QuestDone('finding_fairy'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_night_visit [nobr event] {"position":"350,13475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'night_visit', /* key */
"Night Visit", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_night_visit',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.IsCanTalk(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_nightmares [nobr event] {"position":"975,15975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'nightmares', /* key */
"Nightmares", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_nightmares',
{ /* roles */
'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('demon', -20),
setup.qc.TraumatizeRandomSlaverHome(),
setup.qc.TraumatizeRandomSlaverHome(),
setup.qc.TraumatizeRandomSlaverHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('demon', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_noble_pardon [nobr event] {"position":"975,19850","size":"100,100"}
<<run new setup.Event(
'noble_pardon', /* key */
"Noble Pardon", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_noble_pardon',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_royal, setup.trait.bg_noble], true),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('noble_pardon', {
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.moraleoffice),
  setup.qres.Or([
setup.qres.IreAtLeast('humankingdom', 10),
setup.qres.IreAtLeast('humanvale', 10),
setup.qres.IreAtLeast('humansea', 10),
setup.qres.IreAtLeast('elf', 10),
setup.qres.IreAtLeast('neko', 10)
]),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_nympho [nobr event] {"position":"600,13475","size":"100,100"}
<<run new setup.Event(
'nympho', /* key */
"Nympho", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_nympho',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
    setup.qres.AllTraits([setup.trait.per_sexaddict], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_open_for_visitors [nobr event] {"position":"475,16225","size":"100,100"}
<<run new setup.Event(
'open_for_visitors', /* key */
"Open for Visitors", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_open_for_visitors',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Favor('humanvale', 50),
  setup.qc.Favor('humankingdom', 50),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_orc_hospitality [nobr event] {"position":"725,15350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'orc_hospitality', /* key */
"Orc Hospitality", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_orc_hospitality',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('orc', -20),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('orc', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_orc_invasion [nobr event] {"position":"475,15725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'orc_invasion', /* key */
"Orc Invasion", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_orc_invasion',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('orc', -20),
setup.qc.QuestDirect('orc_invasion'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('orc', 20),
setup.qres.Building('veteranhall'),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_out_of_character [nobr event] {"position":"975,17725","size":"100,100"}
<<run new setup.Event(
'out_of_character', /* key */
"Out of Character", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_out_of_character',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.HasTag('quest_doppelganged'),
  ],
  'you': [
    setup.qres.You(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_doppelganger_progress', '2', -1),
  setup.qc.SetCooldownEvent('room_mate', 5),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_doppelganger_progress', '1'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_outlaw_raid [nobr event] {"position":"225,14225","size":"100,100"}
<<run new setup.Event(
'outlaw_raid', /* key */
"Outlaw Raid", /* Title */
{ /* Author */
  name: "Matthew Lang",
  url: "https://www.matthew-lang.com",
},
[ /* tags */
],
'Event_outlaw_raid',
{ /* roles (LEGACY) */
},
{ /* actors */
  'lostslave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.ZeroTitle(),
  ],
},
[ /* outcomes */
  setup.qc.MissingUnit('lostslave'),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_painting_of_your_company [nobr event] {"position":"1225,19850","size":"100,100"}
<<run new setup.Event(
'painting_of_your_company', /* key */
"Painting of Your Company", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_painting_of_your_company',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_artist, setup.trait.join_senior], true),
  ],
  'slaver2': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NoTraits([setup.trait.join_junior], true),
  ],
  'slaver3': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NoTraits([setup.trait.join_junior], true),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.f_wall_good_slaver),
  setup.qc.BoonizeRandom('slaver', 5),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.museum),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_pants_of_competence [nobr event] {"position":"225,17475","size":"100,100"}
<<run new setup.Event(
'pants_of_competence', /* key */
"Pants of Competence", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_pants_of_competence',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.Opportunity('pants_of_competence', {
owner: "owner",
head: "head",
slave: "slave",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_paradoxical_slaver [nobr event] {"position":"850,18475","size":"100,100"}
<<run new setup.Event(
'paradoxical_slaver', /* key */
"Paradoxical Slaver", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_paradoxical_slaver',
{ /* roles (LEGACY) */
},
{ /* actors */
  'a': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.AllTraits([setup.trait.perk_harbinger_of_chaos], true),
    setup.qres.Available(),
    setup.qres.Home(),
  ],
  'you': [
    setup.qres.You(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('quest_harbinger_of_crows_radiant', '1', 250),
  setup.qc.Blessing('a', 1, null, true),
],
[ /* restrictions */
  setup.qres.VarNull('quest_harbinger_of_crows_radiant'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_paws_from_the_past [nobr event] {"position":"475,14475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Title(
"quest_living_pawst_0", /* key */
"Living Pawst", /* name */
"A certain letter has asked you to attempt to restore this slave's mind", /* description */
"a|have been requested by a certain letter to be cured of a|their mindbroken-ness", /* unit text */
0, /* slave value */
{ /* skill additives */
},
)
>>

<<run new setup.Event(
'paws_from_the_past', /* key */
"Paws from the Past", /* Title */
{ /* Author */
  name: "Milk Maid Sona",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_paws_from_the_past',
{ /* roles (LEGACY) */
},
{ /* actors */
  'neko': [
    setup.qres.Job(setup.job.slave),
    setup.qres.HasTag('quest_neko_statue_marker'),
    setup.qres.AllTraits([setup.trait.training_mindbreak], true),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('paws_from_the_past', {
neko: "neko",
}),
],
[ /* restrictions */
  setup.qres.NoOpportunity('paws_from_the_past'),
  setup.qres.NoUnitWithTitle('quest_living_pawst_0', {
}),
  setup.qres.Building(setup.buildingtemplate.veteranhall),
],
0, /* Cooldown */
setup.rarity.common, /* Rarity */
)>>


:: EventSetup_peasant_uprising [nobr event] {"position":"725,15850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'peasant_uprising', /* key */
"Peasant Uprising", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_peasant_uprising',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.NotYou(),
],

'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humanvale', -20),
setup.qc.MissingUnit('victim'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humanvale', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_permitted_masturbation [nobr event] {"position":"850,13475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'permitted_masturbation', /* key */
"Permitted Masturbation", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_permitted_masturbation',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.IsCanOrgasm(),
    setup.qres.Trait(setup.trait.per_lustful),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_pilgrim_visit [nobr event] {"position":"225,19975","size":"100,100"}
<<run new setup.Event(
'pilgrim_visit', /* key */
"Pilgrim Visit", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_pilgrim_visit',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'pilgrim': 'subrace_humansea',
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.temple),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_pit_traps [nobr event] {"position":"975,15350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'pit_traps', /* key */
"Pit Traps", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_pit_traps',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('kobold', -20),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
setup.qc.InjureRandomSlaverHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('kobold', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_plug_disobedience [nobr event] {"position":"1100,13475","size":"100,100"}
<<run new setup.Event(
'plug_disobedience', /* key */
"Plug Disobedience", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_plug_disobedience',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.eq_plug_anus], true),
    setup.qres.AnyTrait([setup.trait.training_obedience_basic, setup.trait.training_none], true),
    setup.qres.NoTraits([setup.trait.anus_gape], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_pole_sex [nobr event] {"position":"100,13600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'pole_sex', /* key */
"Pole Sex", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_pole_sex',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.skill_entertain, setup.trait.bg_courtesan, setup.trait.bg_entertainer], true),
    setup.qres.SlaveBedchamberHasFurniture(setup.item.f_object_master_pole),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_priest_blessing [nobr event] {"position":"475,19975","size":"100,100"}
<<run new setup.Event(
'priest_blessing', /* key */
"Priest Blessing", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_priest_blessing',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_priest], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.temple),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_prison_break [nobr event] {"position":"225,14100","size":"100,100"}
<<run new setup.Event(
'prison_break', /* key */
"Prison Break", /* Title */
{ /* Author */
  name: "Fae",
  url: "",
},
[ /* tags */
],
'Event_prison_break',
{ /* roles (LEGACY) */
},
{ /* actors */
  'escapeeone': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Trait(setup.trait.training_none),
    setup.qres.Available(),
  ],
  'escapeetwo': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Trait(setup.trait.training_none),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
  setup.qc.Ire('kobold', -20),
  setup.qc.MissingUnitRecapture('escapeeone', 'escapemedium'),
  setup.qc.MissingUnit('escapeetwo'),
],
[ /* restrictions */
  setup.qres.IreAtLeast('kobold', 20),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_puppy_return [nobr event] {"position":"475,18600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'puppy_return', /* key */
"Puppy Return", /* Title */
"darko", /* Author */
[ /* tags */
  'forest',
],
'Event_puppy_return',
{ /* roles */
},
{ /* actors */
  'master': 'the_dog_whisperer0',
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.HasTitle('quest_houndmaster_s_sniffer_0'),
    setup.qres.AllTraits([setup.trait.ears_neko, setup.trait.mouth_neko, setup.trait.arms_neko, setup.trait.legs_neko, setup.trait.tail_neko, setup.trait.body_neko], true),
    setup.qres.NoTrait(setup.trait.training_mindbreak),
  ],
},
[ /* outcomes */
  setup.qc.VarRemove('houndmastery_sniffer_lent'),
  setup.qc.SetCooldownQuest('houndmastery', 25),
  setup.qc.MissingUnitForever('slave'),
],
[ /* restrictions */
  setup.qres.VarEqual('houndmastery_sniffer_lent', '1'),
  setup.qres.VarNull('houndmastery_sniffer_lent_deadline'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_raider_instincts [nobr event] {"position":"725,19975","size":"100,100"}
<<run new setup.UnitGroup(
"raider_instincts0",
"Vale Farmer",
'subrace_humanvale', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_farmer),
],
)>>

<<run new setup.Event(
'raider_instincts', /* key */
"Raider Instincts", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_raider_instincts',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_raider, setup.trait.bg_thug], true),
  ],
  'slave': 'raider_instincts0',
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.scouttower),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_renovation_feast [nobr event] {"position":"725,16225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'renovation_feast', /* key */
"Great Hall Built", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_renovation_feast',
{ /* roles */
'slaver1': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],

'slaver2': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],

'slaver3': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],

'slaver4': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_sit),
],
[ /* restrictions to generate */
  setup.qres.NoItem(setup.item.sexmanual_sit),
  setup.qres.Building('greathall'),
],
0,
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_retired_xxx [nobr event] {"position":"975,19975","size":"100,100"}
<<set _old_thres = 60>>
<<set _new_thres = 0.3>>
<<set _cooldown = 2 * setup.EVENT_DEFAULT_COOLDOWN>>
<<set _allcooldown = Math.round(0.5 * setup.EVENT_DEFAULT_COOLDOWN)>>

<<run new setup.Event(
'retired_fighter', /* key */
"Retired Fighter", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_fighter',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.combat, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.combat, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.traininggrounds),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_brawler', /* key */
"Retired Brawler", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_brawler',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.brawn, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.brawn, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.gym),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_scout', /* key */
"Retired Scout", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_scout',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.survival, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.survival, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.scouttower),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_thief', /* key */
"Retired Thief", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_thief',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.intrigue, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.intrigue, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.market),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_slaver', /* key */
"Retired Slaver", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_slaver',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.slaving, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.slaving, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.trainingchamber),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_scholar', /* key */
"Retired Scholar", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_scholar',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.knowledge, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.knowledge, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.library),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_trader', /* key */
"Retired Trader", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_trader',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.social, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.social, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.market),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_healer', /* key */
"Retired Healer", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_healer',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.aid, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.aid, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.hospital),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_wizard', /* key */
"Retired Wizard", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_wizard',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.arcane, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.arcane, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.library),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>

<<run new setup.Event(
'retired_whore', /* key */
"Retired Whore", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retired_whore',
{ /* roles (LEGACY) */
},
{ /* actors */
  'old': [
    setup.qres.Job(setup.job.retired),
    setup.qres.SkillAtLeast(setup.skill.sex, _old_thres),
  ],
  'new': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AllTraits([setup.trait.join_junior], true),
    setup.qres.SkillModifierAtLeast(setup.skill.sex, _new_thres),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('event_retired_training', '1', _allcooldown),
],
[ /* restrictions */
  setup.qres.VarNull('event_retired_training'),
  setup.qres.Building(setup.buildingtemplate.recreationwing),
],
_cooldown, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_retirement [nobr event] {"position":"1225,20475","size":"100,100"}
<<run new setup.Event(
'retirement', /* key */
"Retirement", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_retirement',
{ /* roles (LEGACY) */
},
{ /* actors */
},
[ /* outcomes */
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_return_shipping [nobr event] {"position":"225,18850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'return_shipping', /* key */
"Return Shipping", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
],
'Event_return_shipping',
{ /* roles (LEGACY) */
},
{ /* actors */
  'master': 'mist_apprenticeship0',
  'slaver': [
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.AllUnitSatisfyDo(
    [setup.qres.HasTag('mist_apprentice_victim')],
    [setup.qc.Injury('unit', 3), setup.qc.TraumatizeRandom('unit', 12), setup.qc.Return('unit')],
  ),
  setup.qc.Return('slaver'),
  setup.qc.Trait('slaver', setup.trait.per_sexaddict),
  setup.qc.Injury('slaver', 30),
  setup.qc.TraumatizeRandom('slaver', 90),
  setup.qc.SetCooldownQuest('mist_apprenticeship', 20),
  setup.qc.RemoveTitleGlobal('quest_mist_apprentice_0'),
  setup.qc.RemoveTagGlobal('mist_apprentice_victim'),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_revenge_of_the_drow [nobr event] {"position":"475,14975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'revenge_of_the_drow', /* key */
"Revenge of the Drow", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_revenge_of_the_drow',
{ /* roles */
},
{ /* actors */
  'drow': 'subrace_drow',
},
[ /* outcomes */
setup.qc.Ire('drow', -20),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('drow', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_revenge_of_the_elves [nobr event] {"position":"725,14975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'revenge_of_the_elves', /* key */
"Revenge of the Elves", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_revenge_of_the_elves',
{ /* roles */
},
{ /* actors */
  'elf': 'subrace_elf',
},
[ /* outcomes */
setup.qc.Ire('elf', -20),
/* elven corruption is slightly weaker, only 5 corruption vs 6 */
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
setup.qc.CorruptRandomUnitHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('elf', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_rioter_for_sale [nobr event] {"position":"350,13600","size":"100,100"}
<<run new setup.UnitGroup(
"rioter_for_sale1",
"Rioter",
'forest_all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.AddTraitsRandom('unit', [setup.trait.per_slow, setup.trait.per_stubborn, setup.trait.per_direct, setup.trait.per_brave], 2, true, false),
],
)>>

<<run new setup.Event(
'rioter_for_sale', /* key */
"Rioter for Sale", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
  'unit',
],
'Event_rioter_for_sale',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slave': 'rioter_for_sale1',
},
[ /* outcomes */
  setup.qc.VarSet('quest_tiger_bank_repo_resale', '1', 250),
  setup.qc.Slave('slave', "damaged the property of an influential citizen in the Neko Port City during a protest and got enslaved to pay off a|their debts", true, 0.8),
  setup.qc.TraitReplace('slave', setup.trait.face_attractive),
  setup.qc.IfThenElse(
setup.qres.Actor('slave', setup.qres.AllTraits([setup.trait.gender_male], true)),
setup.qc.DoAll([
setup.qc.TraitReplace('slave', setup.trait.muscle_strong)
], undefined),
setup.qc.DoAll([
setup.qc.TraitReplace('slave', setup.trait.muscle_thin)
], undefined)),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
  setup.qres.VarNull('quest_tiger_bank_repo_resale'),
  setup.qres.FavorAtLeast('bank', 300),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_rival_interaction [nobr event] {"position":"475,14100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'rival_interaction', /* key */
"Rival Interaction", /* Title */
"Kyiper", /* Author */
[ ], /* tags */
'Event_rival_interaction',
{ /* roles */
'you': [
setup.qres.You(),
setup.qres.Available(),
setup.qres.NoTraits([setup.trait.per_dominant], true),
],

'rival': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.FriendshipWithYouAtMost(-500),
setup.qres.NoTraits([setup.trait.per_submissive], true),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Opportunity('rival_interaction', {'rival': 'rival',}),
],
[ /* restrictions to generate */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.common,  /* Rarity */
)>>


:: EventSetup_rivals [nobr event] {"position":"1225,20100","size":"100,100"}
<<run new setup.Event(
'rivals', /* key */
"Rivals", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_rivals',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.BestFriendFriendshipAtMost(-500),
    setup.qres.RememberUnit(),
  ],
  'bf': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.BestFriendWithRememberedUnit(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.moraleoffice),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_robbery_bank [nobr event] {"position":"475,15600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'robbery_bank', /* key */
"Robbery Bank", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_robbery_bank',
{ /* roles */
'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.MoneyCustom(-10000),
setup.qc.Ire('bank', -20), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('bank', 20), ],
0,
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_romeo_and_slave [nobr event] {"position":"600,13600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'romeo_and_slave', /* key */
"Romeo and Slave", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_romeo_and_slave',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.IsCanBeSold(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
    setup.qres.OnDuty('entertainmentslave'),
  ],
  'blacksmith': setup.contacttemplate.blacksmithpeddler,
  'lumberjack': setup.contacttemplate.furniturepeddler,
  'tailor': setup.contacttemplate.tailorpeddler,
},
[ /* outcomes */
  setup.qc.Opportunity('romeo_and_slave', {
    you: "you",
    slave: "slave",
    blacksmith: 'blacksmith',
    tailor: 'tailor',
    lumberjack: 'lumberjack',
  }),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.veteranhall),
  setup.qres.Building(setup.buildingtemplate.workshop),
  setup.qres.Building(setup.buildingtemplate.market),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_room_mate [nobr event] {"position":"1225,17725","size":"100,100"}
<<run new setup.UnitGroup(
"room_mate0",
"Doppelganger",
'subrace_humandesert', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_wildman),
  setup.qc.AddTraitsRandom('unit', [setup.trait.skill_animal, setup.trait.magic_water_master], 1, false, false),
],
)>>

<<run new setup.Event(
'room_mate', /* key */
"Room Mate", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_room_mate',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.Home(),
    setup.qres.HasTag('quest_doppelganged'),
  ],
  'dop': 'room_mate0',
},
[ /* outcomes */
  setup.qc.SetCooldownEvent(null, 15),
  setup.qc.QuestDirect('room_mate', {
dop: "dop",
slaver: "slaver",
}),
],
[ /* restrictions */
  setup.qres.NoQuest('room_mate'),
  setup.qres.NoOpportunity('room_mate'),
  setup.qres.VarEqual('quest_doppelganger_progress', '2'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_royal_visit [nobr event] {"position":"475,17475","size":"100,100"}
<<run new setup.Title(
"quest_royal_visit0", /* key */
"Neko Port City Royalty", /* name */
"A symbolic royalty of the Neko Port City", /* description */
"a|is part of the symbolic royal family of the Neko Port City", /* unit text */
20000, /* slave value */
{ /* skill additives */
  social: 5,
  sex: 3,
},
)
>>


<<run new setup.UnitGroup(
"royal_visit0",
"Neko Submissive Royal",
'subrace_neko', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_royal),
  setup.qc.TraitsReplace('unit', [setup.trait.per_submissive, setup.trait.per_attentive, setup.trait.face_beautiful, setup.trait.magic_earth_master]),
  setup.qc.AddTitle('unit', 'quest_royal_visit0'),
],
)>>

<<run new setup.Event(
'royal_visit', /* key */
"Royal Visit", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_royal_visit',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
  'slave': 'brothel_head_courtesan',
  'target': 'royal_visit0',
},
[ /* outcomes */
  setup.qc.VarSet('quest_brothel_wait', '50', -1),
  setup.qc.SetCooldownEvent(null, 300),
  setup.qc.QuestDirect('royal_visit', {
head: "head",
owner: "owner",
slave: "slave",
target: "target",
}),
],
[ /* restrictions */
  setup.qres.VarNull('quest_brothel_wait'),
  setup.qres.VarEqual('quest_brothel_progress', '500'),
  setup.qres.VarGte('quest_brothel_class', 20),
  setup.qres.VarNull('quest_brothel_royal_visit'),
],
53, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_sabotage_success [nobr event] {"position":"225,16600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'sabotage_success', /* key */
"Sabotage Success", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
  'unit',
],
'Event_sabotage_success',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
  ],
  'boss': [
  ],
},
[ /* outcomes */
  setup.qc.VarAdd('rival_blackmail_progress', 1, -1),
  setup.qc.IfThenElse(
    setup.qres.VarGte('rival_blackmail_progress', 3),
    setup.qc.DoAll([
      setup.qc.Event('end_of_a_company', 2, {
        slaver: "slaver",
        boss: "boss",
      })
    ], undefined),
    setup.qc.DoAll([
      setup.qc.Opportunity('subtle_retaliation', {
        slaver: "slaver",
        boss: "boss",
      })
    ], undefined)),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_scrubbing [nobr event] {"position":"850,13600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'scrubbing', /* key */
"Scrubbing", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_scrubbing',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Home(),
    setup.qres.OnDuty('maidslave'),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_skybound_recreation [nobr event] {"position":"225,20225","size":"100,100"}
<<run new setup.Event(
'skybound_recreation', /* key */
"Skybound Recreation", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_skybound_recreation',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.AllTraits([setup.trait.skill_flight], true),
    setup.qres.NoTraits([setup.trait.join_junior], true),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveNoBedchamber(),
    setup.qres.AllTraits([setup.trait.training_obedience_basic], true),
    setup.qres.NoTraits([setup.trait.skill_flight], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_slave_appropriation [nobr event] {"position":"725,15100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'slave_appropriation', /* key */
"Slave Appropriation", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_slave_appropriation',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slave),
setup.qres.Trait(setup.trait.value_high2),
setup.qres.Available(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('drow', -20),
setup.qc.MissingUnitRecapture('victim', 'escapehard'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('drow', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_slave_dick_on_slave [nobr event] {"position":"1100,13600","size":"100,100"}
<<run new setup.Event(
'slave_dick_on_slave', /* key */
"Slave Dick on Slave", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_slave_dick_on_slave',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
    setup.qres.AnyTrait([setup.trait.dick_tiny, setup.trait.dick_small, setup.trait.dick_medium, setup.trait.dick_large, setup.trait.dick_huge, setup.trait.dick_titanic], true),
    setup.qres.IsCanOrgasm(),
    setup.qres.BedchamberOtherSlave(setup.qres.And([
setup.qres.Available(),
setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true)
])),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_slave_recapture [nobr event] {"position":"475,20225","size":"100,100"}
<<run new setup.Event(
'slave_recapture', /* key */
"Slave Recapture", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_slave_recapture',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_hunter, setup.trait.bg_wildman, setup.trait.bg_woodsman], true),
  ],
  'slave': 'missingslaves',
},
[ /* outcomes */
  setup.qc.Slave('slave', "", undefined),
],
[ /* restrictions */
  setup.qres.UnitGroupHasUnit('missingslaves'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_slavecoming [nobr event] {"position":"225,20600","size":"100,100"}
<<run new setup.Event(
'slavecoming', /* key */
"Slavecoming", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_slavecoming',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slave': 'new_game_plus_slaves',
},
[ /* outcomes */
  setup.qc.Slave('slave', "", undefined),
  setup.qc.IfThenElse(
    setup.qres.UnitGroupHasUnit('new_game_plus_slaves'),
    setup.qc.DoAll([
      setup.qc.Event('slavecoming', 30, null)
    ], undefined),
    setup.qc.DoAll([
    ], undefined)
  ),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_slaves_war [nobr event] {"position":"1225,15725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'slaves_war', /* key */
"Slaves War", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_slaves_war',
{ /* roles */
'victim': [
setup.qres.Available(),
setup.qres.Job(setup.job.slave),
],

'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('outlaws', -20),
setup.qc.MissingUnit('victim'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('outlaws', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_something_to_say [nobr event] {"position":"100,13725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'something_to_say', /* key */
"Something to Say", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_something_to_say',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.FriendshipWithYouAtLeast(750),
    setup.qres.Not(setup.qres.IsCanTalk()),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_sore_ass [nobr event] {"position":"350,13725","size":"100,100"}
<<run new setup.Event(
'sore_ass', /* key */
"Sore Ass", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_sore_ass',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Home(),
    setup.qres.OnDuty('analfuckholeslave'),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_sore_shoulders [nobr event] {"position":"600,13725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'sore_shoulders', /* key */
"Sore Shoulders", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_sore_shoulders',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Trait(setup.trait.muscle_strong),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_special_cake [nobr event] {"position":"725,20225","size":"100,100"}
<<run new setup.Event(
'special_cake', /* key */
"Special Cake", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_special_cake',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_foodworker], true),
    setup.qres.NoTraits([setup.trait.per_chaste], true),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.AnyTrait([setup.trait.balls_large, setup.trait.balls_huge, setup.trait.balls_titanic, setup.trait.breast_large, setup.trait.breast_huge, setup.trait.breast_titanic], true),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_spirit_dream [nobr event] {"position":"1225,15975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'spirit_dream', /* key */
"Spirit Dream", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_spirit_dream',
{ /* roles */
'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('werewolf', -20),
setup.qc.TraumatizeRandomSlaverHome(),
setup.qc.TraumatizeRandomSlaverHome(),
setup.qc.TraumatizeRandomSlaverHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('werewolf', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_standard_punishment [nobr event] {"position":"850,13725","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'standard_punishment', /* key */
"Standard Punishment", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_standard_punishment',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_none, setup.trait.training_obedience_basic], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_stolen_flame [nobr event] {"position":"225,18225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'stolen_flame', /* key */
"Stolen Flame", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
],
'Event_stolen_flame',
{ /* roles */
},
{ /* actors */
  'lover': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.YourLover(),
  ],
},
[ /* outcomes */
  setup.qc.VarSet('future_assassin_progress', '2', -1),
  setup.qc.QuestDirect('stolen_flame', {
lover: "lover",
}),
],
[ /* restrictions */
  setup.qres.VarEqual('future_assassin_progress', '1'),
  setup.qres.VarNull('future_assassin_cooldown'),
  setup.qres.ExistUnit([
setup.qres.Job(setup.job.slaver),
setup.qres.HasTag('future_assassin_parent')
]),
],
0, /* Cooldown */
setup.rarity.common,  /* Rarity */
)>>


:: EventSetup_sunbathing [nobr event] {"position":"1100,13725","size":"100,100"}
<<run new setup.Event(
'sunbathing', /* key */
"Sunbathing", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_sunbathing',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NoTraits([setup.trait.body_demon], true),
    setup.qres.Available(),
    setup.qres.FriendshipWithYouAtLeast(300),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.courtyard),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_taste_of_revenge [nobr event] {"position":"475,16600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'taste_of_revenge', /* key */
"Taste of Revenge", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
  'unknown',
],
'Event_taste_of_revenge',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
  ],
  'boss': [
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('from_hero_to_zero', {
boss: "boss",
slaver: "slaver",
}),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_tax_collector [nobr event] {"position":"725,15600","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'tax_collector', /* key */
"Tax Collector", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_tax_collector',
{ /* roles */
'slaver': [
setup.qres.NotYou(),
setup.qres.Job(setup.job.slaver),
],
},
{ /* actors */
  'tax': 'subrace_humankingdom',
},
[ /* outcomes */
setup.qc.MoneyCustom(-10000),
setup.qc.Ire('humankingdom', -20), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humankingdom', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_teachings_of_obedience [nobr event] {"position":"725,18850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Title(
"quest_author_of_the_teachings_of_obedience_0", /* key */
"Author of the Teachings of Obedience", /* name */
"The sole author of the Teaching of Obedience book", /* description */
"wrote the \"Teachings of Obedience\" book", /* unit text */
7500, /* slave value */
{ /* skill additives */
slaving: 4,knowledge: 2,},
)
>>


<<run new setup.Event(
'teachings_of_obedience', /* key */
"Teachings of Obedience", /* Title */
"darko", /* Author */
[ /* tags */
  'fort',
  'upgrade',
],
'Event_teachings_of_obedience',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.Item(setup.item.technology_obediencemaster),
  setup.qc.BoonizeRandom('slaver', 100),
  setup.qc.Return('slaver'),
  setup.qc.AddTitle('slaver', 'quest_author_of_the_teachings_of_obedience_0'),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_terrified_inspection [nobr event] {"position":"100,13850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'terrified_inspection', /* key */
"Terrified Inspection", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_terrified_inspection',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.FriendshipWithYouAtMost(-500),
    setup.qres.TraitExact(setup.trait.training_obedience_basic),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_the_dragonkin_beckons [nobr event] {"position":"725,15975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_dragonkin_beckons', /* key */
"The Dragonkin Beckons", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_the_dragonkin_beckons',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.NotYou(),
],
},
{ /* actors */
'dragon': 'subrace_dragonkin', },
[ /* outcomes */
setup.qc.Ire('dragonkin', -20),
setup.qc.MissingUnitRecapture('victim', 'capturedhard'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('dragonkin', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_the_dragonkin_beckons2 [nobr event] {"position":"975,15100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_dragonkin_beckons2', /* key */
"The Dragonkin Beckons", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_the_dragonkin_beckons2',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slave),
setup.qres.Available(),
],
},
{ /* actors */
'dragon': 'subrace_dragonkin', },
[ /* outcomes */
setup.qc.Ire('dragonkin', -20),
setup.qc.MissingUnitRecapture('victim', 'escapehard'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('dragonkin', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_the_dragonkin_disapprove [nobr event] {"position":"475,15225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_dragonkin_disapprove', /* key */
"The Dragonkin Disapprove", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_the_dragonkin_disapprove',
{ /* roles */
'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('dragonkin', -20),
setup.qc.Favor('dragonkin', -500),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('dragonkin', 20),
setup.qres.FavorAtLeast('dragonkin', 500), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_the_essence_of_life [nobr event] {"position":"225,18100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_essence_of_life', /* key */
"The Essence of Life", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_the_essence_of_life',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('the_essence_of_life', {
slaver: "slaver",
}),
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_the_fire_giveth [nobr event] {"position":"725,16350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_fire_giveth', /* key */
"The Fire Giveth", /* Title */
"darko", /* Author */
[ /* tags */
  'desert',
  'veteran',
  'trait',
],
'Event_the_fire_giveth',
{ /* roles */
},
{ /* actors */
  'student': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_consumed_by_fire_0'),
  ],
  'wizard': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.AnyTrait([setup.trait.magic_fire_master,
    setup.trait.magic_water_master, setup.trait.magic_wind_master,
    setup.trait.magic_earth_master, setup.trait.magic_light_master,
    setup.trait.magic_dark_master, setup.trait.magic_fire,
    setup.trait.magic_water, setup.trait.magic_wind, setup.trait.magic_earth,
    setup.trait.magic_light, setup.trait.magic_dark], true),
  ],
},
[ /* outcomes */
  setup.qc.QuestDirect('the_fire_taketh', null),
],
[ /* restrictions */
  setup.qres.NoQuest('the_fire_taketh'),
  setup.qres.VarNull('be_cleansed_in_fire_event_timeout'),
],
0, /* Cooldown */
setup.rarity.common,  /* Rarity */
)>>


:: EventSetup_the_fruit_of_lewdity [nobr event] {"position":"1225,17975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_fruit_of_lewdity', /* key */
"The Fruit of Lewdity", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_the_fruit_of_lewdity',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
  ],
},
[ /* outcomes */
  setup.qc.Return('slaver'),
  setup.qc.TraitReplace('slaver', setup.trait.magic_earth_master),
  setup.qc.SetCooldownQuest('the_plant_of_lewdity', 100),
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_the_nekos_disapprove [nobr event] {"position":"725,15225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_nekos_disapprove', /* key */
"The Neko Disapprove", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_the_nekos_disapprove',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('neko', -20),
setup.qc.Favor('neko', -500),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('neko', 20),
setup.qres.FavorAtLeast('neko', 500), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_the_quest_for_excalibur__epilogue [nobr event] {"position":"225,17975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_quest_for_excalibur__epilogue', /* key */
"The Quest for Excalibur: Epilogue", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_the_quest_for_excalibur__epilogue',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.VarRemove('quest_excalibur'),
setup.qc.VarSet('quest_excalibur_radiant', '1', 250),
setup.qc.VarSet('quest_excalibur_done', '1', -1),
],
[ /* restrictions to generate */
],
0, /* Cooldown */
setup.rarity.never,  /* Rarity */
)>>


:: EventSetup_the_shunned_kobold [nobr event] {"position":"1225,18975","size":"100,100"}
<<run new setup.UnitGroup(
"the_shunned_kobold1",
"The Shunned Kobold",
'subrace_kobold', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.AddTitle('unit', 'quest_the_shunned_kobold_0'),
  setup.qc.ClearMentalTraits('unit'),
  setup.qc.BgTraitReset('unit', setup.trait.bg_unemployed),
  setup.qc.TraitAndMakeInnate('unit', setup.trait.wings_dragonkin),
  setup.qc.TraitReplace('unit', setup.trait.height_dwarf),
  setup.qc.AddTraitsRandom('unit', [setup.trait.per_brave, setup.trait.per_proud, setup.trait.per_independent, setup.trait.per_loyal, setup.trait.per_attentive, setup.trait.per_stubborn, setup.trait.per_dominant], 1, false, false),
],
)>>

<<run new setup.Event(
'the_shunned_kobold', /* key */
"The Shunned Kobold", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'scaley',
  'deep',
  'unit',
],
'Event_the_shunned_kobold',
{ /* roles (LEGACY) */
},
{ /* actors */
  'kobold': 'the_shunned_kobold1',
},
[ /* outcomes */
  setup.qc.VarSet('quest_shunned_kobold_progress', '5', -1),
  setup.qc.Injury('kobold', 40),
  setup.qc.Slaver('kobold', "a|was a kobold that tried to find a better life in the surface after being shunned for having been born with wings", undefined),
],
[ /* restrictions */
  setup.qres.NoUnitWithTitle('quest_the_shunned_kobold_0', {}),
  setup.qres.NoUnitWithTitle('quest_the_ex_kobold_1', {}),
  setup.qres.NoUnitWithTitle('quest_savior_kobold_0', {}),
  setup.qres.Building(setup.buildingtemplate.scouttunnel),
  setup.qres.HaveMetCompany('kobold'),
],
250, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_the_sour_and_salty_taste [nobr event] {"position":"475,18100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_sour_and_salty_taste', /* key */
"The Sour and Salty Taste", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_the_sour_and_salty_taste',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('the_sweet_and_sour_essence', {
slaver: "slaver",
}),
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_the_sweet_taste_of_virginity [nobr event] {"position":"725,18100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_sweet_taste_of_virginity', /* key */
"The Sweet Taste of Virginity", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_the_sweet_taste_of_virginity',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('the_sweet_taste_of_virginity', {
slaver: "slaver",
}),
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_the_werewolves_disapprove [nobr event] {"position":"975,15225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'the_werewolves_disapprove', /* key */
"The Werewolves Disapprove", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_the_werewolves_disapprove',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('werewolf', -20),
setup.qc.Favor('werewolf', -500), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('werewolf', 20),
setup.qres.FavorAtLeast('werewolf', 500), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_thief_benefits [nobr event] {"position":"975,20225","size":"100,100"}
<<run new setup.UnitGroup(
"thief_benefits0",
"Thief",
'all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_thief),
],
)>>

<<run new setup.Event(
'thief_benefits', /* key */
"Thief Benefits", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_thief_benefits',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_thief], true),
  ],
  'thief': 'thief_benefits0',
},
[ /* outcomes */
  setup.qc.Slave('thief', "a|was a thief who tried to steal from your market, but a|was deftly caught by a former thief in your employ", undefined),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.market),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_trader_booth [nobr event] {"position":"1225,20225","size":"100,100"}
<<run new setup.Event(
'trader_booth', /* key */
"Trader Booth", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_trader_booth',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_merchant], true),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.AnyTrait([setup.trait.breast_huge, setup.trait.breast_titanic, setup.trait.balls_huge, setup.trait.balls_titanic], true),
    setup.qres.Available(),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.market),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_trial_of_love_cancelled [nobr event] {"position":"975,16350","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Title(
"quest_love_trialist_0", /* key */
"Love Trialist", /* name */
"Participant in the Trials of Love", /* description */
"a|is currently participating in the Trials of Love", /* unit text */
0, /* slave value */
{ /* skill additives */
},
)
>>

<<run new setup.Event(
'trial_of_love_cancelled', /* key */
"Trial of Love Cancelled", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_trial_of_love_cancelled',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.RemoveTitleGlobal('quest_love_trialist_0'),
  setup.qc.VarRemove('trial_of_love_progress'),
  setup.qc.VarSet('trial_of_love_cooldown', '1', 15),
],
[ /* restrictions */
  setup.qres.ExistUnit([
setup.qres.HasTitle('quest_love_trialist_0'),
setup.qres.Not(setup.qres.BestFriend(setup.qres.HasTitle('quest_love_trialist_0')))
]),
],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_under_new_management_quality_time [nobr event] {"position":"725,14100","size":"100,100"}
<<run new setup.Event(
'under_new_management_quality_time', /* key */
"Under New Management: Quality Time", /* Title */
{ /* Author */
  name: "Kyrozis",
  url: "",
},
[ /* tags */
  'favor',
  'trait',
],
'Event_under_new_management_quality_time',
{ /* roles (LEGACY) */
},
{ /* actors */
  'guard1': [],
  'guard2': [],
  'pimp': [],
},
[ /* outcomes */
  setup.qc.Favor('neko', 300),
  setup.qc.BoonizeRandom('guard1', 5),
  setup.qc.BoonizeRandom('guard2', 5),
  setup.qc.BoonizeRandom('pimp', 5),
  setup.qc.Return('guard1'),
  setup.qc.Return('guard2'),
  setup.qc.Return('pimp'),
],
[ /* restrictions */
],
0, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_understaffed [nobr event] {"position":"725,17475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'understaffed', /* key */
"Understaffed", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'forest',
],
'Event_understaffed',
{ /* roles (LEGACY) */
},
{ /* actors */
  'head': 'brothel_cleanup0',
  'owner': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.Available(),
    setup.qres.HasTitle('quest_brothel_owner_0'),
    setup.qres.Home(),
  ],
},
[ /* outcomes */
  setup.qc.IfThenElse(
setup.qres.Actor('head', setup.qres.AllTraits([setup.trait.gender_male], true)),
setup.qc.DoAll([
setup.qc.SlaveOrderFlex(
'New Employee for your Brothel', /* name */
'player', /* company */
50, /* expires in */
500, /* base price */
500, /* trait multi */
0, /* value multi */
[ /* crit traits */
setup.trait.vagina_tight,
setup.trait.anus_tight,
setup.trait.face_attractive,
setup.trait.face_beautiful,
setup.trait.per_lustful,
setup.trait.per_sexaddict,
setup.trait.skill_entertain,
setup.trait.bg_courtesan,
setup.trait.bg_whore,
setup.trait.magic_earth,
setup.trait.magic_earth_master,
],
[ /* disaster traits */
setup.trait.anus_gape,
setup.trait.vagina_gape,
setup.trait.face_hideous,
setup.trait.face_scary,
setup.trait.corrupted,
setup.trait.corruptedfull,
setup.trait.per_chaste,
setup.trait.magic_dark_master,
setup.trait.magic_dark,
],
[ /* restrictions */
setup.qres.Job(setup.job.slave),
setup.qres.AllTraits([setup.trait.gender_male], true),
setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
],
[ /* addons */
],
[ /* fulfilled outcomes */
setup.qc.HideAll([
setup.qc.VarSet('quest_brothel_progress', '20', -1),
setup.qc.VarSet('quest_brothel_wait', '4', -1)
], "Increase your brothel\'s profits"),
],
[ /* unfulfilled outcomes */
],
)
], undefined),
setup.qc.DoAll([
setup.qc.SlaveOrderFlex(
'New Employee for your Brothel', /* name */
'player', /* company */
50, /* expires in */
500, /* base price */
500, /* trait multi */
0, /* value multi */
[ /* crit traits */
setup.trait.vagina_tight,
setup.trait.anus_tight,
setup.trait.face_attractive,
setup.trait.face_beautiful,
setup.trait.per_lustful,
setup.trait.per_sexaddict,
setup.trait.skill_entertain,
setup.trait.bg_courtesan,
setup.trait.bg_whore,
setup.trait.magic_earth,
setup.trait.magic_earth_master,
],
[ /* disaster traits */
setup.trait.anus_gape,
setup.trait.vagina_gape,
setup.trait.face_hideous,
setup.trait.face_scary,
setup.trait.corrupted,
setup.trait.corruptedfull,
setup.trait.per_chaste,
setup.trait.magic_dark_master,
setup.trait.magic_dark,
],
[ /* restrictions */
setup.qres.Job(setup.job.slave),
setup.qres.AllTraits([setup.trait.gender_female], true),
setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
],
[ /* addons */
],
[ /* fulfilled outcomes */
setup.qc.HideAll([
setup.qc.VarSet('quest_brothel_progress', '20', -1),
setup.qc.VarSet('quest_brothel_wait', '4', -1)
], "Increase your brothel\'s profits"),
],
[ /* unfulfilled outcomes */
],
)
], undefined)),
],
[ /* restrictions */
  setup.qres.VarEqual('quest_brothel_progress', '12'),
  setup.qres.VarNull('quest_brothel_wait'),
],
53, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: EventSetup_unnaturally_thin_waist [nobr event] {"position":"350,13850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'unnaturally_thin_waist', /* key */
"Unnaturally Thin Waist", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_unnaturally_thin_waist',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.muscle_extremelythin], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_used_angelic_slave_for_sale [nobr event] {"position":"600,13850","size":"100,100"}
<<run new setup.UnitGroup(
"used_angelic_slave_for_sale0",
"Fake Angel",
'subrace_humankingdom', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.TraitReplaceExisting('unit', setup.trait.vagina_tight),
  setup.qc.TraitReplace('unit', setup.trait.anus_tight),
  setup.qc.TraitReplace('unit', setup.trait.wings_angel),
  setup.qc.BgTraitReset('unit', setup.trait.bg_slave),
  setup.qc.TraitReplace('unit', setup.trait.face_attractive),
],
)>>

<<run new setup.Event(
'used_angelic_slave_for_sale', /* key */
"Used Angelic Slave For Sale", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
  'unit',
],
'Event_used_angelic_slave_for_sale',
{ /* roles (LEGACY) */
},
{ /* actors */
  'man': 'all',
  'slave': 'used_angelic_slave_for_sale0',
},
[ /* outcomes */
  setup.qc.VarSet('quest_tiger_bank_repo_resale', '1', 250),
  setup.qc.Slave('slave', "a|was the private slave of a con artist cult leader before being taken by the Tiger Bank repo-men", true, 0.8),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
  setup.qres.FavorAtLeast('bank', 500),
  setup.qres.VarNull('quest_tiger_bank_repo_resale'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_used_housekeeper_for_sale [nobr event] {"position":"850,13850","size":"100,100"}
<<run new setup.UnitGroup(
"used_housekeeper_for_sale0",
"Unused Housekeeper",
'all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.TraitReplaceExisting('unit', setup.trait.vagina_tight),
  setup.qc.TraitReplaceExisting('unit', setup.trait.anus_tight),
  setup.qc.BgTraitReset('unit', setup.trait.bg_maid),
  setup.qc.TraitReplace('unit', setup.trait.skill_entertain),
  setup.qc.TraitReplace('unit', setup.trait.per_chaste),
],
)>>

<<run new setup.Event(
'used_housekeeper_for_sale', /* key */
"Used Housekeeper for Sale", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
  'unit',
],
'Event_used_housekeeper_for_sale',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slave': 'used_housekeeper_for_sale0',
  'man': 'all',
},
[ /* outcomes */
  setup.qc.VarSet('quest_tiger_bank_repo_resale', '1', 250),
  setup.qc.Slave('slave', "a|was a slave being used as nothing but a regular maid before being sold to you", true, 0.8),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
  setup.qres.FavorAtLeast('bank', 300),
  setup.qres.VarNull('quest_tiger_bank_repo_resale'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_used_maid_for_sale [nobr event] {"position":"1100,13850","size":"100,100"}
<<run new setup.UnitGroup(
"used_maid_for_sale0",
"Repoed Maid",
'all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_maid),
  setup.qc.TraitReplaceExisting('unit', setup.trait.vagina_gape),
  setup.qc.TraitReplaceExisting('unit', setup.trait.anus_gape),
  setup.qc.TraitReplace('unit', setup.trait.face_attractive),
  setup.qc.TraitReplace('unit', setup.trait.training_obedience_advanced),
  setup.qc.TraitReplace('unit', setup.trait.training_domestic_basic),
  setup.qc.TraitReplace('unit', setup.trait.per_lustful),
  setup.qc.Injury('unit', 4),
],
)>>

<<run new setup.Event(
'used_maid_for_sale', /* key */
"Used Maid for Sale", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
  'unit',
],
'Event_used_maid_for_sale',
{ /* roles (LEGACY) */
},
{ /* actors */
  'maid': 'used_maid_for_sale0',
},
[ /* outcomes */
  setup.qc.Slave('maid', "a|was a housekeeper and fucktoy of a dormitory before being collected by the Tiger Bank repo-men and sold to you", true, 0.8),
  setup.qc.VarSet('quest_tiger_bank_repo_resale', '1', 250),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
  setup.qres.FavorAtLeast('bank', 300),
  setup.qres.VarNull('quest_tiger_bank_repo_resale'),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_used_thug_for_sale [nobr event] {"position":"225,13975","size":"100,100"}
<<run new setup.UnitGroup(
"used_thug_for_sale0",
"Thug",
'all', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_thug),
  setup.qc.TraitsReplace('unit', [setup.trait.muscle_verystrong, setup.trait.face_scary, setup.trait.skill_intimidating]),
  setup.qc.TraitReplaceExisting('unit', setup.trait.dick_huge),
  setup.qc.TraitReplaceExisting('unit', setup.trait.breast_huge),
],
)>>

<<run new setup.Event(
'used_thug_for_sale', /* key */
"Used Thug for Sale", /* Title */
{ /* Author */
  name: "FCdev and darko",
  url: "",
},
[ /* tags */
  'fort',
  'unit',
],
'Event_used_thug_for_sale',
{ /* roles (LEGACY) */
},
{ /* actors */
  'man': 'all',
  'thug': 'used_thug_for_sale0',
},
[ /* outcomes */
  setup.qc.VarSet('quest_tiger_bank_repo_resale', '1', 250),
  setup.qc.Slave('thug', "a|was an overthrown gang leader who was subsequently enslaved by the bank for being unable to pay off a|their debts", true, 0.8),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
  setup.qres.VarNull('quest_tiger_bank_repo_resale'),
  setup.qres.FavorAtLeast('bank', 500),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_used_whore [nobr event] {"position":"475,13975","size":"100,100"}
<<run new setup.Event(
'used_whore', /* key */
"Used Whore", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_used_whore',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.Home(),
    setup.qres.OnDuty('entertainmentslave'),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_vacation_over [nobr event] {"position":"225,20350","size":"100,100"}
<<run new setup.Event(
'vacation_over', /* key */
"Vacation Over", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_vacation_over',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
  ],
  'them': [
  ],
},
[ /* outcomes */
  setup.qc.BoonizeRandom('you', 20),
  setup.qc.Return('you'),
  setup.qc.Return('them'),
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_vale_gossip [nobr event] {"position":"725,15475","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'vale_gossip', /* key */
"Gossipers of the Vale", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_vale_gossip',
{ /* roles */
},
{ /* actors */
},
[ /* outcomes */
setup.qc.Ire('humanvale', -20),
setup.qc.IreSpread('humanvale'),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('humanvale', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_veteran_celebration [nobr event] {"position":"975,16225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'veteran_celebration', /* key */
"Veteran Celebration", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_veteran_celebration',
{ /* roles */
'slaver1': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],

'slaver2': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],

'slaver3': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],

'slaver4': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
},
[ /* outcomes */
  setup.qc.Item(setup.item.sexmanual_penetration_mouthhole),
],
[ /* restrictions to generate */
  setup.qres.NoItem(setup.item.sexmanual_penetration_mouthhole),
  setup.qres.Building('veteranhall'),
],
0,
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_veteran_slaver [nobr event] {"position":"475,20350","size":"100,100"}
<<run new setup.Event(
'veteran_slaver', /* key */
"Veteran Slaver", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_veteran_slaver',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_slaver], true),
  ],
  'slave': [
    setup.qres.AllTraits([setup.trait.job_slave, setup.trait.training_none], true),
    setup.qres.NotBusy(),
  ],
},
[ /* outcomes */
  setup.qc.Opportunity('veteran_slaver', {
slaver: "slaver",
you: "you",
slave: "slave",
}),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.trainingchamber),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_vocal_disobedience [nobr event] {"position":"725,13975","size":"100,100"}
<<run new setup.Event(
'vocal_disobedience', /* key */
"Vocal Disobedience", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_vocal_disobedience',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.training_none, setup.trait.training_obedience_basic], true),
    setup.qres.IsCanPhysicallyTalk(),
    setup.qres.Not(setup.qres.IsCanTalk()),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_waking_dream [nobr event] {"position":"225,16100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'waking_dream', /* key */
"Waking Dream", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_waking_dream',
{ /* roles */
},
{ /* actors */
  'elf': 'subrace_elf',
},
[ /* outcomes */
setup.qc.Ire('elf', -20),
setup.qc.TraumatizeRandomSlaverHome(),
setup.qc.TraumatizeRandomSlaverHome(),
setup.qc.TraumatizeRandomSlaverHome(),
],
[ /* restrictions to generate */
setup.qres.IreAtLeast('elf', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_wanderer_joins [nobr event] {"position":"725,18225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Title(
"quest_mysterious_wanderer_0", /* key */
"Mysterious Wanderer", /* name */
"A mysterious wonderer who one day showed up at your fort", /* description */
"a|have a mysterious past that you know little about", /* unit text */
0, /* slave value */
{ /* skill additives */
},
)
>>

<<run new setup.Title(
"quest_shapeshifter__werewolf_1", /* key */
"Shapeshifter: Werewolf", /* name */
"Either through heritage or advanced magic, this unit is capable of shifting forms between northerner and werewolf", /* description */
"a|is a shapeshifter capable of shifting form between an ordinary northerner and a hulking werewolf", /* unit text */
3000, /* slave value */
{ /* skill additives */
brawn: 1,social: 1,},
)
>>

<<run new setup.UnitGroup(
"wanderer_joins1",
"Wanderer",
'subrace_humanvale', /* pools */
0, /* reuse chance */
[ /* unit post process */
  setup.qc.BgTraitReset('unit', setup.trait.bg_nomad),
  setup.qc.TraitsReplace('unit', [setup.trait.face_attractive, setup.trait.per_loner, setup.trait.per_cautious]),
  setup.qc.AddTitle('unit', 'quest_mysterious_wanderer_0'),
],
)>>

<<run new setup.Event(
'wanderer_joins', /* key */
"Wanderer Joins", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_wanderer_joins',
{ /* roles */
},
{ /* actors */
  'wanderer': 'wanderer_joins1',
},
[ /* outcomes */
  setup.qc.Slaver('wanderer', "has an unknown past", undefined),
  setup.qc.SetCooldownEvent('wanderer_missing', 4),
  setup.qc.VarRemove('half_werewolf_father_seen'),
  setup.qc.VarRemove('half_werewolf_father_encountered'),
  setup.qc.VarRemove('half_werewolf_epilogue'),
],
[ /* restrictions */
  setup.qres.Building('prospectshall'),
  setup.qres.NoUnitWithTitle('quest_mysterious_wanderer_0', {
}),
  setup.qres.NoUnitWithTitle('quest_shapeshifter__werewolf_1', {
}),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_wanderer_missing [nobr event] {"position":"975,18225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'wanderer_missing', /* key */
"Wanderer Missing", /* Title */
"darko", /* Author */
[ /* tags */
],
'Event_wanderer_missing',
{ /* roles */
},
{ /* actors */
  'wanderer': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_mysterious_wanderer_0'),
  ],
},
[ /* outcomes */
  setup.qc.Leave('wanderer', "went missing from your company", 1),
  setup.qc.IfThenElse(
    setup.qres.And([
      setup.qres.VarGte('wanderer_joins_missing', 2),
      setup.qres.Building('mailroom'),
    ]),
  setup.qc.DoAll([
  setup.qc.QuestDirect('the_wanderer_wanders', {
  wanderer: "wanderer",
  })
  ], undefined),
  setup.qc.DoAll([

  ], undefined)),
  setup.qc.VarAdd('wanderer_joins_missing', 1, -1),
],
[ /* restrictions */
],
8, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_wandering_nomad [nobr event] {"position":"725,20350","size":"100,100"}
<<run new setup.Event(
'wandering_nomad', /* key */
"Wandering Nomad", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_wandering_nomad',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AllTraits([setup.trait.bg_nomad], true),
  ],
},
[ /* outcomes */
  setup.qc.BoonizeRandom('slaver', 5),
  setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.AnyTrait([setup.trait.subrace_humandesert, setup.trait.race_greenskin], true)),
setup.qc.DoAll([
setup.qc.QuestDelay(setup.questpool.desert, 2)
], undefined),
setup.qc.DoAll([
setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.AnyTrait([setup.trait.subrace_humanvale, setup.trait.race_wolfkin], true)),
setup.qc.DoAll([
setup.qc.QuestDelay(setup.questpool.vale, 4)
], undefined),
setup.qc.DoAll([
setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.AnyTrait([setup.trait.race_elf, setup.trait.race_catkin], true)),
setup.qc.DoAll([
setup.qc.QuestDelay(setup.questpool.forest, 3)
], undefined),
setup.qc.DoAll([
setup.qc.IfThenElse(
setup.qres.Actor('slaver', setup.qres.AnyTrait([setup.trait.race_demon, setup.trait.race_lizardkin, setup.trait.subrace_humansea], true)),
setup.qc.DoAll([
setup.qc.QuestDelay(setup.questpool.sea, 1)
], undefined),
setup.qc.DoAll([
setup.qc.QuestDelay(setup.questpool.city, 3)
], undefined))
], undefined))
], undefined))
], undefined)),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.scoutharbor),
  setup.qres.Building(setup.buildingtemplate.scouttunnel),
  setup.qres.Building(setup.buildingtemplate.scoutcarriage),
  setup.qres.Building(setup.buildingtemplate.scoutoffice),
  setup.qres.Building(setup.buildingtemplate.scouttower),
  setup.qres.Building(setup.buildingtemplate.scouthut),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_wanting_for_a_talk [nobr event] {"position":"975,13975","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'wanting_for_a_talk', /* key */
"Wanting for a Talk", /* Title */
{ /* Author */
  name: "FCdev",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_wanting_for_a_talk',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [ setup.qres.You(), ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveOwnedByYou(),
    setup.qres.Trait(setup.trait.training_obedience_advanced),
    setup.qres.Home(),
    setup.qres.Trait(setup.trait.per_smart),
    setup.qres.Not(setup.qres.IsCanTalk()),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_whorebaited [nobr event] {"position":"975,15850","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'whorebaited', /* key */
"Whorebaited", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_whorebaited',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slaver),
setup.qres.Available(),
setup.qres.NotYou(),
],

'slaver': [
setup.qres.Job(setup.job.slaver),
setup.qres.NotYou(),
],
},
{ /* actors */
'neko': 'subrace_neko', },
[ /* outcomes */
setup.qc.Ire('neko', -20),
setup.qc.MissingUnit('victim'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('neko', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_wise_words [nobr event] {"position":"975,20350","size":"100,100"}
<<run new setup.Event(
'wise_words', /* key */
"Wise Words", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_wise_words',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.trauma_combat, setup.trait.trauma_brawn, setup.trait.trauma_survival, setup.trait.trauma_intrigue, setup.trait.trauma_slaving, setup.trait.trauma_knowledge, setup.trait.trauma_social, setup.trait.trauma_aid, setup.trait.trauma_arcane, setup.trait.trauma_sex], true),
  ],
  'slaver': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.NotYou(),
    setup.qres.Available(),
    setup.qres.NoTraits([setup.trait.join_junior], true),
    setup.qres.Home(),
    setup.qres.AnyTrait([setup.trait.bg_monk, setup.trait.bg_wiseman], true),
  ],
},
[ /* outcomes */
  setup.qc.TraumaHeal('you', 20),
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.moraleoffice),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_with_interest [nobr event] {"position":"1225,15100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'with_interest', /* key */
"With Interest", /* Title */
"darko", /* Author */
[ ], /* tags */
'Event_with_interest',
{ /* roles */
'victim': [
setup.qres.Job(setup.job.slave),
setup.qres.Available(),
],
},
{ /* actors */
'dragon': 'subrace_dragonkin', },
[ /* outcomes */
setup.qc.Ire('bank', -20),
setup.qc.MissingUnitRecapture('victim', 'escapehard'), ],
[ /* restrictions to generate */
setup.qres.IreAtLeast('bank', 20), ],
0, /* Cooldown */
setup.rarity.always,  /* Rarity */
)>>


:: EventSetup_withering_plant [nobr event] {"position":"975,18100","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'withering_plant', /* key */
"Withering Plant", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_withering_plant',
{ /* roles (LEGACY) */
},
{ /* actors */
  'slaver': [
  ],
},
[ /* outcomes */
  setup.qc.Return('slaver'),
  setup.qc.TraumatizeRandom('slaver', 5),
  setup.qc.SetCooldownQuest('the_plant_of_lewdity', 25),
],
[ /* restrictions */
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.never, /* Rarity */
)>>


:: EventSetup_work_unending [nobr event] {"position":"1225,20350","size":"100,100"}
<<run new setup.Event(
'work_unending', /* key */
"Work Unending", /* Title */
{ /* Author */
  name: "darko",
  url: "",
},
[ /* tags */
  'fort',
],
'Event_work_unending',
{ /* roles (LEGACY) */
},
{ /* actors */
  'you': [
    setup.qres.You(),
    setup.qres.Home(),
  ],
  'slave': [
    setup.qres.Job(setup.job.slave),
    setup.qres.SlaveUsableByYou(),
    setup.qres.AnyTrait([setup.trait.training_obedience_advanced, setup.trait.training_obedience_master], true),
  ],
},
[ /* outcomes */
],
[ /* restrictions */
  setup.qres.Building(setup.buildingtemplate.greathall),
],
setup.EVENT_DEFAULT_COOLDOWN, /* Cooldown */
setup.rarity.rare, /* Rarity */
)>>


:: EventSetup_worried_wolf [nobr event] {"position":"1225,18225","size":"100,100"}
/* PROOFREAD COMPLETE */

<<run new setup.Event(
'worried_wolf', /* key */
"Worried Wolf", /* Title */
"darko", /* Author */
[ /* tags */
  'unit',
],
'Event_worried_wolf',
{ /* roles */
},
{ /* actors */
  'child': [
    setup.qres.Job(setup.job.slaver),
    setup.qres.HasTitle('quest_shapeshifter__werewolf_1'),
    setup.qres.NoTag('half_werewolf_told_backstory'),
  ],
},
[ /* outcomes */
  setup.qc.AddTag('child', 'half_werewolf_told_backstory'),
],
[ /* restrictions */
  setup.qres.VarEqual('half_werewolf_father_encountered', '1'),
],
0, /* Cooldown */
setup.rarity.always, /* Rarity */
)>>


:: Event_Asspussy_Common [nobr] {"position":"475,12725","size":"100,100"}
<p>
You tell <<them $g.slave>> that <<they $g.slave>>'s got a nice asspussy, and grope <<them $g.slave>> thoroughly, cupping <<their $g.slave>> buttocks with one <<uhand $unit.player>> and squeezing <<their $g.slave>> <<ubreasts $g.slave>> with the other. <<They $g.slave>> looks
<<if $g.slave.getMainTraining().getTags().includes('tranal')>>desperately eager<<else>>ready and willing<</if>>, and angles <<themself $g.slave>> just right, but you administer a light slap to <<their $g.slave>> ass and continue, telling <<their $g.slave>> that it's so nice you feel like sharing it.
<<They $g.slave>>'s <<if $g.slave.getMainTraining().getTags().includes('tranal')>>so ready to fuck <<they $g.slave>> can't quite think of what to say<<else>>not quite sure how to respond<</if>>, and before <<they $g.slave>> can figure it out,
<<if !$g.a.isSlave()>>
<<yourrep $g.a>> a|come in.
<<else>>
<<yourrep $g.a>>
<<if $g.a.isCanWalk()>>
hurries in,
<<else>>
crawls in,
<</if>>
responding to your summons.
<</if>>
<<name $g.a>> takes in the situation at a glance and
<<if $g.a.isHasDick()>>instantly achieves a painfully hard erection<<else>>immediately flushes with arousal<</if>>.
<<They $g.a>><<if !$g.a.isHasDick()>> dons a strap-on and<</if>> clambers up onto the <<uslaverbed $g.slave>>. Since saliva is plenty of lube for <<name $g.slave>>'s experienced ass, <<they $g.slave>> points a meaningful finger at <<if !$g.a.isHasDick()>>the phallus<<else>><<their $g.slave>> cock<</if>>, and <<name $g.slave>> begins to suck it enthusiastically, trying to get it as wet as possible for the sake of <<their $g.slave>> butt.
</p>

<p>
Since <<name $g.slave>> is being so good, you decide to help get <<them $g.slave>> get ready, and push <<them $g.slave>> sideways so <<they $g.slave>> straddles the <<uslaverbed $g.slave>>'s edge. <<They $g.slave>> whimpers into the <<if !$g.a.isHasDick()>>dildo<<else>>dick<</if>> in <<their $g.slave>> <<umouth $g.slave>> as <<they $g.slave>> feels <<their $g.slave>>
<<if $g.slave.isHasDick()>>
<<if $g.slave.isInChastity()>>
chastity cage
<<else>>
hard cock
<</if>>
<<else>>
mons
<</if>>
graze the sheets, and then stiffens as you penetrate <<their $g.slave>> bottom.
When you feel that <<rep $g.a>> is wet enough, you nod to <<them $g.a>>, and <<they $g.a>> takes <<name $g.slave>> by the hand, pulling <<them $g.slave>> up onto <<their $g.a>> lap.
<<if $g.a.isSlave()>>
<<if ($g.a.isHasTrait('breast_titanic')) && ($g.slave.isHasTrait('breast_titanic'))>>
Their tits are so huge that they can't reach each other to kiss, chest-to-chest like that. <<rep $g.a>> settles for blowing the other slave an exaggerated kiss, which makes <<them $g.slave>> laugh.
<<else>>
The slaves start making out, showing no signs of breaking their lip lock as they arrange themselves for penetration.
<</if>>
<</if>>
<<name $g.a>> guides <<their $g.slave>>
<<if !$g.a.isHasDick()>>strap-on<<else>>cock<</if>> inside the <<if $g.slave.getMainTraining().getTags().includes('tranal')>>enthusiastic<<else>>compliant<</if>> <<name $g.slave>>, who begins to ride it, enjoying both the <<if $g.slave.isHasDick()>>prostate<<else>>anal<</if>> stimulation and the feeling of <<their $g.slave>>
<<if $g.slave.isHasDick()>>
<<if $g.slave.isInChastity()>>
midsection trapped between <<them $g.slave>> and
<<else>>
erection trapped between <<them $g.slave>> and
<</if>>
<<else>>pussy pressed against<</if>>
<<name $g.a>>. <<name $g.a>> smacks the humping
<<woman $g.slave>>'s butt to get <<them $g.slave>> to stop, and slides an index finger up <<their $g.slave>> ass alongside the
<<if !$g.a.isHasDick()>>phallus<<else>>cock<</if>>. <<name $g.slave>> shudders, and then begins to whine as <<name $g.a>> pulls <<their $g.slave>> sphincter wider.
</p>

<p>
The slave begs incoherently as you press your <<if $unit.player.isHasDick()>>dick<<else>>strap-on<</if>> against <<name $g.a>>'s finger. It's not clear whether <<they $g.slave>>'s begging you to DP <<their $g.slave>> anus, or begging you not to, but whichever it is, <<name $g.a>> withdraws <<their $g.slave>> finger and you shove yourself inside. <<name $g.slave>> jerks with discomfort and gives a gasping
<<if $g.slave.isCanTalk()>>
"Oh f-fuck-k"
<<else>>
moan
<</if>>
that <<if $g.slave.isHasTrait('anus_gape')>><<they $g.slave>> repeats over and over<<else>>is followed by some minor struggling<</if>> as you begin to fuck <<them $g.slave>>.
<<if $g.a.isSlave()>>
From <<their $g.slave>> angle, <<name $g.a>> can't pound <<name $g.slave>> quite as hard as you can, but <<they $g.slave>> still does <<their $g.slave>> best.
<<else>>
You eagerly make out with your lover as both of you pound the ass quite hard.
<</if>>
When you've both had your fun, extracted yourselves, and let the exhausted, gaped bitch collapse onto the floor, <<yourrep $g.a>> gives you a naughty wink.
<<if $g.a.isCanTalk()>>
<<if $g.a.isSlave()>>
"That was fun, <<Master $unit.player>>!"
<<they $g.slave>> says. "Shall we flip <<their $g.slave>> over and go again?"
<<else>>
"That was fun!"
<<they $g.slave>> says. "Shall we flip <<their $g.slave>> over and go again?"
<</if>>
<<if $g.slave.isCanTalk()>>
"Please nooo," comes a quiet wail from the floor.
<<else>>
A quiet wail follows from the floor.
<</if>>
<</if>>
</p>


:: Event_TigerBankRepoCommon [nobr] {"position":"100,13975","size":"100,100"}
<p>
The <<rep $company.bank>> is a fair financial establishment. They would offer their customer a safe place to store their valuables, as well as providing loans to those that needs them. But like everywhere else, there are winners and losers of the ever-changing market, and when someone falls upon hard times and fail to pay their loan, the many repo-men and repo-women of the bank start their work. Grim-faced and unmoved by sympathy, they go in to seize the debtor's assets to pay off their debts - which does at times include some quite interesting pieces of merchandise, like a nice slave or two. They would then offer to offload these merchandise quickly for a cheaper fee to their allies, which apparently include your company.
</p>


:: Event_a_gift_from_faraway_land [nobr] {"position":"1100,14475","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
Some culture in the faraway land beyond the <<lore region_sea>> consider sex
as a form of art. They have developed numerous sex techniques to support this, the
infamous of them being their teasing techniques. Even when
fully clothed, you can never know when one of these people would suddenly
approach you, and tease
<<if $unit.player.isHasDick()>>
your dick over their asses,
<<else>>
their dick over your pussy,
<</if>>
forcing an
<<if $unit.player.isHasDick()>>
erection
<<else>>
arousal
<</if>>.
</p>

<p>
Thanks to your incredible relationship with the <<rep $company.humansea>>,
however, now you are in possession of the rare and ancient tome: the <<rep
setup.item.sexmanual_tease>>. From inside the book you can sense unimaginable
power — the power of teasing genitals without actually doing the penetration.
You can already imagine the many uses of such knowledge, and frankly
speaking, you can't wait to try it out. Grinning to yourself, you decide to
visit
<<set _l = $unit.player.getLover()>>
<<if _l>>
your lover <<rep _l>> later during work for some mid-work teasing.
<<else>>
your dungeons later for some fun.
<</if>>
</p>


:: Event_a_gift_from_the_bank [nobr] {"position":"100,14600","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
Through a series of appropriately placed bribes and investments, your
standings with the <<rep $company.bank>> has grown. They have trusted your
company a great deal now, and in fact, an emissary has just arrived at your fort today to seal
the alliance with a gift.
A proper gift for a person such as you, the <<rep setup.item.sexmanual_lick_feet>>.
</p>

<p>
The book details many sexual pleasures one could derive from getting their
feet worshipped and licked clean. While the book itself is certainly a
valuable gift, you can't feel but notice that the neko messenger smirks a
little at the gift — a bootlicker for a bootlicker perhaps? Either way, this
is a valuable gift, and you grudgingly thank the messenger before putting
the book in your shelf for later perusal.
</p>

<p>
You can see <<yourrep _u>> smirking at you for receiving such a gift and for the connotation it
brings. You make a mental note to put the <<uadjgood _u>> <<urace _u>> in a
dangerous mission later this week.
</p>


:: Event_a_gift_from_the_city_of_lucgate [nobr] {"position":"350,14600","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
Recently, you have built a number of strong lasting friendship with several important
people in the <<lore region_city>> and the <<rep $company.humankingdom>>. Today,
an emissary they dispatched has arrived in your compound, bringing you a
gift suitable for a... "mercenary" company such as yours. As the messenger
bows and exits the room, <<yourrep _u>> opens the gift, revealing the
<<rep setup.item.sexmanual_breasts_kiss>> within.
</p>

<p>
The gift is a sex manual, certainly an interesting way to express that while they actually know what your
company is all about, they still appreciate your efforts nonetheless. Thinking
of a thoughtful gift in return, you shelf the manual for now and begin to work.
</p>


:: Event_a_gift_from_the_dark [nobr] {"position":"600,14600","size":"100,100"}
<<set _w = $company.player.getUnits({job: setup.job.slaver}).filter(u => !u.isYou() && u.isHasTrait('magic_earth_master'))>>

<<set _u = setup.getAnySlaver()>>
<<if _w.length>>
<<set _u = _w[0]>>
<</if>>

<p>
As you go around per your usual schedule, the sky surrounding your fort suddenly
turns dark, and you can see purple magical vortex swirling far up on the sky above
you. As you and your slavers brace for the incoming rain of corruption,
what comes outside of it instead is a single box, which harmlessly lands on the
courtyard before the sky clears itself again. From your window, you see
<<yourrep _u>> curiously poking a stick to the seemingly harmless box, before
<<uadv _u>> opening it, revealing a dense tome inside.
</p>

<p>
The tome turns out to be an incredibly rare <<rep
setup.item.sexmanual_tentacle_spitroast>>, describing what one could possibly
do to slaves should they are blessed with tentacles.
Well, that's not very useful, as neither you nor any of your slavers happens to possess
tentacles, but then <<yourrep _u>> reminds you that certain masters of <<lore
magic_earth>> are capable of summoning tentacles.

<<if $unit.player.isHasTrait('magic_earth_master')>>
You happen to be one of those select people, and after studying the tome for
a good while you've concluded that you should be able try some of these techniques
out on the slaves later...

<<elseif _u.isHasTrait('magic_earth_master')>>
<<Yourrep _u>> happens to be one of those gifted people, and you can see the
<<if _u.isHasTrait('per_honorable')>>
honorable slaver's disgust towards you and your degenerate ideas.

<<else>>
slaver's delight in trying the technique out.
<</if>>

<<else>>
Unfortunately, none of your slavers are currently capable of using that magic,
so the tome shall remain shelved for the time being.
<</if>>
</p>

<<if $unit.player.isHasTrait('per_submissive')>>
<p>
Later that night, you woke up in the middle of the night to
<<if $unit.player.isHasDick()>>
an erection,
<<else>>
a wet dream,
<</if>>
after dreaming having all your available orifices penetrated by big, viny tentacles.
You should probably get that submissive mind of yours checked by the resident doctor...
</p>
<</if>>


:: Event_a_gift_from_the_desert [nobr] {"position":"850,14600","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
Your friendship with the <<rep $company.humandesert>> has not gone unnoticed
by the many kingdoms that lie even further east of the deserts. Today, you've received a gift
from one such kingdoms, but instead of gold or jewelry it is... a sex manual.
In fact, it is the famous <<rep setup.item.sexmanual_grope>>, detailing the various finer points of
groping one's body.
</p>

<p>
You can overhear <<yourrep _u>> chuckles as <<they _u>> sees you open the gift, and
<<they _u>> helpfully suggests that perhaps this is simply a gesture of good will from
the infamous <<lore person_kurdwisec>>, a king infamous for his lunacy in the deserts.
Sighing in acknowledgement, you decide to shelf the book for now, but give
yourself a mental reminder to come back to the book later during "fun time"
hours.
</p>

<p>
For once, there are much to be done today, and reading a sex manual is not
one of them yet.
</p>


:: Event_a_gift_from_the_dragonkins [nobr] {"position":"1100,14600","size":"100,100"}
<<set _u = setup.getAnySlaver()>>
<p>
A winged dragonkin messenger clad in full armor has come to your compound
today. The mighty messenger brings you a gift, as a token of your strong
friendship with <<rep $company.dragonkin>>. You open the carefully wrapped
gift, and discover the <<rep setup.item.sexmanual_bodypart_tail>> instead.
This book is the "karmasutra" of the dragonkin, depicting the various sexual
acts one could do if should they are blessed with a tail. A fitting gift for a
slaving company such as yours.
</p>

<<if $unit.player.getTail()>>
<p>
Your <<utail $unit.player>> twitches as you continue to read the book, as if
your tail has a mind of its own, eager to try the techniques out.
You do not blame your tail, and you proceed to pick up <<yourrep $g.slave>> from
the dungeons. Following the book's instruction, you slither your tail into the
entrance of <<their $g.slave>> <<uhole $g.slave>>, before <<uadv
$unit.player>> shoving it inside <<them $g.slave>>. As you are inexperienced,
you shove it hard and rough, eliciting a pained moan from <<yourrep
$g.slave>>. To your surprise, the sensation of having your tail rub against
the inner walls of <<rep $g.slave>> is quite pleasurable, and you reach
climax soon-after.
All the while the messenger watches amusedly as you learn firsthand how
pleasurable it is using your own tail to penetrate a slave.
</p>
<<else>>
<p>
You might not have the tail to use the techniques in this book for now, but
who knows? Maybe one day you'll somehow be able to experience the
sensation of having a tail penetrate another.
</p>
<</if>>

<p>
You thank the messenger for the kind gift, and <<they $g.dragon>> departs
from your fort accompanied with a blast of wind from <<their $g.dragon>> powerful wing
muscles.
</p>


:: Event_a_gift_from_the_drow [nobr] {"position":"100,14725","size":"100,100"}
<p>
    An emissary from the glorious city of <<rep $company.drow>> has ascended to the surface and into your fort, apparently, bringing a gift.
    Knowing drow politics, you exercise extreme caution receiving the gift, knowing all too well that the drows never give out anything for free.
    The gift turns out to be a pretty rare sex manual. Unlike most other companies, the drow did not dignify you with a demonstration, but given the content of the book, that's probably a good thing.
</p>

<p>
    The book, the <<rep setup.item.sexmanual_step_on_dick>> describes how to assert a slave's place by stepping on their very manhood. A fitting gift, given how cruel drow culture could be. But you get the feeling this might just be a thinly veiled threat that you should never go against the drows...
</p>


:: Event_a_gift_from_the_elves [nobr] {"position":"350,14725","size":"100,100"}
<p>
Today, you receive a gift, brought by one of the elven messengers to
celebrate your lasting friendship with <<rep $company.elf>>. A simple book,
detailing vairous deep-throating techniques. As you recall, the elves have a long
tradition of using their alchemical prowess to concoct elixirs capable of
making one safely deep-throat even the longest of phallus. But you never know
the technique has been passed down for generations in the form a book, that is now
your <<uhands $unit.player>>.
</p>

<p>
The elves are reclusive people however, and the messenger seems to have no
intention whatsoever of demonstrating the techniques in the book for your
amusement. Instead, the messenger simply bows and goes on <<their $g.elf>>
separate way, far away from your fort. All's that's left is you and the <<rep
setup.item.sexmanual_deepthroat>>, sitting on your desk, waiting your
perusal.
</p>

<p>
Perhaps you can make time to visit a slave or two in your dungeon today.
<<if $unit.player.isHasTrait('per_submissive')>>
Preferably one with the longest cocks, to try the techniques yourself... wait
what are you thinking about you submissive slut!
<<else>>
<<if $unit.player.isHasDick()>>
You can already feel your cock twitching at the thought of forcing it deep down a slave's unprepared throat.
<<else>>
You'd best prepare your longest and scariest strap-on for the sure to be fun little event.
<</if>>
<</if>>
</p>


:: Event_a_gift_from_the_kobolds [nobr] {"position":"600,14725","size":"100,100"}
<p>
    A group of small kobolds have climbed up from the <<lore region_deep>> and into your fort, bearing a gift.
    The gift turns out to be the <<rep setup.item.sexmanual_spit_face>>, and incredibly rare tome.
    The kobolds have apparently grown quite fond of you and your companies,
    and hope the book would make a suitable present to express their feelings.
    You thank the kobolds for the gifts, and they went on their way back into the dark underground world.
</p>

<p>
    Once alone, you skimmed through your new book. It depicts the act of spitting on the face of your partner, to assert dominance. A strange gift coming from the kobolds. You get the feeling that the kobolds themselves must have received this gift from someone else, perhaps with the original intention to show them their place...
</p>


:: Event_a_gift_from_the_lizardkins [nobr] {"position":"850,14725","size":"100,100"}
<<set _u = setup.getAnySlaver()>>
<p>
In the recent weeks, you've made great allies with the reclusive <<rep
$company.lizardkin>>. These people are rather awkward at communicating with
people outside of their tribe, and it shows even now. They've come to your fort
today, bearing a strange gift. While the gift happens to be suitable for a slaving
company such as yours, it would be awkward anywhere else: the <<rep
setup.item.sexmanual_nibble_neck>>.
</p>

<p>
The book explains in great details, perhaps in too much details, of how these lizardkin
people make love with each other.
<<if $unit.player.isHasTrait('subrace_lizardkin')>>
Being a lizardkin yourself, you know these techniques well, but you can
only guess what kind of face your other slavers would make when they read this book
once it's stored in your classroom...
<<elseif $unit.player.isHasTrait('race_lizardkin')>>
As a <<urace $unit.player>>, you are closely related to lizardkin, and hence
you are somewhat familiar with these mating rituals. Despite that, the depth
to which this book goes to explicitly describe the acts still intrigues you,
and before you know it you have finished reading the book.
<<else>>
Still, the book describes these raunchy acts very well, and you become absorbed in the book.
Before you know it, you've finished reading the book.
<</if>>
Reading the entire sexy tome somehow jots your creativity, and
you can't wait to try out some of these new knowledge on some unsuspecting slave...
</p>


:: Event_a_gift_from_the_nekos [nobr] {"position":"1100,14725","size":"100,100"}
<p>
A lone neko has arrives at your fort today, bearing a gift for you from the
<<lore location_npc>>. Apparently, the neko have somehow trusted your
company, and would like to express their trust in the way they know best. As
the lone neko neko|enter your office, <<they $g.neko>> neko|lock the door and neko|close the
curtain before opening <<their $g.neko>> present to you. A rare and valuable manual: the
<<rep setup.item.sexmanual_earsblowjob>>.
</p>

<<set _eq = $unit.player.getGenitalCovering()>>

<p>
Without warning, the sensual neko neko|push you to your chair and neko|kneel down.
<<if !$unit.player.isHasDick()>>
<<set _d = 'strap-on'>>
<<They $g.neko>> neko|affix a strap-on on your genital area, before proceeding to
<<elseif _eq>>
<<set _d = 'dick'>>
<<They $g.neko>> neko|undo your <<rep _eq>> and neko|proceed to
<<else>>
<<set _d = 'dick'>>
<<They $g.neko>> neko|see your naked <<ugenital $unit.player>> and neko|proceed to
<</if>>
suck on the <<= _d>>.
<<Their $g.neko>> ears neko|twitch all the time, much more frequent than
other neko you've had the pleasure to face-fuck before,
and you have the bright idea to use them as handles for
an even harder face-fuck.
The two of you made love until you reach climax,
<<if $unit.player.isHasDick()>>
spluttering all your cum down the neko's clearly experienced throat.
<<else>>
shuddering in ecstacy.
<</if>>
Having fulfilled <<their $g.neko>> goal of teaching you the new knowledge
inside the manual, the neko professionally neko|bid you and your company farewell,
leaving you and the <<rep setup.item.sexmanual_earsblowjob>> alone.
</p>


:: Event_a_gift_from_the_orcs [nobr] {"position":"100,14850","size":"100,100"}
<<set _u = setup.getAnySlaver()>>
<p>
Today, an emissary from the <<rep $company.orc>> has arrived in your
compound. He brings a gift from the orc king himself, as a gesture of
goodwill towards the new friendship you are building with them. This gift
comes in the form of a rare sex manual, the <<rep
setup.item.sexmanual_cockaction>>, passed from generation to generation in
the orcish camp.
</p>

<p>
To demonstrate the techniques hidden within,
the emissary wordlessly descends into your dungeons together with
you, before grabbing the nearby <<rep $g.slave>>. He then strips his leg
armors, revealing a massive dong to the horror of <<yourrep $g.slave>>.
<<ustripmouth $g.slave>>. The orc then roughly shoves the length of the shaft
down the slave's throat, before pulling it out and slapping the slimy and
massive erection across the poor slave's face, covering <<their $g.slave>>
face is a mixture of saliva and precum.
</p>

<p>
Once the orc finishes by cumming down the slave's throat, you escort the
emissary back to the entrance while leaving the poor slave to recover from
choking on and being slapped by such a massive hard-on. You swear you can see
<<yourrep _u>> writing down some notes about the newly unlocked sex action,
no doubt eager to try it with some unsuspecting slave.
</p>


:: Event_a_gift_from_the_outlaws [nobr] {"position":"350,14850","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
An anonymous package has arrived at your fort today. Despite bearing no
obvious information about its sender, judging from the markings left on the
packaging this is no doubt being sent by one of your <<rep $company.outlaws>>
contacts, as a result of your excellent relations with them. As you <<uadv
$unit.player>> open the package, <<yourrep _u>> arrives just in time as the
content is unveiled: a rare <<rep setup.item.sexmanual_nipple_pinch>>.
</p>

<p>
Unsure how to use this gift, <<rep _u>> <<uadv _u>> reads it on your behalf
instead, before heading straight to the dungeons to pick up <<yourrep
$g.slave>>. Without warning, <<reps _u>> invading <<uhand _u>> slither straight into the
slave's <<ubreasts $g.slave>> and into <<their $g.slave>> nipples.
Helpless to do anything, the slave is forced to watch and moan as <<rep _u>>
plays with the nipples, first tentatively twisting it before pinching it
hard. At the end of the play, the slave is panting in heat, <<their
$g.slave>> nipples hard from the rough play.
</p>

<p>
Placing the book on the shelf, you can feel the heat starting to rise from under you as well.
No doubt you'll be revisiting this shelf very soon, to test this new
technique out<<if $unit.player.isHasTrait('per_submissive')>>
on your own submissive little nipples<</if>>...
</p>


:: Event_a_gift_from_the_royals [nobr] {"position":"600,14850","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
    A strange, anonymous gift has arrived at your fort today. While it does not have the identity of its senders anywhere, judging from the faint scent of roses as well as the impeccably ribbon wrapping, you have little doubt it comes from one of your contacts within the high class <<rep $company.royal>>. Indeed, you've made quite an impression with some members of the court, and perhaps this is their way of showing goodwill without anything to tie you back to them.
</p>

<p>
    Opening up the wrapping reveals an exotic tome: the <<rep setup.item.sexmanual_upsidedown>>, depicting the many sexual pleasure one could derive from having their partner in bondage. Amongst the many sex instructions found within, one stuck out the most — the so-called standing 69. With the help of manacles hanging from the ceiling, one could potentially hang their partner upside down from the ceiling, ensuring that your genital would be just at the right height of their mouth and vice-versa.
</p>

<p>
    While you do need specialized furniture to enact this pleasurable position, you remember that you do have some manacles hanging from the ceiling of your dungeons. Perhaps one of your slaves might be up for testingj next time...
</p>

<p>
    Why would the royals have access to this kind of kinky book, though?
</p>


:: Event_a_gift_from_the_valefolks [nobr] {"position":"850,14850","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
Recently, your bond with the <<rep $company.humanvale>> has grown quite
considerably, and you can be considered their allies now.
In fact, you've been hosting several of the <<lore region_vale>> leaders recently.
In the last feast, one of the valefolks haned over to you a gift — a gift representing
an important part of their culture in the form of a book:
the <<rep setup.item.sexmanual_slap_ass>>.
</p>

<p>
The valefolks are rough and tumble people, and they consider slapping each
other's ass as a common greeting. Rubbing your <<uhands $unit.player>> over your ass, you still
remember the stinging slap delivered by one of the vale leaders, which turns out
to be a rather amiable greeting for them.
<<if $unit.player.isHasTrait('per_submissive')>>
As a (secretly!) submissive little slut, you relish the memory every now and
then.
<<else>>
You can never get used to such an odd greeting.
<</if>>
But perhaps this... greetings... can be made more useful in the bedroom.
</p>

<p>
As you put the book in your shelf you can hear <<yourrep _u>> yelping, no
doubt receiving one of the greetings being delivered playfully by one of your
other slavers. They certainly have learned much from the <<rep $company.humanvale>>.
</p>


:: Event_a_gift_from_the_werewolves [nobr] {"position":"1100,14850","size":"100,100"}
<p>
A werewolf warrior has arrived today at your fort, bearing a gift from his pack,
no doubt thanks to your excellent relatio with <<rep $company.werewolf>>.
A classic and valuable werewolf tome, the <<rep setup.item.sexmanual_balls>>,
details the various sexual acts one could perform upon another's balls.
Without saying any word, you and the werewolf head over into your dungeons,
with understanding between the two of you of what would unfold next.
</p>

<p>
<<Yourrep $g.slave>> slave|is roughly yanked from <<their $g.slave>> resting
place, and the werewolf shoves his considerable member down into the slave's
throat. As the slave struggles to breathe, the werewolf suddenly slide his
member out of the <<umouth $g.slave>>, before pushing the slave down and pressing <<their
$g.slave>> face into his balls. With a commanding tone, the werewolf orders
the slave to lick his hairy balls, and in the face of such an alpha, <<they
$g.slave>> slave|have no choice but to obey.
</p>

<p>
This goes on for quite a while, and you can feel the warmth rising from under
as you watch the entire hot scene unfolds.
<<if $unit.player.isHasTrait('per_submissive')>>
You secretly fantasize being in the slave's position, servicing your alpha
with your tongue.
<<else>>
<<if $unit.player.isHasDick()>>
Your balls are jealous at the servicing the werewolf's balls are currently being given,
but there is no doubt you'll get the opportunity sooner or later
now that you have obtained the <<rep setup.item.sexmanual_balls>>.
<<else>>
While you may not have balls, you can certainly put this knowledge to good use.
<</if>>
<</if>>
</p>

<p>
With the demonstration over, the werewolf solemnly nods to you before
reequipping his trousers and leaving your fort. All that's left from the werewolf is
a sex manual sitting nicely on your desk, and the demonstrative act that has been burned
into your memory.
</p>


:: Event_a_high_class_brothel [nobr] {"position":"350,16725","size":"100,100"}
<<set _profit = setup.dutytemplate.questbrothelmanager.profit()>>
<<set _progress = setup.dutytemplate.questbrothelmanager.progress()>>
<<set _class = setup.dutytemplate.questbrothelmanager.class()>>
<<set _facility = setup.dutytemplate.questbrothelmanager.facility()>>
<<set _attraction = setup.dutytemplate.questbrothelmanager.attraction()>>
<<set _name = setup.dutytemplate.questbrothelmanager.brothelName()>>
<<set _gender = setup.dutytemplate.questbrothelmanager.gender()>>
<<set _describe = setup.dutytemplate.questbrothelmanager.describe()>>
<<set _promotion = setup.dutytemplate.questbrothelmanager.promotion()>>
<<set _dom = setup.dutytemplate.questbrothelmanager.sub()>>

<<if _class >= 20>>
  <<if $g.head.isHasDick()>>
    <<questimage 'a_high_class_brothel_male_classy.jpg'>>
  <<else>>
    <<questimage 'a_high_class_brothel_female_classy.jpg'>>
  <</if>>
<<else>>
  <<if $g.head.isHasDick()>>
  <<else>>
  <</if>>
<</if>>

<p>
By now, <<attach _describe>> has become one of the main attractions in the <<lore location_npc>>.
<<if _class >= 20>>
The brothel has a reputation for being one of the classiest brothels around, and occasionally some neko or even visiting nobles can be seen enjoying the luxury inside.
<<elseif _class <= -20>>
As a den of debauchery, the brothel draws many criminals into the venue, and
occasionally infamous mafia bosses can be seen visiting the venue with
<<their $g.owner>> entourage.
<<else>>
The brothel caters to a wide variety of audience, and it is balanced properly between class and debauchery. Various people can occasionally be seen patroning the venue, from low nobles to white collar criminals.
<</if>>
The many <<if $g.head.isHasDick()>>manly<<else>>feminine<</if>> courtesans found within are very well-versed in their arts too.
<<if _dom == 'sub'>>
These courtesans specialize in being submissive little sluts, and would satisfy even the most demanding tasks their dominant customers would require.
<<elseif _dom == 'dom'>>
These <<if $g.head.isHasDick()>>muscular<</if>> courtesans specialize in dominance, and they can satisfy clients wishing for another dominant to guide the sex through, or even those secretly submissive clients who keeps fantasizing about being sexually abused.
<<else>>
These courtesans are trained in a variety of roles, be it as a submissive little slut or a dominant. Sex with them could go either way, which draws in a wide variety of customers.
<</if>>
</p>

<p>
The venue itself is a wonder. The entire complex looks like
<<if _class >= 20>>
a royal palace, with the receptions designed like a throne room, complete with a grand red carpet to welcome customers.
<<elseif _class <= -20>>
a demonic palace, with fiery chandeliers hanging in the receptions, powered by magic.
<<else>>
an exotic palace, with bamboo trees surrounding the reception hall, their growth accelerated by magic.
<</if>>
Various amenities can be found inside, be it a bar, private rooms for rent, and a full-blown sex dungeons for the kinkier customers.
But the main attraction in the grand brothel palace complex has to be the newly-built
<<if _attraction == 'gravity'>>
Magic Gravity Room.
With the help of the slave-turned-head-courtesan <<name $g.slave>>, who is quite adept at using magic, the various magical crystals scattered throughout the room can be activated, which would send a steady stream of wind upwards, cancelling gravity out. This allows your courtesans to engage in positions that would normally be impossible with their customers.
<<if _sub == 'sub'>>
The customers can enjoy the unmatched feeling of fucking a well-behaving submissive slut while floating in the air. When they climax, their produce will even float harmlessly, which can be used for some kinky <<ucum $unit.player>> play.
<<elseif _dom == 'dom'>>
The customers can enjoy the unmatched feeling of being fucked by the masterful dominant courtesans in the air. When your courtesan
<<if $g.head.isHasDick()>>cums<<else>>climaxes<</if>>,
their <<ucum $g.head>> would float harmlessly in the air, which can be used for some exciting <<ucum $g.head>> play as well.
<<else>>
The customers can enjoy the unmatched feeling of either being fucked or fucking a courtesan in mid-air. When either climax, their produce will even float harmlessly, and a kinky enough customer could use this for some rather un-traditional cum play.
<</if>>
<<else>>
Magic Bondage Room.
With the help of the slave-turned-head-courtesan <<name $g.slave>>, who is quite adept at using magic, the various magical crystals scattered affixed throughout the walls and equipments within the room can be activated. The room's apparatus would then come to live — the restraints can be made to float in mid-air, which can be used to
<<if _dom == 'sub'>>
restrain the submissive courtesans in whatever sexy pose their clients desire.
<<elseif _dom == 'dom'>>
restrain the more submissive clients in whatever sexy pose your dominant courtesans come up with.
<<else>>
force either your courtesan or the client in some fixed mid-air position.
<</if>>
But that's not all — the sex toys scattered throughout the room are enchanted too. When they are channeled with magic, the dildos, buttplug, and even the nipple clamps would start to vibrate and shock its wearer, which allows for even kinkier rough play inside.
<</if>>
</p>

<p>
<<Yourrep $g.owner>> owner|have been serving as the manager of the place for quite some time by now, and <<they $g.owner>> owner|is very familiar with the place and its worker. Several bouncers are always posted near the entrance to keep the venue safe. Your <<urace $g.slave>> former-slave <<name $g.slave>> now serves as the head courtesan, and <<their $g.slave>> slave training holds strong. On <<reps $g.owner>> command, <<they $g.slave>> would obediently serve customers or use <<their $g.slave>> magical prowess to activate the various enchantments within the facility. The former head-whore <<name $g.head>> has been promoted as the
<<if _promotion == 'money'>>
business manager, and <<they $g.head>> works diligently ensuring that the brothel's financials are always in the green. <<They $g.head>> has not completely forgotten <<their $g.head>> past life, and can occasionally be seen employing <<their $g.head>> seduction and charm to negotiate a better deal for the various necessities in your brothel.
<<else>>
customer relations officer, and <<they $g.head>> works diligently ensuring that the brothel's customers always leave satisfied. <<They $g.head>> has not completely forgotten <<their $g.head>> whoring skills neither, and can occasionally be found giving a complimentary blowjob or two to the customers.
<</if>>
</p>

<<set _describe = setup.dutytemplate.questbrothelmanager.describe()>>

<p>
With all these upgrades, <<attach _describe>> is as complete as it could ever be.
Nobody thought it was possible, but you and <<yourrep $g.owner>> have transformed a once decrepit brothel into the envy of the city,
<<if _class >= 20>>
a high-class brothel fit for a royal.
<<elseif _class <= -20>>
a paradise of debauchery.
<<else>>
an exotic sex complex.
<</if>>
It is making quite a bit of money every week now, and as long as <<yourrep $g.owner>> remains staffed as the brothel's manager, the revenue will keep on coming. Time to sit back and enjoy the results of your hard work!
</p>


:: Event_a_letter_of_challenge [nobr] {"position":"1100,17850","size":"100,100"}
<<includereplace "Quest_a_letter_of_challenge">>


:: Event_a_merchant_s_rage [nobr] {"position":"350,14350","size":"100,100"}
<<dialogue $g.merchant>>
    You raided one of MY caravans! What were you thinking!?
<</dialogue>>
<<questimage "prince_of_cups.jpg">>

/*Set Player Drink*/
<<if $unit.player.isHasAnyTraitExact(['bg_farmer','bg_mercenary','bg_pirate','bg_seaman', 'bg_soldier', 'bg_thug', 'bg_unemployed', 'bg_wildman', 'bg_woodsman'])>>
    <<set _pdrink = 'tankard of mead'>>
<<elseif $unit.player.isHasAnyTraitExact(['bg_monk', 'bg_priest'])>>
    <<set _pdrink = 'cup of tea'>>
<<else>>
    <<set _pdrink = 'glass of wine'>>
<</if>>

The air at the table is tense, despite the wine in front of <<name $g.merchant>> and the _pdrink before you.<br>
"Take me through it again. You got a message that you thought was from me telling you about a new caravan?"<br>
<<if $unit.player.getSpeech() == setup.speech.bold>>
    "Yeah. Said to destroy it as usual."
<<elseif $unit.player.getSpeech() == setup.speech.cool>>
    "Yep."
<<else>>
    "Yes, one leaving the city," you say.<br>
    You both pause as a server places a platter of bread, cheese, honey and figs at your table, withdrawing speedily and quietly. Reaching out you prepare a plate and slide it over to <<name $g.merchant>>'s side of the table.
<</if>>
<br>
"And it looked like one of my notes?"<br>
<<if $unit.player.isHasTrait('per_slow')>>
    You frown. "Yes?"
<<elseif $unit.player.isHasTrait('per_smart')>>
    "Nice paper, expensive ink, unsigned. Said time was of the essence. The hand was a bit different, but that didn't mean it wasn't you."
<<else>>
    "Nice paper, expensive ink, unsigned. Said time was of the essence. I mean, sure."
<</if>>
<br>
"Do you bring it?"<br>
Shoving a slice of fig into your mouth, you reach into your bag and pull out a folded sheet of parchment and slide it across the table. Unfolding it, <<name $g.merchant>> examines the message, <<their $g.merchant>> jaw clenching as their eyes dart over it. Turning it over, they examine the map.<br>
<<if $unit.player.isHasTrait('per_smart')>>
    "All right," <<they $g.merchant>> says, putting the note down. "If it's not in my hand, then it's not from me, got it?"
<<else>>
    "All right," <<they $g.merchant>> say with a sigh, placing the parchment down in front of you and turning it around so you can read the text. Taking out another sheet and lifting out a pen and inkwell <<they $g.merchant>> writes out the message again. "You see how that's not my writing?" <<they $g.merchant>> asks.
    <<if $unit.player.isHasTrait('per_slow')>>
        It takes a while for <<them $g.merchant>> to explain it to you, but an hour or so later you feel you're going to be able to recognise any more fake letters that get sent to you.
    <<else>>
        Laid out side by side as they are, the differences are obvious.<br>
        "Yeah, I see it," you say, nodding. "I'll just keep an old note handy so I'll be able to see it if it happens again."<br>
        "When it happens again," <<name $g.merchant>> says, taking a sip of <<their $g.merchant>> wine. "It'll happen again."
    <</if>>
    <br>
<</if>>
<br>
Folding up the note you brought, <<name $g.merchant>> slips it into a jacket pocket. <br>
"I'll take this," <<they $g.merchant>> says. "If they got sloppy, maybe I can use it to find them."<br>
Draining <<their $g.merchant>> wine, <<they $g.merchant>> slips out of the booth an rises to <<their $g.merchant>> feet. "I need to get onto this. Enjoy the libations."
<p>
    As you sit there using the bread to dredge up the last of the honey and cheese,
    <<if $unit.player.isHasTrait('per_evil')>>
        you wonder if it's worth taking the other raiding jobs anyway. After all, you're a mercenary and you get paid either way. There's a good chance you can play both <<name $g.merchant>> and <<their $g.merchant>> rival off against one another and profit handsomely from doing so. At least for a while.
    <<elseif $unit.player.isHasTrait('per_honorable')>>
        you idly wonder if it's worth taking the jobs <<name $g.merchant>>'s rival is going to send your way. It wasn't ever stated that <<they $g.merchant>> was hiring you exclusively. However, that does appear to be the expectation. And you haven't at any point stated that you'd take whatever job came your way. Despite what <<rep $company.player>> does, you've always prided yourself in keeping your sense of honour. And now you'll have to decide what it really means.
    <<else>>
        you reflect on the fact that <<name $g.merchant>> seems certain <<their $g.merchant>> rival is going to keep sending you jobs. It certainly seems like you could make some quick money raiding both sides, but you can't be certain what the longer term repercussions of that would be.
    <</if>>
</p>


:: Event_a_merchant_s_revenge_an_unfortunate_report [nobr] {"position":"600,14225","size":"100,100"}
/* Variable Notes
mlang_merchantrevenge_questrival 1 = Player is aware of the rival. Will receive jobs from both
mlang_merchantrevenge_questrival 5 = Player has decided not to take jobs from rival
*/

<<dialogue $g.merchant>>
    You said this was urgent? How urgent, exactly?
<</dialogue>>
<<questimage "prince_of_cups.jpg">>

/*Set Player Drink*/
<<if $unit.player.isHasAnyTraitExact(['bg_farmer','bg_mercenary','bg_pirate','bg_seaman', 'bg_soldier', 'bg_thug', 'bg_unemployed', 'bg_wildman', 'bg_woodsman'])>>
    <<set _pdrink = 'tankard of mead'>>
<<elseif $unit.player.isHasAnyTraitExact(['bg_monk', 'bg_priest'])>>
    <<set _pdrink = 'cup of tea'>>
<<else>>
    <<set _pdrink = 'glass of wine'>>
<</if>>

When<<name $g.merchant>> finally arrives at <<lore location_princeofcups>> <<they $g.merchant>> appear harried, and gesture curtly to the wait staff, who hurriedly bring over the usual amphora of wine for <<them $g.merchant>> and another _pdrink for you.<br>
"All right," <<they $g.merchant>> says. "What's the emergency?"<br>
<<if $unit.player.isHasTrait('per_slow')>>
    "I raided one of your caravans."
<<elseif $unit.player.isHasTrait('per_smart')>>
    "I received a note asking me to attack one of your caravans—and I think it was meant to look like a note from you."
<<else>>
    "I got a job attacking a caravan—one of your caravans."
<</if>>
<br>
<<Their $g.merchant>> face stills. "And you did it?" <<they $g.merchant>> asks.<br>
"I didn't know it was yours," you say defensively. "Actually I still don't, but I think it was, right?"<br>
You slide the documents over the table towards <<them $g.merchant>>, who takes them and glances down, <<their $g.merchant>> face blanching.<br>
<<if $unit.player.isHasTrait('per_smart')>>
    "And you say you got a note that looked like one of mine?"<br>
    "Yes. Nice paper, expensive ink, unsigned. Said time was of the essence. The hand was a bit different, but that didn't mean it wasn't you."
<<else>>
    "Did someone tell you about my caravan specifically? It's not your normal thing, even with pay."<br>
    You nod. "I got a note. Looked like yours."
<</if>>
"Do you bring it?"<br>
Shoving a slice of fig into your mouth, you reach into your bag and pull out a folded sheet of parchment and slide it across the table. Unfolding it, <<name $g.merchant>> examines the message, <<their $g.merchant>> jaw clenching as their eyes dart over it. Turning it over, they examine the map.<br>
<<if $unit.player.isHasTrait('per_smart')>>
    "All right," <<they $g.merchant>> says, putting the note down. "If it's not in my hand, then it's not from me, got it?"
<<else>>
    "All right," <<they $g.merchant>> say with a sigh, placing the parchment down in front of you and turning it around so you can read the text. Taking out another sheet and lifting out a pen and inkwell <<they $g.merchant>> writes out the message again. "You see how that's not my writing?" <<they $g.merchant>> asks.
    <<if $unit.player.isHasTrait('per_slow')>>
        It takes a while for <<them $g.merchant>> to explain it to you, but an hour or so later you feel you're going to be able to recognise any more fake letters that get sent to you.
    <<else>>
        Laid out side by side as they are, the differences are obvious.<br>
        "Yeah, I see it," you say, nodding. "I'll just keep an old note handy so I'll be able to see it if it happens again."<br>
        "When it happens again," <<name $g.merchant>> says, taking a sip of <<their $g.merchant>> wine. "It'll happen again."
    <</if>>
    <br>
<</if>>
<br>
Folding up the note you brought, <<name $g.merchant>> slips it into a jacket pocket. <br>
"I'll take this," <<they $g.merchant>> says. "If they got sloppy, maybe I can use it to find them. You're going to get more of these," <<they $g.merchant>> adds seriously. "Can I trust that you won't take those?"

<<choose>>
<<opt "Of course not (Truth)">>

    "Of course not," you say easily. "I don't see them wining and dining me, after all."<br>
    <<name $g.merchant>> smiles. "I suppose not," <<they $g.merchant>> says, slipping out of the booth and rising to <<their $g.merchant>> feet. "I'll keep sending work your way. And if I do figure out who's behind this, you may find yourself with some lucrative merchandise to sell."<br>
    <<if $unit.player.isHasTrait('per_slow')>>
        "You mean, you'll let me take them as sl—"<br>
        "New indentured servants," <<name $g.merchant>> says, interrupting you.<br>
        "Oh. Right."
    <<else>>
        "I look forward to meeting my new employees," you say, raising your _pdrink towards <<name $g.merchant>>.
    <</if>>
    <<run setup.qc.VarSet('mlang_merchantrevenge_questrival', '5', -1).apply($gQuest)>>

<<opt "Of course not (Lie)">>

    "Of course not," you say easily. "I don't see them wining and dining me, after all."<br>
    <<name $g.merchant>> smiles. "I suppose not," <<they $g.merchant>> says, slipping out of the booth and rising to <<their $g.merchant>> feet. "I'll keep sending work your way. And if I do figure out who's behind this, you may find yourself with some lucrative merchandise to sell."<br>
    <<if $unit.player.isHasTrait('per_slow')>>
        "You mean, you'll let me take them as sl—"<br>
        "New indentured servants," <<name $g.merchant>> says, interrupting you.<br>
        "Oh. Right."
    <<else>>
        "I look forward to meeting my new employees," you say, raising your _pdrink towards <<name $g.merchant>>.
    <</if>>
    <<run setup.qc.VarSet('mlang_merchantrevenge_questrival', '1', -1).apply($gQuest)>>

<<optif $unit.player.isHasAnyTraitExact(["per_cautious", "per_frugal", "per_honorable"])>>
<<opt "It's not in my interest to work against you">>

    "You've already hired me on a longer term basis," you say with a shrug. "I'm not throwing that away for a small bribe."<br>
    <<name $g.merchant>> eyes you carefully. "What about a big one?"<br>
    <<if $unit.player.isHasTrait('per_honorable')>>
        "It would have to be exceptionally large for me to go back on my word."
    <<else>>
        You sip your _pdrink and grin. "I don't know. They haven't offered me one yet."
    <</if>>
    <br>
    "I see. Well. I guess I'd better get a move on then. If I do figure out who's behind this, you may find yourself with some lucrative merchandise to sell."<br>
    <<if $unit.player.isHasTrait('per_slow')>>
        "You mean, you'll let me take them as sl—"<br>
        "New indentured servants," <<name $g.merchant>> says, interrupting you.<br>
        "Oh. Right."
    <<else>>
        "I look forward to meeting my new employees," you say, raising your _pdrink towards <<name $g.merchant>>.
    <</if>>
    <<run setup.qc.VarSet('mlang_merchantrevenge_questrival', '5', -1).apply($gQuest)>>

<<optif $unit.player.isHasAnyTraitExact(["per_evil", "per_lavish"])>>
<<opt "What would you pay me not to?">>
    "What would you pay me not to?" you ask with a grin.<br>
    "I wouldn't," <<name $g.merchant>> says cooly. "But I wouldn't send any further work your way if you did."<br>
    "Is that a threat?" you ask.<br>
    "No more than what you asked," <<name $g.merchant>> says with a shrug. "Consider it a statement of intent." Nodding <<their $g.merchant>> head to you, <<they $g.merchant>> slips out of the booth and leaves. Moments later, there is a cough at your elbow as the waiter presents you with the bill.
    <<run setup.qc.Money(-50).apply($gQuest)>>
    <<run setup.qc.VarSet('mlangmerchantprinceflirt', '0', -1).apply($gQuest)>>
    <<run setup.qc.VarSet('mlang_merchantrevenge_questrival', '1', -1).apply($gQuest)>>

<<opt "I'll make the decision that's best for my company">>
    "I'll have to make the decision that's best for my company."<br>
    <<name $g.merchant>> nods. "I can respect that. Let me put it this way then. Assuming you consider both myself and my rivals equal threats, especially in the absence of solid information telling you otherwise, perhaps ask which of us is willing to be seen with you in public and is therefore going to be more useful as contact down the line if things go well."<br>
    "That's a very one sided argument," you note.<br>
    "And if you were to meet the person who sent you the fake note, maybe they'd be able to make their pitch do you. Assuming they cared to."<br>
    "And you're convinced they wouldn't?"
    <<name $g.merchant>> takes a long drink from their cup. "There's a certain type of merchant in this city who likes to pretend that people who aren't like them don't exist. Or at least, they don't exist other than to serve the 'real' people. Them. I can't tell you for certain that this person is one of those. But then how they've interacted with you so far, I'd be surprised if they weren't."<br>
    Draining <<their $g.merchant>> cup, <<they $g.merchant>> slip out of the booth and gesture to a waiter, handing him some gold to cover the bill. "Do right by me and I'll do right by you," <<they $g.merchant>> say. "And if I find out who is behind all this mess, you may find yourself with some lucrative merchandise to sell."<br>
    <<if $unit.player.isHasTrait('per_slow')>>
        "You mean, you'll let me take them as sl—"<br>
        "New indentured servants," <<name $g.merchant>> says, interrupting you.<br>
        "Oh. Right."
    <<else>>
        "I look forward to meeting my new employees," you say, raising your _pdrink towards <<name $g.merchant>>.
    <</if>>
    <<run setup.qc.VarSet('mlang_merchantrevenge_questrival', '1', -1).apply($gQuest)>>

<<optif setup.qres.VarLte("mlangmerchantprinceflirt", "0").isOk($gQuest)>>
<<opt "And completely give up my chances of getting into your pants? Never.">>

    <<name $g.merchant>> quirks an eyebrow. "And is that what's going to save my caravans? The fact that you think you're going to get into my trousers?"<br>
    "Of course not. Mostly it's fact that you're paying me. And you treat me like a person. The fact that you're hot is just a bonus. As for actually getting into your pants, a <<girl $unit.player>> can dream, right?"<br>
    A brief smile flashes across <<name $g.merchant>>'s face. "Dreams are wonderful things," <<they $g.merchant>> says. "And who knows? Sometimes they even come true." Winking at you, <<they $g.merchant>> slips out of the booth and heads out the door. Moments later, there is a cough at your elbow as the waiter presents you with the bill.
    <<run setup.qc.Money(-50).apply($gQuest)>>
    <<run setup.qc.VarSet('mlangmerchantprinceflirt', '1', -1).apply($gQuest)>>
    <<run setup.qc.VarSet('mlang_merchantrevenge_questrival', '5', -1).apply($gQuest)>>

<<optif setup.qres.VarGte("mlangmerchantprinceflirt", "1").isOk($gQuest)>>
<<opt "Just when we have a good thing going? Why would I mess that up?">>
    "Money, usually," <<they $g.merchant>> says seriously. "Or the promise of power. Those are the usual reasons."<br>
    "Well, I'm not a usual person."<br>
    <<name $g.merchant>> smiles. "That you aren't. And if we weren't in public I'd show you exactly how much I value that. I'll see you soon. And in the meantime, I'll keep sending work your way. If I find out who is behind all this mess, you may find yourself with some lucrative merchandise to sell."<br>
    <<if $unit.player.isHasTrait('per_slow')>>
        "You mean, you'll let me take them as sl—"<br>
        "New indentured servants," <<name $g.merchant>> says, interrupting you.<br>
        "Oh. Right."
    <<else>>
        "I look forward to meeting my new employees," you say, raising your _pdrink towards <<name $g.merchant>>.
    <</if>>
    <<run setup.qc.VarSet('mlang_merchantrevenge_questrival', '5', -1).apply($gQuest)>>
<</choose>>


:: Event_a_merchant_s_revenge_complications [nobr] {"position":"850,14225","size":"100,100"}
<<dialogue $g.merchant>>
    All right. What's all this about that's so urgent?
<</dialogue>>
<<questimage "prince_of_cups.jpg">>

/*Set Player Drink*/
<<if $unit.player.isHasAnyTraitExact(['bg_farmer','bg_mercenary','bg_pirate','bg_seaman', 'bg_soldier', 'bg_thug', 'bg_unemployed', 'bg_wildman', 'bg_woodsman'])>>
    <<set _pdrink = 'tankard of mead'>>
<<elseif $unit.player.isHasAnyTraitExact(['bg_monk', 'bg_priest'])>>
    <<set _pdrink = 'cup of tea'>>
<<else>>
    <<set _pdrink = 'glass of wine'>>
<</if>>
<p>
    The smile on <<name $g.merchant>>'s face fades as you slide the note you'd received across the table.<br>
    "I didn't send you that," <<they $g.merchant>> says, frowning.<br>
    You remain silent, enjoying your _pdrink as a server brings over a platter of bread, preserved olives, goat cheese and cured sausages from Cathay, before stepping courteously away.<br>
    <<if $unit.player.isHasTrait('per_smart')>>
        "I didn't think you did," you say when you're alone at the table again. "I thought you'd want to know."
    <<else>>
        "I wasn't sure, but it didn't feel safe to go in without checking."
    <</if>>
    <br>
    <<name $g.merchant>> sights and slumps back into the padded leather of the booth. "It looks like one of my rivals is attempting to use you against me. I should have expected this."
</p>

<<choose>>
<<opt "Try to console them">>
    <<if $unit.player.getSpeech() == setup.speech.bold>>
        "Yeah, but so what? Now you know."<br>
    <<elseif $unit.player.getSpeech() == setup.speech.cool>>
        "What are you going to do about it then?"<br>
    <<else>>
        "Maybe. They could just be sending notes to every mercenary company in the area."<br>
    <</if>>
    <<name $g.merchant>> takes a deep breath, fortifies <<themselves $g.merchant>> with a hearty swig of wine and sits up. "You're right. I'm going to keep the note. It might help me figure out exactly which of them is doing this." Popping an olive into <<their $g.merchant>> mouth, <<they $g.merchant>> chews thoughtfully as <<they $g.merchant>> stares at the note thoughtfully.<br>
    "I'll check this against the ciphered documents you gave me earlier. Thank you for telling me. I'll make sure I send more work your way. And if I do find out who's behind this, you may find yourself with some lucrative merchandise to sell."<br>
    <<if $unit.player.isHasTrait('per_slow')>>
        "You mean, you'll let me take them as sl—"<br>
        "New indentured servants," <<name $g.merchant>> says, interrupting you.<br>
        "Oh. Right."
    <<else>>
        "I look forward to meeting my new employees," you say, raising your _pdrink towards <<name $g.merchant>>.
    <</if>>
    <<if setup.qres.VarEqual("mlangmerchantprinceflirt", "1").isOk($gQuest)>>
        <br>
        "I really want to kiss you right now," <<name $g.merchant>> says with a tight grin, raising <<their $g.merchant>> wine goblet towards you. "Possibly more. Ah well. Until next time."
    <</if>>

<<opt "Reassure them">>
    <<if $unit.player.getSpeech() == setup.speech.bold>>
        "Okay," you say, helping yourself to smokey, fatty sausage. "What next?"<br>
        <<name $g.merchant>> takes a deep breath, fortifies <<themselves $g.merchant>> with a hearty swig of wine and sits up. "
    <<elseif $unit.player.getSpeech() == setup.speech.cool>>
        "Why? You're not the boss of them."<br>
        <<name $g.merchant>> takes a deep breath, fortifies <<themselves $g.merchant>> with a hearty swig of wine and sits up. "You're right.
    <<elseif $unit.player.getSpeech() == setup.speech.witty>>
        "Well, maybe if you find someone who can do time magic, you can sort out. Actually I hear there's a seer in the vales who can see the future. Maybe check with them?"<br>
        <<name $g.merchant>> stares at you for a long moment, mouth open. Then <<they $g.merchant>> laughs. "Okay, that's fair.
    <<else>>
        "Well it didn't work, so what's the problem?"<br>
        <<name $g.merchant>> stares at you for a long moment, mouth open. Then <<they $g.merchant>> laughs. "Okay, that's fair.
    <</if>>
    I'm going to keep the note. It might help me figure out exactly which of them is doing this." Popping an olive into <<their $g.merchant>> mouth, <<they $g.merchant>> chews thoughtfully as <<they $g.merchant>> stares at the note thoughtfully.<br>
    "I'll check this against the ciphered documents you gave me earlier. Thank you for telling me. I'll make sure I send more work your way. And if I do find out who's behind this, you may find yourself with some lucrative merchandise to sell."<br>
    <<if $unit.player.isHasTrait('per_slow')>>
        "You mean, you'll let me take them as sl—"<br>
        "New indentured servants," <<name $g.merchant>> says, interrupting you.<br>
        "Oh. Right."
    <<else>>
        "I look forward to meeting my new employees," you say, raising your _pdrink towards <<name $g.merchant>>.
        <<if setup.qres.VarEqual("mlangmerchantprinceflirt", "1").isOk($gQuest)>>
            <br>
            "I really want to kiss you right now," <<name $g.merchant>> says with a tight grin, raising <<their $g.merchant>> wine goblet towards you. "Possibly more. Ah well. Until next time."
        <</if>>
    <</if>>

<<optif setup.qres.VarLte("mlangmerchantprinceflirt", "0").isOk($gQuest)>>
<<opt "Flirt with them. And reassure them, but mostly flirt.">>

    <<if $unit.player.getSpeech() == setup.speech.friendly>>
        "Sure, but last I checked, they didn't buy me drinks and sit delectably across the table from me with a whole 'look don't touch' thing going on."<br>
        <<name $g.merchant>> quirks an eyebrow. "And is that all that saved my caravan? The fact that you'd like to...touch?"<br>
        "Of course not. Mostly it was the fact that you're paying me. And you treat me like a person. The fact that you're hot is just a bonus."<br>

    <<elseif $unit.player.getSpeech() == setup.speech.bold>>
        "Well, unless they start buying be lunch and showing more skin than you do, they're out of luck."<br>
        <<name $g.merchant>> quirks an eyebrow. "And is that what saved my caravan? The fact that you like free food and my...physique?"<br>
        "Of course not. Mostly it was the fact that you're paying me. And you treat me like a person. The fact that you're hot is just a bonus."<br>

    <<elseif $unit.player.getSpeech() == setup.speech.cool>>
        You shrug. "I like you," you tell <<them $g.merchant>>. "I don't know them at all."<br>
        <<name $g.merchant>> quirks an eyebrow. "And is that all that saved my caravan? The fact that you 'like' me?"<br>
        "Sure. You're paying me and you treat me like person. You being sexy as fuck is just a bonus."<br>

    <<elseif $unit.player.getSpeech() == setup.speech.witty>>
        "And if they were to wine and dine me the way you have, maybe they'd have had more luck."<br>
        <<name $g.merchant>> quirks an eyebrow. "And is that all that saved my caravan? The free food?"<br>
        "Of course not. Mostly it was the fact that you're paying me. And you treat me like a person. The fact that you're hot is just a bonus."<br>

    <<elseif $unit.player.getSpeech() == setup.speech.debauched>>
        "I like to know who I'm dealing with," you say with a shrug. "Although it does help when they're as sexy as you are."<br>
        <<name $g.merchant>> quirks an eyebrow. "And is that all that saved my caravan? The fact that you like my body?"<br>
        "Of course not. Mostly it was the fact that you're paying me. And you treat me like a person. The fact that you're hot is just a bonus."<br>
    <</if>>
    <<They $g.merchant>> coughs and pours <<themselves $g.merchant>> another goblet of wine. "Well, um. That's actually one of the nicest things anyone's said to me recently. Uh. Thank you. I'll uh, keep this note for now. Maybe it'll help me figure out exactly which of my rivals is doing this. An uh... maybe we can pick up the specifics of this conversation later?"<br>
    <<They $g.merchant>>'s cute when <<they $g.merchant>>'s flustered. Smiling your acquiescence, you get up from the table and make for the door. Turning back, you catch <<them $g.merchant>> looking at you and give them a wink before you leave. Best to go while you still have <<their $g.merchant>> attention.
    <<run setup.qc.VarSet('mlangmerchantprinceflirt', '1', -1).apply($gQuest)>>

<<opt "Extort more money for your cooperation">>
    "Maybe" you say, taking a sip from your _pdrink. "The point is I turned down work to let you know, and I trust that's not going to go unnoticed."<br>
    A series of emotions flicker across <<their $g.merchant>>'s face faster than you can decipher them, and then <<they $g.merchant>> smiles broadly. "Of course not," <<they $g.merchant>> says, folding up the note and putting it into <<their $g.merchant>> jacket pocket. When <<their $g.merchant>> hand returns to the table, it's clutching a small pouch of coin. "For your services today. And I'll ensure there's plenty more work coming your way in the future."<br>
    With a smile and a nod, you take the coin pouch and leave <<lore location_princeofcups>>. Free food and drink is all very well and good, but business is business, and you have a company to run.
    <<run setup.qc.Money(500).apply($gQuest)>>
    <<run setup.qc.VarSet('mlangmerchantprinceflirt', '0', -1).apply($gQuest)>>
<</choose>>


:: Event_a_merchant_s_revenge_payback_is_sweet [nobr] {"position":"1100,14225","size":"100,100"}
<<include "Opportunity_a_merchant_s_revenge_payback_is_sweet">>


:: Event_a_merchant_s_revenge_visiting_the_captured [nobr] {"position":"100,14350","size":"100,100"}
<<include 'Opportunity_a_merchant_s_revenge_visiting_the_captured'>>


:: Event_a_most_noble_extortion [nobr] {"position":"600,16725","size":"100,100"}
<<include "Quest_a_most_noble_extortion">>


:: Event_a_name [nobr] {"position":"850,16725","size":"100,100"}
<<include "Opportunity_a_name">>


:: Event_a_nympho_elf [nobr] {"position":"725,20600","size":"100,100"}
Sitting in your office you are pulled from your paperwork by <<rep $g.alerter>>
<<dialogue $g.alerter>>
    Hey boss, you might want to check out the situation at the front gates.
<</dialogue>>

Going to see what is happening you are met by an elven <<woman $g.nymphoelf>> who seems to be wondering around looking for something. Upon realizing that you are present <<they $g.nymphoelf>> rushes up to you.
<<dialogue $g.nymphoelf>>
    Oh thank god, please tell me you're in charge around here.
<</dialogue>>
<<They $g.alerter>> begins to strip off <<their $g.nymphoelf>> pants before you can even reply.
<<if $g.nymphoelf.isHasDick()>>
    <<Their $g.nymphoelf>> cock throbbing hard and <<theirs $g.nymphoelf>> <<uhole $g.nymphoelf>> bare and ready.
<<else>>
    Their pussy dripping with anticipation.
<</if>>
<<dialogue $g.nymphoelf>>
    I was told there was a band of slavers here who go by <<rep $company.player>>. I also heard they fuck slaves so good they never want to leave.
<</dialogue>>
<<They $g.nymphoelf>> stands there waiting expectedly.

<<choose>>

<<opt "Fuck the horny elf yourself">>

    No point in keeping the horny elf waiting. You pull out your <<udickorstrap $unit.player>>, slapping it on the elf's <<uhole $g.nymphoelf>>. You spit onto <<their $g.nymphoelf>> hole, rubbing it in, before grabbing <<them $g.nymphoelf>> by <<their $g.nymphoelf>> <<uwaist $g.nymphoelf>> and sliding in.

    <<if $g.player.getSkill(setup.skill.sex) >= 50>>
        After several minutes of expertly fucking their <<uhole $g.nymphoelf>> you feel it clamp down around your <<udickorstrap $unit.player>>.
        <<dialogue $g.nymphoelf>>
            Oh fuck! I'm going to come! Can I come? Can I please come!?
        <</dialogue>>
        <<choose>>
        <<opt "Don't you dare come!">>
            The elf grits <<their $g.nymphoelf>> teeth and clenches <<them $g.nymphoelf>> fists.
            You continue to ruthlessly fuck them with your <<udickorstrap $unit.player>> as they tense their whole body trying not to come.
            After awhile of enjoying them struggling to hold back, you decide they have been good enough and give them permission to release.
            <<dialogue $g.nymphoelf>>
                Oh thank you, thank you!
            <</dialogue>>
            <<They $g.nymphoelf>> screams, <<their $g.nymphoelf>> eyes rolling into the back of <<their $g.nymphoelf>> head, <<their $g.nymphoelf>> whole body shuddering.
            <<if $g.nymphoelf.isHasDick()>>
            <<Their $g.nymphoelf>> <<ugenital $g.nymphoelf>> releasing wave after wave of <<ucum $g.nymphoelf>>
            <<else>>
            <<Their $g.nymphoelf>> <<ugenital $g.nymphoelf>> leaking <<ucum $g.nymphoelf>>
            <</if>>
            onto the floor as
            the orgasm sweeps through <<them $g.nymphoelf>>. Exhausted they slide off your <<udickorstrap $unit.player>> letting out one final whimper.
            <<dialogue $g.nymphoelf>>
                I think I'm going to love it here...
            <</dialogue>>
            <<run setup.qc.Slave('nymphoelf', "a|was an elven slut.", undefined).apply($gQuest)>>
            <<run setup.qc.Trait('nymphoelf', setup.trait.training_obedience_basic).apply($gQuest)>>
        <<opt "Come! Come on this dick!">>
            <<They $g.nymphoelf>> moans loudly, <<their $g.nymphoelf>> body shuddering. <<Their $g.nymphoelf>> <<ugenital $g.nymphoelf>>
            <<if $g.nymphoelf.isHasDick()>>
            squirts a load of <<ucum $g.nymphoelf>> onto the floor as <<they $g.nymphoelf>> cums. 
            <<else>>
            leaks <<ucum $g.nymphoelf>> onto the floor as <<they $g.nymphoelf>> climaxes. 
            <</if>>
            Satisfied they slide off your <<udickorstrap $unit.player>>, whispering in a daze.
            <<dialogue $g.nymphoelf>>
                I think I'm going to like it here...
            <</dialogue>>
            <<run setup.qc.Slave('nymphoelf', "a|was an elven slut.", undefined).apply($gQuest)>>
            <<run setup.qc.Trait('nymphoelf', setup.trait.training_obedience_basic).apply($gQuest)>>
        <</choose>>

    <<else>>
        After a half an hour of sloppily fucking their <<uhole $g.nymphoelf>> they pull themselves away from you in frustration.
        <<dialogue $g.nymphoelf>>
            Is this what passes for a good fuck around here?! I would be better off going back to getting passed around my village. I'm out of here.
        <</dialogue>>
        <<They $g.nymphoelf>> begin to walk away, not even bothering to collect <<their $g.nymphoelf>> pants.
        <<choose>>
        <<opt "You're not going anywhere...">>

            You order <<name $g.alerter>> to go fetch the elf, they will learn that <<rep $company.player>> is in the business of breaking in slaves, not giving out free fucks.
            <<run setup.qc.Slave('nymphoelf', "a|was an elven slut.", undefined).apply($gQuest)>>
            <<run setup.qc.Ire('elf', 5).apply($gQuest)>>
        <<opt "Whatever, leave...">>
            You let them leave, your ego somewhat hurt by the rejection.
        <</choose>>
    <</if>>


<<opt "Get one of your slavers to fuck the horny elf">>
    No point in keeping the horny elf waiting. You order <<name $g.alerter>> to fuck them.
    <<dialogue $g.alerter>>
        With pleasure boss.
    <</dialogue>>
    <<They $g.alerter>> says, pulling out their <<udickorstrap $g.alerter>> and slapping it on the horny elf's <<uhole $g.nymphoelf>>. They spit onto <<their $g.nymphoelf>> hole, rubbing it in, before grabbing <<them $g.nymphoelf>> by <<their $g.nymphoelf>> <<uwaist $g.nymphoelf>> and sliding in.
    After several minutes of expertly fucking their <<uhole $g.nymphoelf>> you see the elf's face go blank for a moment, <<name $g.alerter>> beginning to pound them harder in response.
    <<dialogue $g.nymphoelf>>
        Oh fuck! I'm going to come! Can I come? Can I please come!?
    <</dialogue>>
    <<dialogue $g.alerter>>
        Come! Come on this dick you <<uadjbad $g.nymphoelf>> elf!
    <</dialogue>>
    <<They $g.nymphoelf>> moans loudly, <<their $g.nymphoelf>> body shuddering. <<Their $g.nymphoelf>> <<ugenital $g.nymphoelf>>
    <<if $g.nymphoelf.isHasDick()>>
    squirts a load of <<ucum $g.nymphoelf>> onto the floor as <<they $g.nymphoelf>> comes.
    <<else>>
    leaks pussyjuice onto the floor as <<they $g.nymphoelf>> climaxes.
    <</if>>
    Satisfied they slide off of <<reps $g.alerter>> <<udickorstrap $g.alerter>>, whispering in a daze.
    <<dialogue $g.nymphoelf>>
        I think I'm going to like it here...
    <</dialogue>>
    <<run setup.qc.Slave('nymphoelf', "a|was an elven slut.", undefined).apply($gQuest)>>
    <<run setup.qc.Trait('nymphoelf', setup.trait.training_obedience_basic).apply($gQuest)>>
    <<run setup.qc.Ire('elf', 2).apply($gQuest)>>
<<opt "Take the chance to enslave the gullible elf">>
    You motion to <<name $g.alerter>> to grab the stupid elf, its not every day that the slaves come to you so willingly.
    <<dialogue $g.nymphoelf>>
        Huh? Where are we going? Is <<they $g.alerter>> going to fuck me? Do you have rooms you do it in?
    <</dialogue>>
    The elf drones on while getting dragged away into your fort. If <<they $g.nymphoelf>> doesn't realise <<their $g.nymphoelf>> fate now, <<they $g.nymphoelf>> will soon.
    <<run setup.qc.Slave('nymphoelf', "a|was an elven slut.", undefined).apply($gQuest)>>
    <<run setup.qc.Ire('elf', 5).apply($gQuest)>>
<<opt "Send the elf away.">>
    The elf's face suddenly turns into a snarl of pain and anger.
    <<dialogue $g.nymphoelf>>
        Really?! You don't want to fuck this?
    <</dialogue>>
    The elf wiggles their <<uhole $g.nymphoelf>> side to side alluringly.
    <<dialogue $g.nymphoelf>>
        Fine! Suit yourself moron!
    <</dialogue>>
    <<They $g.nymphoelf>> screams out, storming off.
    Your deeds of refusing to enslave a gullible elf at least earned you some good words,
    but it is worth it?
    <<run setup.qc.Favor('elf', 20).apply($gQuest)>>
<</choose>>


:: Event_a_permanent_solution [nobr] {"position":"600,16475","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
It has been several weeks ever since that damnable <<rep $g.boss>> got hold
of <<yourrep $g.slaver>>. It will simply not do for you to keep paying
<<their $g.slaver>> "accomodation costs", and a more permanent solution would
be desirable.
</p>

<p>
Given that <<reps $g.slaver>> life is at stake, however, a full-on assault would
not be advisable. No, this is a war where you must use subterfuge and your
connections to win. Consulting <<yourrep _u>>, it seems if you truly wish to
end this problem once and for all, you will simply have to bankrupt the
slaving company to the ground...
</p>


:: Event_a_very_special_wine_order2 [nobr] {"position":"600,14350","size":"100,100"}
<<dialogue $g.wineagent>>
I'm looking for an...employee with special qualities. I understand you can help me obtain them?
<</dialogue>>

<p>The late morning finds you in your office, bored and with little to do except paperwork that you're putting off until at least this afternoon. The day is overcast and cloudy, and with nothing else to do you
<<set _eq = $unit.player.getGenitalCovering()>>
<<if _eq>>
  <<ustripverb $unit.player _eq>> revealing
<<else>>
  reach down to play with
<</if>>

your <<ugenital $unit.player>>.

<<set _slave = $g.slave>>

<<if _slave>>
Crooking your finger at <<name _slave>> you sit down on the edge of your chair and spread your legs.<br>
"Get on it," you say, pointing at your <<ugenital $unit.player>>.<br>
<<if $unit.player.isHasDick()>>
<<name _slave>> takes your cock into <<their _slave>> mouth and you lean back, willing yourself to relax and let loose, when there is a knock on your door. Looking up you see a <<therace $g.wineagent>> <<woman $g.wineagent>> who is looking at you with interest.<br>
"Don't stop on my account," <<they $g.wineagent>> says, leaning against the door. "I'm just here to talk business and I <i>like</i> to watch."<br>
<<if $unit.player.isHasTrait('per_chaste')>>
A flush creeps up your face at your leering audience. Shoving <<name _slave>> away you pull back behind your desk and grab for you clothes.<br>
"That's fine," you say. "Who are you?"
<<elseif $unit.player.isHasTrait('per_submissive')>>
You freeze, a trickle of piss seeping out of your cock and down into <<name _slave>>'s eager throat. For a moment you're unsure of what to do and then give in and let go, the gentle sucking on your penis draining you and relieving your bladder. When you're done, <<name _slave>> continues to suckle, familiar enough with you to know what follows a drink.<br>
"Beautiful," the <<woman $g.wineagent>> says, entering the room and taking the seat opposite yours. "I do love seeing such devotion."<br>
For a moment you aren't sure if she's talking about you or <<name _slave>> but decide it doesn't matter. "Who are you, exactly?"
<<elseif $unit.player.isHasTrait('per_lustful')>>
Grinning, you spread your legs wider, grab the back of <<name _slave>>'s neck and pull <<them _slave>> into your crotch. "Great, I love an audience."<br>
There's a spin...a rush.... a vibration in your cock when you piss normally. The feeling of liquid leaving your aptly named piss slit at high speed. When there's a slave on your dick drinking you down, the feeling is different. Not really there. Just the deflation of pressure in your belly and the knowledge that <<name _slave>> is drinking your piss.
<br><br>
You start to stiffen before you're fully done, but you're empty enough that it doesn't bother you. As <<name _slave>> starts bobbing up and down your shaft, you look up at the <<therace $g.wineagent>> by the door.<br>
"Well, now that I've drained my bladder, why don't you come in and we can talk. This could take a while."<br>
The <<woman $g.wineagent>> smiles and walks into the room. "Can I sit on the desk? I'll get a better view there."<br>
You shrug. "Be my guest. Who are you anyway?"
<<elseif $unit.player.isHasTrait('per_sexaddict')>>
Grinning, you spread your legs wider, grab the back of <<name _slave>>'s neck and pull <<them _slave>> into your crotch. "Great, I love an audience."<br>
There's a spin...a rush.... a vibration in your cock when you piss normally. The feeling of liquid leaving your aptly named piss slit at high speed. When there's a slave on your dick drinking you down, the feeling is different. Not really there. Just the deflation of pressure in your belly and the knowledge that <<name _slave>> is drinking your piss.
<br><br>
You start to stiffen before you're fully done, but you're empty enough that it doesn't bother you. As <<name _slave>> starts bobbing up and down your shaft, you look up at the <<therace $g.wineagent>> by the door.<br>
"Well, now that I've drained my bladder, why don't you come in and we can talk. Unless you want to join in?"<br>
The <<woman $g.wineagent>> smiles and walks into the room. "I'm strictly a voyeur. Can I sit on the desk? I'll get a better view there."<br>
You shrug. "Be my guest. Who are you anyway?"
<<else>>
You fight the urge to push back to your desk and hide. Whoever this <<woman $g.wineagent>> is, <<they $g.wineagent>> clearly knows who you are and what business to run—and <<they $g.wineagent>>'s still here.<br>
"I'll just finish up then," you say. Closing your eyes you finish relaxing, and feel your piss start to flow into the eager suckling mouth of your slave, <<name _slave>>. <<They $g.slave>> gulp you down dutifully, and when your flow finally slows to a trickle, <<they $g.slave>> starts to nurse you to backhardness.
<<if $unit.player.isHasTrait('per_cruel')>>
You slap <<them _slave>> away from your crotch and push <<them _slave>> under your desk.<br>
"I'm working," you say bluntly. "Keep me hard but don't distract me."<br>
You smile as you feel <<name _slave>> get to work.
<<elseif $unit.player.isHasTrait('per_kind')>>
You gently push <<them _slave>> under your desk.<br>
"I'm working," you say. "Keep me hard but don't distract me."<br>
You smile as you feel <<name _slave>> get to work.
<<elseif $unit.player.isHasTrait('per_empath')>>
You gently push <<them _slave>> under your desk.<br>
"I'm working," you say. "Keep me hard but don't distract me."<br>
You smile as you feel <<name _slave>> get to work.
<<else>>
You push <<them _slave>> off your cock and snap your fingers, pointing under your desk.<br>
"I'm working," you say. "Get in there, keep me hard but don't distract me."<br>
<<name _slave>> scrambles to obey and you slide your chair in so that your crotch is back within range of <<their _slave>> mouth. You smile as you feel <<them _slave>> get to work.
<</if>>
<</if>>
<<else>>
<<name _slave>> presses <<their _slave>> lips to your pussy, doing <<their _slave>> best to not make a mess as you relax. Still, <<they _slave>> ends up with a lot of piss over <<their _slave>> face.<br>
"You're cleaning up anything you miss," you remind <<them _slave>>.<br>
"Is that why you've gone with stone floors and no rugs?"<br>
Looking up you see a <<therace $g.wineagent>> <<woman $g.wineagent>> who is looking at you with interest.<br>
"Yes," you say, arching your eyebrows. "And who exactly are you?"
<</if>>
<<else>>
<<set _slave = setup.getUnit({job: 'slave'})>>
<<if $unit.player.isHasDick()>>
<<name _slave>> leans forward and starts to suck on your <<udick $unit.player>>, <<their _slave>> lips sliding down over your manhood as <<they _slave>> attempts to get down to the base of your dick.<br>
"Oh, that's nice," you sigh, as lean your head back against the back of your chair, eyes closed as you push <<name _slave>> further and further down on your cock.<br>
"Yes it is."<br>
Looking up you see a <<therace $g.wineagent>> <<woman $g.wineagent>> who is looking at you with interest.<br>
"Don't stop on my account," <<they $g.wineagent>> says, leaning against the door. "I'm just here to talk business and I <i>like</i> to watch."<br>
<<if $unit.player.isHasTrait('per_chaste')>>
You close your legs so suddenly that your knees slam into <<name _slave>>'s head. Thankfully the pain makes <<them _slave>> cry out, rather than bite down, and you pull your cock out of their mouth, grabbing at your clothing to cover your crotch.<br>
"Who the hell are you?" you ask as you push <<name _slave>> away and drag your chair in under the desk so that your lower body is hidden from the <<woman $g.wineagent>>'s gaze.
<<elseif $unit.player.isHasTrait('per_submissive')>>
You feel the familiar flush creep up your belly, over your chest and tint your cheeks. It's embarrassing how easily you get embarrassed. It's also embarrassing how horny it makes you.<br>
"All...all right," you say as you shove your cock further down <<name _slave>>'s throat, causing <<them _slave>> to cough and sputter around your girth. "Who are you again?"
<<elseif $unit.player.isHasTrait('per_lustful')>>
"I didn't plan to," you say as you scooch back to give <<them $g.wineagent>> a better view. "Who are you anyway?"
<<elseif $unit.player.isHasTrait('per_sexaddict')>>
"I didn't plan to," you say as you scooch back to give <<them $g.wineagent>> a better view. "Want to join in?"
The <<woman $g.wineagent>> smiles and walks into the room. "I'm strictly a voyeur. Can I sit on the desk? I'll get a better view there."<br>
You shrug. "Be my guest. Who are you anyway?"
<<else>>
You fight the urge to push back to your desk and hide. Whoever this <<therace $g.wineagent>> is, <<they $g.wineagent>> clearly knows who you are and what business to run—and <<they $g.wineagent>>'s still here.<br>
"I won't then," you say cheerfully. "Slave, show the nice <<woman $g.wineagent>> how you treat your <<Mistress $unit.player>>.<br>
<<name _slave>> redoubles their efforts as the <<therace $g.wineagent>> walks closer, seating herself on the side of your desk to maintian her view.<br>
"So," you say. "Who are you anyway?"<br>
<</if>>
<<else>>
<<name _slave>> leans forward and starts tonguing your pussy, aware that <<their _slave>> welfare depends on how well <<they _slave>> do.
"Oh yeah," you moan as you grind into their face. "You look so fucking nasty down there between by legs you little bitch."<br>
"Yes <<they _slave>> does."<br>
Looking up you see a <<therace $g.wineagent>> <<woman $g.wineagent>> who is looking at you with interest.<br>
"Don't stop on my account," <<they $g.wineagent>> says, leaning against the door. "I'm just here to talk business and I <i>like</i> to watch."<br>
<<if $unit.player.isHasTrait('per_chaste')>>
You close your legs so suddenly that your knees slam into <<name _slave>>'s head. Thankfully the pain makes <<them _slave>> cry out, rather than bite down, and <<they _slave>> don't lose their tongue. Shoving them away, you grab at your clothing to cover your crotch.<br>
"Who the hell are you?" you ask as you drag your chair in under the desk so that your lower body is hidden from the <<woman $g.wineagent>>'s gaze.
<<elseif $unit.player.isHasTrait('per_submissive')>>
You feel the familiar flush creep up your belly, over your chest and tint your cheeks. It's embarrassing how easily you get embarrassed. It's also embarrassing how horny it makes you.<br>
"All...all right," you say as you grind harder against <<their _slave>> mouth. "Who are you again?"
<<elseif $unit.player.isHasTrait('per_lustful')>>
"I didn't plan to," you say as you scooch back to give <<them $g.wineagent>> a better view. "Who are you anyway?"
<<elseif $unit.player.isHasTrait('per_sexaddict')>>
"I didn't plan to," you say as you scooch back to give <<them $g.wineagent>> a better view. "Want to join in?"
The <<woman $g.wineagent>> smiles and walks into the room. "I'm strictly a voyeur. Can I sit on the desk? I'll get a better view there."<br>
You shrug. "Be my guest. Who are you anyway?"
<</if>>
<</if>>
<</if>>
</p>
<p>"My name is <<name $g.wineagent>>, and I'm an procurement agent for <<lore location_princeofcups>>. "<br>
<<if $unit.player.isHasTrait('per_slow')>>
" What do you procure?" you ask.<br>
"Whatevever is needed. Wine. Food, employees and indentured servants."<br>
"Indentured servants?"<br>
"You might call them slaves.<br>
Oh. Suddenly you understand. "Well, I sell slaves," you say.<br>
"I know," she says with a smile. "That's why I'm here."
<<else>>
"And you're here for slaves."<br>
<<name $g.wineagent>> holds up a hand. "My client prefers the term 'indentured servants'. For purely legal reasons, you understand.<br>
You shrug. "If you like," you say. "I don't sell out my clients."<br>
<<They $g.wineagent>> smile. "I'm so very glad to hear that."
<</if>>
<br>
<<dialogue $g.wineagent>>
I do not have information on whether you visited the toilets during your visit to my client's establishment. But I need an...indentured servant who will be able to serve in that capacity. And I'm authorised to pay well.
<</dialogue>>
<<if $unit.player.isHasTrait('per_direct')>>
"You need a piss slave," you say flatly.<br>
<<name $g.wineagent>> sighs. "If you want to be crude about it, yes."<br>
"I like to keep things simple," you say <<uadv $unit.player>>. "Let's talk terms."
<<elseif $unit.player.isHasTrait('per_slow')>>
"You want to buy a piss slave?" you venture.<br>
<<name $g.wineagent>> sighs. "Yes. I want to buy a piss slave."<br>
"You want them to do anything else?"
<<else>>
"I can help with that."
<</if>>
<br>
"Excellent," <<name $g.wineagent>> says, pulling a piece of parchement from the inside of her coat. "I have our requirements—and payment offer—here. Have one of your...crew deliver the employee to their new workplace and you'll be paid on delivery. Just don't tell the guards."<br>
<<if $unit.player.isHasTrait('per_slow')>>
"I ain't that thick," you say with a chuckle.
<<name $g.wineagent>> smiles. "Glad to hear it. Well, thank you for your time"<br>
<<else>>
"Why would I do that?" you ask.<br>
"You'd be amazed how many other mercenary companies don't seem to understand that concept," <<name $g.wineagent>> says drily. "Well, thank you for your time."
<</if>>
<br>
<<if $unit.player.isHasTrait('per_chaste')>>
"And you for your business," you say. "I won't rise if that's all right by you."<br>
<<else>>
<<if $unit.player.isHasDick()>>
Beneath your desk the constant ministrations of your slave have been keeping you on edge the entire meeting and as <<name $g.wineagent>> stands to leave, <<name _slave>> redoubles <<their _slave>> efforts, sending you over the edge as you grip the edge of your desk and cry out in release as you shoot your load down <<their _slave>> throat.<br>
"Thank you for yours too, <<name $g.wineagent>>. I'll stay seated if that's all right by you."<br>
<<else>>
Beneath the desk the oral ministrations of <<name _slave>> have kept you dripping all through the meeting, and now they tip you over the edge as <<name _slave>> guzzles your pussyjuice.<br>
"Thank you for yours too, <<name $g.wineagent>>. I'll stay seated if that's all right by you."<br>
<</if>>
"I am disappointed, I won't lie," <<name $g.wineagent>> says. "But business is business. I'll see myself out."
<</if>>
</p>


:: Event_ambivalent_sleeping [nobr] {"position":"1100,12600","size":"100,100"}
<p>
You retired to your bedchamber late today, and it is already dark inside. Your slavers are already asleep in their <<uslavebed $g.slave>> by the time you come in, and <<yourrep $g.slave>> catches your eye, and you recall the <<man $g.slave>> still have not been fully broken yet.
The <<girl $g.slave>> sleeps nude, and while <<they $g.slave>> have a small blanket to ward off the cold, half <<their $g.slave>> <<ubody $g.slave>> remains bare.
</p>

<p>
You flick a candle, and the
dim light plays across <<their $g.slave>> <<uskin $g.slave>>.
<<if $g.slave.isHasTrait('breast_huge')>><<Their $g.slave>> massive boob on that side is slightly shifted by each breath
<<elseif $g.slave.isHasTrait('breast_large')>>
<<Their $g.slave>> breast on that side rises and falls with each breath
<<else>>That side of <<their $g.slave>> <<ubreasts $g.slave>>
rises and falls with each breath<</if>>.
<<They $g.slave>>'s sleeping soundly, <<their $g.slave>> breaths coming deep and slow. Most slaves where <<they $g.slave>> slave|is mentally are troubled by bad dreams, but the poor <<girl $g.slave>> is evidently too tired for that.
</p>


<<if $unit.player.isHasDick()>>
<<set _text = "Cum on <<their $g.slave>> face">>
<<else>>
<<set _text = "Squirt on <<their $g.slave>> face">>
<</if>>

<<choose>>

<<opt "Grope <<their $g.slave>> <<ubreasts $g.slave>>">>

<p>
<<Their $g.slave>> eyes fly open as <<they $g.slave>> feels someone groping <<them $g.slave>>.

<<if $g.slave.isHasTrait('breast_titanic')>>

You're hefting and massaging <<their $g.slave>> mass of breastflesh, playing with <<their $g.slave>> natural boob, making <<their $g.slave>> huge soft udder bounce and jiggle.

<<elseif $g.slave.isHasBreasts()>>

You've got <<their $g.slave>> whole tit in your hands, jiggling and squeezing the entire thing.

<<else>>

You're massaging and squeezing <<their $g.slave>> <<ubreasts $g.slave>>.

<</if>>

<<Their $g.slave>> face contorts with surprise and then outrage, but then <<they $g.slave>>
<<if !$g.slave.isCanSee()>>recognizes your familiar <<uscent $unit.player>> and
<</if>>
realizes whose <<uhand $unit.player>> it is that's taking liberties with
<<them $g.slave>>.
<<if $g.slave.isHasTrait('per_smart')>>
Though <<they $g.slave>>'s <<rep setup.trait.per_smart>>,
<<elseif $g.slave.isHasTrait('per_slow')>>
Though <<they $g.slave>>'s not dumb,
<<else>>
<<They $g.slave>>'s an idiot, and
<</if>>
in <<their $g.slave>> drowsy state <<they $g.slave>> can't figure out what to do.
<<They $g.slave>> settles for freezing submissively and letting you do what you like. You test <<their $g.slave>> compliance by
playing with <<their $g.slave>> nipple, pinching it hard enough to hurt. <<They $g.slave>> accepts the mammary abuse.
Satisfied, you leave <<their $g.slave>> to get back to sleep as best <<they $g.slave>> can.
</p>

<<run setup.qc.FriendshipWithYou('slave', -50).apply($gQuest)>>

<<opt _text>>

<p>
You stand over <<their $g.slave>>, quietly masturbating while watching <<them $g.slave>> sleep.

<<if $unit.player.isHasVagina()>>
You're on excellent terms with your cunt, and you know just what it takes to make yourself squirt. When you feel the heat building just right, you quickly straddle <<their $g.slave>> face without touching <<their $g.slave>>, angling yourself carefully and increasing the pace of your schlicking. In no time at all, a jet of femcum splashes onto <<their $g.slave>> face and down across <<their $g.slave>> <<ubreasts $g.slave>>.
<<else>>
You fancy yourself a bit of a marks<<man $unit.player>>,
and you don't feel the need to bend over <<them $g.slave>> to score good hits.
Your load comes in three main jets: the first hits <<them $g.slave>> on the nipple, the second tracks up <<their $g.slave>> sternum and throat, and the third splashes full across <<their $g.slave>> face as <<their $g.slave>> eyes fly open.
<</if>>

<<They $g.slave>> sputters with surprise and then outrage, but once <<they $g.slave>> recognizes your taste and<<they $g.slave>> realizes who it is standing over <<them $g.slave>>, and freezes in terror.

<<if $g.slave.isHasTrait('per_smart')>>
<<They $g.slave>>'s <<rep setup.trait.per_smart>>, and <<they $g.slave>> immediately realizes
<<elseif $g.slave.isHasTrait('per_slow')>>
<<They $g.slave>>'s not dumb, and <<they $g.slave>> quickly realizes
<<else>>
<<They $g.slave>> gradually manages to calculate
<</if>>

that doing anything other than thanking you would be phenomenally stupid. "Thank you,
<<Master $unit.player>>," <<they $g.slave>> mumbles
blearily.
You leave <<them $g.slave>> to puzzle over <<their $g.slave>> own submissiveness, covered in your
<<ucum $unit.player>>.
</p>

<<opt "Just watch <<them $g.slave>> for a little while">>

<p>
You stand there for a while, watching the exhausted slave sleep.
It's an oddly restful sight, and the aesthetics of <<their $g.slave>> slumbering little movements hold your attention for a time. After a while, you head to your own <<uslaverbed $g.slave>>.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<</choose>>


:: Event_an_educated_opportunity [nobr] {"position":"600,18850","size":"100,100"}
<<include "Opportunity_an_educated_opportunity">>


:: Event_an_offer_for_a_slave [nobr] {"position":"600,16100","size":"100,100"}
<p>
Today, you've received an extremely well-written letter in your mailbox.
</p>

<div class='lettercard'>
<p>
Esteemed <<name $unit.player>> of <<rep $company.player>>,
</p>

<p>
My name is <<name $g.slave>>, or so my <<master $g.master>> has named me. It
has come to the attention of my <<master $g.master>>, <<lord $g.master>> <<name $g.master>>,
that you have acquired a particularly rare slave — a
defiant specimen that would not break from even the harshest trainings. My
<<master $g.master>> delights in breaking such hardy slaves, as I was once,
and would make a generous offer should you wish to sell the slave to <<them
$g.master>>. If you are interested in this offer, please seek my <<master
$g.master>> out in the <<lore region_sea>>.
</p>
<p>
Your most humble slave,<br/>
<<name $g.slave>>
</p>
</div>

<p>
An interesting offer. It seems if you are tired of breaking your defiant slaves, there is demand for these specimens somewhere in the <<lore region_sea>>. You could try to scout the area should you wish to follow-up on this offer.
</p>


:: Event_anal_cowgirl [nobr] {"position":"100,12725","size":"100,100"}
<<set _o = $g.slave.getBedchamberOtherSlave()>>

<<if !_o>>
/* Should not happen, but nice for testing: */
<<set _o = setup.getAnySlaver()>>
<</if>>

<p>
As you approach your bedchamber as you retire from your work, you hear the unmistakable sounds of sexual congress. It seems likely that while waiting for your return, your sex toys are playing with each other inside your room. And as you enter, you see that this is true.
</p>

<p>
<<Rep $g.slave>> slave|is sitting on the end of the <<uslaverbed $g.slave>>,
though only <<their $g.slave>> legs, crotch and <<uhands $g.slave>>
are immediately visible. This is because <<they $g.slave>> has
<<rep _o>> on top of <<them $g.slave>>, impaled on
<<if $g.slave.isHasDick() && !$g.slave.isInChastity()>><<their $g.slave>> cock<<else>>a strap-on <<they $g.slave>>'s wearing<</if>>.

<<Rep _o>> is bent almost double.
<<name $g.slave>> has <<their $g.slave>> <<uhands $g.slave>> up on the backs of <<name _o>>'s knees,
holding <<their $g.slave>> <<ulegs _o>> up against <<their $g.slave>> <<if _o.isHasTrait('breast_huge')>>inconveniently big boobs<<else>>shoulders<</if>>.
<<name _o>> is completely helpless, and <<they _o>>'s being fucked hard:
<<if $g.slave.isHasDick()>>

<<set _compat = setup.sexbodypart.penis.getAccomodatingValue($g.slave, _o, setup.sexbodypart.anus)>>

<<if _compat >= 2>>

<<name $g.slave>>'s cock is very big,
<<if _o.isHasTrait('anus_gape')>>even for <<rep _o>>'s loose anus<<elseif _o.isHasTrait('anus_loose')>>even for <<name _o>>'s experienced anus<<else>>especially for <<name _o>>'s tight anus<</if>>,
so <<name $g.slave>> is bouncing <<their $g.slave>> anal bottom up and down only a little way, allowing <<them $g.slave>> to do so fast.

<<elseif _compat >= 1>>

<<name $g.slave>>'s cock is a good fit for <<name _o>>'s <<if _o.isHasTrait('anus_gape')>>loose<<elseif _o.isHasTrait('anus_loose')>>welcoming<<else>>tight<</if>> anus, so <<name $g.slave>> is bouncing <<their $g.slave>> anal bottom up and down fast.

<<else>>

<<name $g.slave>>'s cock barely stretches <<name _o>>'s <<if _o.isHasTrait('anus_gape')>>loose<<elseif _o.isHasTrait('anus_loose')>>welcoming<<else>>tight<</if>> anus, so <<name $g.slave>> is bouncing <<their $g.slave>> anal bottom up and down as fast as <<they $g.slave>> possibly can.

<</if>>

<<else>>

<<name $g.slave>> is using the biggest dildo <<name _o>>'s <<if _o.isHasTrait('anus_gape')>>loose<<elseif _o.isHasTrait('anus_loose')>>welcoming<<else>>tight<</if>> anus can handle, and <<they $g.slave>>'s bouncing <<their $g.slave>> anal bottom up and down fast.

<</if>>

Surprisingly, the slave on top doesn't seem too unhappy with this. <<They $g.slave>>'s no slavishly devoted buttslut, but

<<if _o.isInChastity()>>

<<they _o>>'s taking it well, and even looking a little uncomfortable as the beginnings of a hardon press against <<their _o>> <<ucgenital _o>>.

<<elseif _o.isHasDick()>>

<<their _o>> <<udick _o>> is proudly erect, sticking straight up as <<they _o>> reclines against <<name $g.slave>> beneath <<them _o>>, wiggling a little with the rhythm of the pounding.

<<else>>

<<their _o>> cunt glistens as the pistoning phallus alternately pushes and
pulls at <<their _o>> vaginal walls.

<</if>>

<<if _o.isHasTail()>>
You can even see <<their _o>> tail wagging from time to time.
<</if>>

"H-h-hi-i

<<if $unit.player.isMale()>>M-m-ma-a-st-ter<<else>>M-m-mi-i-is-t-r-r-e-es-s-s<</if>>," says <<name _o>>

breathlessly, doing <<their _o>> best to greet you properly despite the bouncing.
</p>

<p>
<<name $g.slave>> stops thrusting, and <<their $g.slave>>
<<if $g.slave.isHasTrait('face_beautiful')>>gorgeous<<elseif $g.slave.isHasTrait('face_attractive')>>pretty<<else>>homely<</if>>
face instantly appears, craning out from behind <<name _o>>'s back to see.

"Oh, hi, <<Master $unit.player>>!" <<they $g.slave>>
says with a cheerful smile,
<<if $g.slave.isHasTrait('muscle_verystrong')>>
not breathing hard at all despite bouncing a <<man $g.slave>> off <<their $g.slave>> crotch.
<<elseif $g.slave.isHasTrait('muscle_strong')>>
barely out of breath despite the effort.
<<else>>
completely out of breath.
<</if>>

"I <<if $g.slave.isCanSee()>>saw<<else>>heard<</if>> you coming, and I thought <<they _o>>'d look cute with <<if $g.slave.isHasDick()>>my dick<<else>>a strap-on<</if>> up <<their _o>> butthole for you,
so I told <<them $g.slave>> to take it."

<<They $g.slave>> shrugs.

<<if $g.slave.getMainTraining().getTags().includes('tranal')>>
"I like buttsex so much, it's good to give back."
<<else>>
"I thought <<they _o>> was going to be unhappy about it, but <<they _o>>'s actually taking it really well."
<</if>>

<<They $g.slave>>
<<if !$g.slave.isAllowedOrgasm()>>
clearly held off on climaxing, since your rules forbid <<them $g.slave>> from doing it,
<<elseif !$g.slave.isCanOrgasm()>>
can't orgasm with <<their $g.slave>> <<ucgenital $g.slave>> on the way,
<<else>>
clearly held off on climaxing in case you wanted <<their $g.slave>> libido undiminished for your amusement,
<</if>>
and is obediently waiting for your orders, with the bemused <<name _o>> perched motionless atop <<them $g.slave>>.
</p>

<<choose>>

<<opt "Make sure <<they $g.slave>> looks after <<their $g.slave>> bottom">>

<p>
You tell <<them $g.slave>> you'll play with <<them $g.slave>> after <<they $g.slave>>'s done, but add that <<name _o>> is clearly being a very good little anal slut, and <<they _o>> deserves to be rewarded.
Hearing this, <<name _o>> looks at you very gratefully, and mouths a quiet thanks.
"Yes <<Master $unit.player>>!" comes the response.
<<name $g.slave>> shifts <<their $g.slave>> bitch to one side,
and cranes <<their $g.slave>> head upward to make out with the compliant slave. <<name _o>> kisses <<them $g.slave>> back with gusto, surprising <<name $g.slave>> again. <<They $g.slave>> recoils in shock at
<<if _o.isHasTrait('mouth_demon')>>
the dexterous and lengthy demonic tongue suddenly invading <<their $g.slave>> throat,
<<else>>
how much tongue <<name _o>> gives <<them $g.slave>>,
<</if>>
but moans aggressively and gets <<their $g.slave>> revenge by dropping one of <<name _o>>'s knees and
<<if (_o.isInChastity())>>
playing with one of <<their _o>> nipples.
<<elseif (_o.isHasDick())>>
jacking <<them _o>> off.
<<else>>
fingering <<their _o>> clit.
<</if>>

Jerking at the stimulation, <<name _o>>
<<if _o.isHasTail()>>
raises <<their _o>> <<utail _o>> and
<</if>>
urges <<their _o>> butt down against <<name $g.slave>>'s hips, physically begging for a resumption of the sodomy. <<name $g.slave>> applies <<themself $g.slave>>, forcing a growing whine out of <<name _o>> as <<their _o>> asspussy is mercilessly fucked.

<<if (_o.isInChastity())>>

<<Their _o>> chastity cage prevents <<them _o>> from orgasming, but when <<name $g.slave>> climaxes and lets <<them _o>> up,

<<elseif (_o.isHasDick())>>

<<They _o>> cums all over <<their _o>> own chest and <<ubelly _o>>, the droplets of semen oozing down <<them _o>> as <<name $g.slave>> reaches <<their $g.slave>> own climax.
When <<name $g.slave>> lets <<them _o>> up,

<<else>>

<<They _o>> orgasms powerfully, <<their _o>> abs tightening. When <<name $g.slave>> lets <<them _o>> up,

<</if>>

<<they $g.slave>> looks pleased with <<themself $g.slave>>.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply(setup.costUnitHelper(_o))>>

<<opt "Dominate the slave on top">>

<p>
You make no reply, but
<<if $unit.player.isHasDick()>>advance on the couch,
stripping down to reveal a raging erection.<<else>>
move to a side table, selecting a formidable strap-on.<</if>>
<<if $g.slave.isCanSee()>>Seeing<<else>>Hearing<</if>> this,
<<name $g.slave>> <<if $g.slave.isFemale()>>giggles with anticipation
<<else>>steels <<themself $g.slave>><</if>>
and pulls <<name _o>>'s knees back farther.
The slave whines at the stretch, and then gasps as the invading phallus pops free of
<<their _o>> asshole.
<<Their _o>> anus
<<if _o.isHasTrait('anus_gape')>>gapes lewdly, its sphincter so well stretched that it stays invitingly open,
<<elseif _o.isHasTrait('anus_loose')>>gapes slightly, its sphincter remaining just barely open,
<<else>>closes up again immediately once it's no longer being penetrated. Its rosebud is<</if>>
glistening with lube<<if $g.slave.isHasDick()>> and precum from <<name $g.slave>>'s cock<</if>>.
But you decide to be more circumspect. Pressing your <<if $unit.player.isHasDick()>>dickhead<<else>>phallus<</if>> into <<name _o>>'s <<umouth _o>>,
you tell <<them _o>> to be thorough with <<their _o>> saliva.
<<Their _o>> eyes widen at the implication, and <<they _o>> starts to suck lushly.
</p>

<p>
Suddenly, <<they _o>> jerks and squeals into your <<if $unit.player.isHasDick()>>dick<<else>>crotch<</if>>.
With you standing there, <<name $g.slave>> can't really see much, and <<they $g.slave>> can't drop <<name _o>>'s legs without throwing everything into confusion.
So, <<they $g.slave>>'s reduced to blind jabs to get <<their $g.slave>> <<udickorstrap $g.slave>> back up the poor slave's butt<<if _o.isHasTail()>>, using <<name _o>>'s tail as a guide<</if>>.
It takes <<them $g.slave>> quite a while to manage it, and when <<they $g.slave>>'s finally seated, <<name _o>> gives as huge a sigh as <<they _o>> can manage with a phallus down <<their _o>> throat. <<Their _o>> relief is short lived, however, because soon afterward, you withdraw, leaving a string of spit between <<their _o>> wet lips and the <<if $unit.player.isHasDick()>>head of your turgid cock<<else>>massive head of your strap-on<</if>>.
</p>

<p>
<<if _o.isHasVagina()>>

With <<name $g.slave>> occupying <<name _o>>'s rear hole, your next step is obvious to everyone involved, and <<they _o>> groans with fullness as <<they _o>> feels <<their _o>> cunt accommodate you. <<name $g.slave>> matches <<their $g.slave>> rhythm to yours, and
<<if $g.slave.isHasDick()>>orgasms promptly, since <<they $g.slave>>'s less accustomed than you are to the delectable sensation of a <<man _o>> tightened by a phallus in <<their _o>> other hole<<else>>climaxes quickly despite having no sensation in <<their $g.slave>> fake dick, since <<they $g.slave>> finds the situation so arousing<</if>>.

<<elseif _o.isHasTrait('anus_gape')>>

<<name _o>>'s rear hole is such a loose slit that double anal shouldn't be too much trouble for <<them _o>>. It isn't, though <<their _o>> breath definitely quickens as <<they _o>> feels a second rod push its way past <<their _o>> stretched sphincter. <<name $g.slave>> <<if $g.slave.isHasDick()>>orgasms promptly, unable to prolong sex when <<they $g.slave>>'s feeling <<their $g.slave>> cock slide against you inside another slave's anus<<else>>climaxes quickly despite having no sensation in <<their $g.slave>> fake dick, since <<they $g.slave>> finds the situation so arousing<</if>>.

<<else>>

<<name _o>>'s rear hole is a bit tight for double anal, and <<they _o>>'s already quite dominated; you mean to use <<them _o>> thoroughly, not destroy <<them _o>>. So, you and <<name $g.slave>> switch off: you use <<name _o>>'s butt while <<name $g.slave>> pins <<them _o>> for you, and then you go back to <<name _o>>'s mouth for a while and let <<name $g.slave>> take over sodomizing duties.
<<They $g.slave>>
<<if $g.slave.isHasDick()>>orgasms promptly, since <<they $g.slave>> finds a hole warm from your use very hot
<<else>>climaxes quickly despite having no sensation in <<their $g.slave>> fake dick, since <<they _o>> finds the situation so arousing<</if>>.

<</if>>

When <<name _o>> has stumbled off to the baths, <<name $g.slave>> presents <<themself $g.slave>> for your pleasure, already smelling of sex and smiling trustingly.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<</choose>>


:: Event_angry_peasants [nobr] {"position":"1100,15600","size":"100,100"}
<<include 'Quest_angry_peasants'>>


:: Event_animal_tamer__payment_cancelled [nobr] {"position":"100,16475","size":"100,100"}
<<set _u = setup.getUnit({tag: 'in_training_defiant_slave'})>>

<<set _v = setup.getAnySlaver()>>

<<if _u>>
<p>
A delivery has come to your fort today in the form of a very large box.
As <<yourrep _v>> helps you open the box, you notice that there are breathing
holes in various corners of the box, which gives you a good guess of what is contained inside. Indeed, you
found <<yourrep _u>> in full bondage gear inside, apparently having finished training from the animal
trainer's training. It seems the animal trainer has decided to return the
slave to you.
However, you can see that the slave is still full-on defiant,
and remains unbroken — perhaps the animal trainer actually restores the
animal's spirit, seeing that you have never made the requisite payment...
Back to square one it is for you then.
</p>

<<set _g = setup.costUnitHelper(_u)>>
<<run setup.qc.Return('unit').apply(_g)>>
<</if>>


:: Event_animal_tamer__payment_received [nobr] {"position":"350,16475","size":"100,100"}
<<set _u = setup.getUnit({tag: 'in_training_defiant_slave'})>>

<<set _v = setup.getAnySlaver()>>

<<if _u>>
<p>
A delivery had come to your fort today in the form of a very large box.
As <<yourrep _v>> helped you open the box, you noticed there were breathing
holes punched at the corners of the box, and you could guess what is inside.
Indeed, you
found <<yourrep _u>> in full bondage gear inside, having graduated from the animal
trainer's training. Upon closer inspection, the slave indeed no longer had
any of the defiant flame that used to burn so brightly in <<their _u>> eyes.
It seemed the trainer spoke truly — the slave has now been fully broken, and
<<their _u>> training to become a proper slave can finally begin in earnest.
</p>

<<set _g = setup.costUnitHelper(_u)>>
<<run setup.qc.TraitRemove('unit', setup.trait.will_defiant).apply(_g)>>
<<run setup.qc.Trait('unit', setup.trait.bg_slave).apply(_g)>>
<<run setup.qc.Trait('unit', setup.trait.bg_unemployed).apply(_g)>>
<<run setup.qc.TraitReplace('unit', setup.trait.per_slow).apply(_g)>>
<<run setup.qc.Return('unit').apply(_g)>>
<</if>>


:: Event_another_new_path [nobr] {"position":"100,14475","size":"100,100"}
<p>

Since you've decided to promote <<yourrep $g.slaver>> into a slaver, whatever plan the
<<if !$varstore.get('quest_furging_a_new_path_completed')>>
mysterious benefactor
<<else>>
old neko
<</if>>
had for <<rep $g.slaver>> can no longer go through.
</p>


:: Event_assassin_benefits [nobr] {"position":"350,19100","size":"100,100"}
<p>
<<Yourrep $g.slaver>> used to be a master
<<if $g.slaver.isHasTrait('subrace_humansea')>>ninja<<else>>assassin<</if>>, and is used to doing many espionage mission be it spying, stalking, or even the occasional assassinations.
<<if $g.slaver.isHasTrait('per_dreamy')>>
Nobody would have guessed it, looking at the carefree <<man $g.slaver>>, but
<<elseif $g.slaver.isHasTrait('per_playful')>>
Nobody would have guessed it, looking at the playful-looking <<man $g.slaver>>, but
<<else>>
It's hard to think that the <<uadjper $g.slaver>> <<man $g.slaver>> slaver|possess such as highly-valued skills, but
<</if>>
<<their $g.slaver>> skills are for real, as you come to learn today.
</p>

<p>
When you enter your office today, <<rep $g.slaver>> is waiting, sitting on your desk while
a <<urace $g.slave>> is bound and gagged, naked and struggling on the floor.
The victim's clothes were folded neatly around — the clothes of an assassin, which makes you raise an eyebrow.
<<if $g.slaver.getSpeech() == setup.speech.friendly>>
"I've spotted someone stalking you in the last few weeks, and I'd thought I'd do you a favor and capture the <<man $g.slaver>>", <<they $g.slaver>> reports cheerfully.
<<elseif $g.slaver.getSpeech() == setup.speech.bold>>
"Found this spy following you in the last week or so. <<They $g.slave>> thought <<they $g.slaver>> could avoid catching my attention. The nerve!", says <<rep $g.slaver>>.
"I've spotted someone stalking you in the last few weeks, and I'd thought I'd do you a favor and capture the <<man $g.slaver>>", <<they $g.slaver>> reports cheerfully.
<<elseif $g.slaver.getSpeech() == setup.speech.cool>>
"Spy. Your enemy.", the stoic <<man $g.slaver>> reports efficiently.
<<elseif $g.slaver.getSpeech() == setup.speech.witty>>
"Heya Boss, I caught this snake slithering behind your back in the last few week or so, no doubt being sent over by an enemy of yours. Which dragonkin did you anger again this time?" <<they $g.slaver>> reports cheerfully.
<<elseif $g.slaver.getSpeech() == setup.speech.debauched>>
"Heya Boss, got a new slave for you. An former spy who I found trailing you in the last week. Given <<their $g.slave>> skills, the slave would surely make for a fun night or two. Don't forget to invite me for the fun!" <<they $g.slaver>> reports cheerfully.
<</if>>
</p>

<p>
Seems like your own spy slaver is quite resourceful. You're quite grateful to have such a slaver under your employ, loyally serving you, but you have an image to maintain and you can't just say it out loud. So you settled with a grunt and a friendly "good work" towards the slaver, although it seems the slaver already know how much you appreciate their work and looks more cheerful in the days to come.
</p>


:: Event_assault_on_your_lover [nobr] {"position":"100,18225","size":"100,100"}
<<set _u = setup.getAnySlaver([$g.victim])>>

<p>
Today, you receive a most dreadful news.
Your lover <<rep $g.victim>> victim|was apparently assaulted in <<their $g.victim>>
room last night by a mysterious assailant. Luckily, <<yourrep _u>> happened
to be nearby, and together they managed to repel the assailant. But damn, it
did make your heart skip a beat at the thought of losing your <<uadjgood
$g.victim>> <<urace $g.victim>> lover. You make notes to yourself to force
<<them $g.victim>> to sleep in your room tonight.
</p>

<p>
Maybe you'll hear more about this assailant, and you have
<<if !$unit.player.isHasTrait('per_honorable')>>evil<</if>>
plans on what to do
with them once you get your <<uhands $unit.player>> on them. But in the meantime, maybe you
should reward <<yourrep _u>> for <<their _u>> great service.
</p>


:: Event_asspussy [nobr] {"position":"350,12725","size":"100,100"}
<p>
As you pass through your bedchamber, you notice <<yourrep $g.slave>> checking out <<their $g.slave>> own anus in the mirror.
</p>

<p>
There's no other way to describe what <<they $g.slave>> slave|is doing: the <<urace $g.slave>> slave|have <<their $g.slave>> back to the mirror<<if $g.slave.isHasTrait('height_short')>> and slave|is up on tiptoe to bring <<their $g.slave>> butthole into view<</if>>, and <<they $g.slave>>
got <<their $g.slave>> hips cocked to spread <<their $g.slave>> butt and
reveal <<their $g.slave>> backdoor.
<<They $g.slave>> seems quite fascinated.
As you pause to watch, <<they $g.slave>> begins to clench and relax <<their $g.slave>> <<if $g.slave.isHasTrait('anus_gape')>>gaping<<else>>loose<</if>> hole,
alternately puckering and relaxing the <<uskin $g.slave>> around it. <<They $g.slave>>
<<if $g.slave.isFemale()>>giggles<<else>>frowns<</if>>
self-consciously at the sight, and then relaxes all the way, causing <<their $g.slave>> asspussy to open into a <<if $g.slave.isHasTrait('anus_gape')>><<if $unit.player.isHasDick()>>cock<<else>>dildo<</if>>-hungry<<else>>slight<</if>> gape. <<They $g.slave>> notices you out of the corner of <<their $g.slave>> eyes and
turns to greet you, <<their $g.slave>> rear only partially concealing <<their $g.slave>> asshole in the mirror.
</p>


<<if $g.slave.isCanTalk()>>
<p>
"Hi <<Master $unit.player>>," <<they $g.slave>> says <<uadv $g.slave>>. "I was just noticing how much my butt has changed. I hadn't really looked at it in a while, you know? It used to be so tight back then in the past, and now <<if $g.slave.isHasTrait('anus_gape')>>I've got a rear pussy<<else>>it's obviously a fuckhole<</if>>."
</p>
<<else>>
<p>

<<if $g.slave.isCanPhysicallyTalk()>>
<<Their $g.slave>> <<uequipslot $g.slave 'mouth'>> prevents them from talking,
<<else>>
<<They $g.slave>> slave|is not allowed to speak,
<</if>>
so <<they $g.slave>> slave|try <<their $g.slave>> best to gesture how much <<their $g.slave>> holed had changed compared to the past.
</p>
<</if>>

<p>
<<They $g.slave>> turns to face the mirror, hiking one knee up onto the nightstand in front of it. <<They $g.slave>>
cocks <<their $g.slave>> hips again and starts blatantly winking <<their $g.slave>> anus for you, using <<their $g.slave>> <<uhands $g.slave>> to tweak <<their $g.slave>> nipples.
<<if $g.slave.isHasTrait('anus_gape')>>
The huge area of anus around <<their $g.slave>> actual hole certainly draws the eye towards its center, though the way <<they $g.slave>>'s using <<their $g.slave>> sphincter as a come-on does enhance the effect.
<</if>>
<<if $g.slave.isCanTalk()>>
<<if $g.slave.getMainTraining().getTags().includes('tranal')>>
"Please, <<Master $unit.player>>," <<they $g.slave>> begins to beg. "I can't wait to feel <<if $unit.player.isHasDick()>>your cock<<else>>you<</if>> inside me."
<<else>>
"Please, <<Master $unit.player>>," <<they $g.slave>> says. "Use me."
<</if>>
<<else>>
<<They $g.slave>> wordlessly begs for you to use <<them $g.slave>>.
<</if>>
</p>

<<choose>>

<<opt "Double anal with your lover">>
<<set $g.a = $g.lover>>
<<include "Event_Asspussy_Common">>

<<opt "Double anal with the other slave in your bedchamber: <<rep $g.other>>">>
<<set $g.a = $g.other>>
<<include "Event_Asspussy_Common">>

<<opt "Chat about <<their $g.slave>> ass">>

<p>
You head into the bedroom, shedding clothing as you go. <<They $g.slave>> stares at you as you advance, <<their $g.slave>> eyes fixing on your
<<if $unit.player.isHasBreasts()>>
tits as you reveal them<<else>>
<<ubelly $unit.player>> as they become visible<</if>>, and <<their $g.slave>> lips part slightly. <<Their $g.slave>> gaze only shifts when you disrobe completely, revealing your
<<if $unit.player.isHasDick()>>hardening dick<<else>>flushed <<woman $g.slave>>hood<</if>>; <<they $g.slave>> licks <<their $g.slave>> lips unconsciously. You sit on the <<uslaverbed $g.slave>> and pat your thighs, and <<they $g.slave>> hurries over, <<if $g.slave.getMainTraining().getTags().includes('tranal')>>eagerly<<else>>carefully<</if>> swinging <<their $g.slave>> leg over the <<uslaverbed $g.slave>> and seating <<themself $g.slave>> in your lap. <<if $unit.player.isHasDick()>>Your cock slides easily up <<their $g.slave>> whorish butt. One of your <<uarms $unit.player>><<else>>You decided not to bother with a strap-on, so you slide a couple of fingers inside <<them $g.slave>>, and <<they $g.slave>> reciprocates by working a <<uhand $g.slave>> under <<themself $g.slave>> to attend to your pussy. Your free arm<</if>> wraps around <<them $g.slave>> <<if $g.slave.isHasTrait('breast_titanic')>>and under <<their $g.slave>> heavy tits, resting in a cocoon of soft breastflesh<<elseif $g.slave.isHasTrait('breast_large')>>heavy breasts, hefting their weight and eliciting a sigh from the slave<<else>>to fondle <<their $g.slave>> <<ubreasts $g.slave>><</if>>. Being held this way, <<they $g.slave>> can't really <<if $unit.player.isHasDick()>>bounce on your dick, so <<they $g.slave>> just wiggles <<their $g.slave>> butt into you to seat it a bit deeper<<else>>grind against your fingers<</if>> and sighs contentedly. You <<ustripmouthand $g.slave>> instruct <<them $g.slave>> to elaborate on what <<they $g.slave>> said earlier.
</p>

<p>
"Yes <<Master $unit.player>>," <<they $g.slave>> says automatically, and then pauses. "Hmm. I try not to think about back, you know, before." <<They $g.slave>> squeezes <<their $g.slave>> buttocks against your <<if $unit.player.isHasDick()>>crotch<<else>><<uhand $unit.player>><</if>>. "But I
guess long time ago I didn't really think about my butthole, much?
You know all about that." You tell <<them $g.slave>> to explain it anyway. <<They $g.slave>> looks puzzled for a moment, but twists around to plant an awkward kiss on your chin before continuing. "Well," <<they $g.slave>> says, with mock seriousness. Here in the fort, we
slaves are expected to be fit and ready to fuck. So our butts are always kept nice and clean. That way, our <<if $unit.player.isMale()>>Masters<<else>>Mistresses<</if>>
can -" <<they $g.slave>> clenches <<their $g.slave>> sphincter <<if $unit.player.isHasDick()>>around the base of your cock - "fuck<<else>>against your invading fingers - "play with<</if>> our asses" - clench - "whenever" - clench - "they" - clench - "want!" <<They $g.slave>> squeals as you use your encircling arm to hoist <<their $g.slave>> <<ubody $g.slave>> up a bit higher, and mercilessly <<if $unit.player.isHasDick()>>fuck<<else>>fingerfuck<</if>> <<their $g.slave>> ass.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<optif $g.slave.isHasTraitExact('anus_loose')>>
<<opt "Change it some more">>

<p>
You tell <<them $g.slave>> that since <<they $g.slave>> appreciates how <<their $g.slave>> ass has changed, <<they $g.slave>> won't be surprised if you treat it like the fuckhole it is. Something in your tone makes <<them $g.slave>> cautious, but <<they $g.slave>>'s a good <<girl $g.slave>> and
<<if $g.slave.isCanTalk()>>
says "Yes, <<Master $unit.player>>," automatically.
<<else>>
nods.
<</if>>
You strip <<them $g.slave>> out of <<their $g.slave>> usual gear. You then take a buttplug and comfortably fills <<their $g.slave>> rectum with it, as well as attach a sturdy leather collar to <<their $g.slave>> neck complete a leash. You snap your fingers, pointing at the ground, and <<they $g.slave>> scrambles to <<their $g.slave>> <<uhands $g.slave>> and knees and removes <<their $g.slave>> plug. After <<they $g.slave>>'s taken a harsh buttfuck, you <<if $unit.player.isHasDick()>>push the plug back in without letting any of your cum escape<<else>>plug <<their $g.slave>> up again<</if>> and attach the leash to your belt. You proceed to resume your work in your office, ignoring your anal toy completely, letting <<them $g.slave>> kneel next to you as you work - <<they $g.slave>> doesn't seem to want to sit, for some reason. For the rest of the day, <<their $g.slave>> anus takes the full force of your libido. You fuck nothing else, confining your efforts to <<their $g.slave>> backdoor, keeping <<them $g.slave>> plugged when you aren't penetrating <<them $g.slave>>. When you're bored, you hand <<them $g.slave>> a dildo and tell <<them $g.slave>> to take care of it <<themself $g.slave>>.
</p>

<p>
<<They $g.slave>>'s quite exhausted by the end of the day, walking dumbly along behind you, leashed to your belt and wondering tiredly when <<their $g.slave>> next reaming is coming. <<They $g.slave>> doesn't notice that you're bringing <<them $g.slave>> back to stand in front of the mirror in your bedchamber until <<they $g.slave>>'s there. You push <<their $g.slave>> compliant body into an approximation of <<their $g.slave>> position from the morning and tell <<them $g.slave>> to remove <<their $g.slave>> plug and look at <<their $g.slave>> asshole.
<<if $g.slave.isCanTalk()>>
"Yes <<Master $unit.player>>," <<they $g.slave>> says, and obeys.
<<else>>
<<They $g.slave>> obeys wordlessly.
<</if>>
<<if $unit.player.isHasDick()>> This releases quite a rush of ejaculate.<</if>> <<Their $g.slave>> anus is very loose, a lewd, gaping fuckhole hungry for toys, fingers, and dick. You tell <<them $g.slave>> that, and ask whether <<they $g.slave>> agrees.
<<if $g.slave.isCanTalk()>>
"Yes <<Master $unit.player>>," <<they $g.slave>> says.
<<else>>
They nods.
<</if>>
</p>

<<run setup.qc.TraitIncreaseExisting('slave', setup.trait.anus_gape).apply($gQuest)>>

<</choose>>


:: Event_at_what_cost2 [nobr] {"position":"350,20475","size":"100,100"}
<<include "Opportunity_at_what_cost">>


:: Event_bad_dreams [nobr] {"position":"725,12725","size":"100,100"}
<p>
You are awoken on your <<uslaverbed $g.slave>> tonight from a quiet cry.
You see a jerky movement near the <<uslavebed $g.slave>> in the dark. It's
<<yourrep $g.slave>>, and <<they $g.slave>>'s obviously having a bad dream. <<They $g.slave>> raises an arm to fend off some imagined danger, and in doing so, pushes the blankets down around <<their $g.slave>> <<uwaist $g.slave>>.
The movement bares <<their $g.slave>>
<<if $g.slave.isHasTrait('breast_huge')>>udders<<elseif $g.slave.isHasTrait('breast_large')>>heavy breasts<<elseif $g.slave.isHasTrait('breast_tiny')>>boobs<<else>><<ubreasts $g.slave>><</if>>
to the cool night air.
The low light outlines <<their $g.slave>> nipples as they stiffen at the sudden change of temperature, becoming attractively erect.
Still dreaming, <<they $g.slave>> clasps <<their $g.slave>> <<uarms $g.slave>> protectively over <<their $g.slave>> vulnerable chest,
and rolls to one side.
Halfway into a fetal position, <<they $g.slave>> turns <<their $g.slave>> head against you, still sleeping, while murmuring "N-no - please no - I'll d-do anyth-thing - no..."
</p>

<<choose>>

<<opt "Hug <<them $g.slave>>">>

<p>
You reach out to hug <<them $g.slave>>, but as soon as your <<uhand $unit.player>> touches <<their $g.slave>> shoulder, <<they $g.slave>> writhes instinctively away.
<<if $g.slave.isCanSee()>><<Their $g.slave>> eyes fly open, searching frantically for <<their $g.slave>> assailant.
Seeing that it's you, <<they $g.slave>> screams and scrabbles away even harder.
After making it a few feet, <<they $g.slave>> collects <<their $g.slave>> wits enough to bring <<themself $g.slave>> to a stop and stop screaming, though <<they $g.slave>> continues to <<if $g.slave.isFemale()>>sob<<else>>resist<</if>>, staring at you in <<if $g.slave.isFemale()>>terror<<else>>hatred<</if>><<else>><<They $g.slave>> gropes frantically for <<their $g.slave>> assailant, before making contact with you. <<They $g.slave>> screams and scrabbles away, only stopping when <<they $g.slave>> collides with the <<uobject $g.slave>>.
Only after several call outs that it is you does <<they $g.slave>> stop screaming, though <<they $g.slave>> continues to <<if $g.slave.isFemale()>>sob<<else>>resist<</if>>, listening to your every breath in <<if $g.slave.isFemale()>>terror<<else>>hatred<</if>><</if>>.
<<They $g.slave>> remains frozen in place as you slowly advance on <<them $g.slave>> and give <<them $g.slave>> a light embrace. <<Their $g.slave>>
<<if $g.slave.isFemale()>>tears<<else>>fear<</if>> gradually stop, but <<they $g.slave>> does not relax, <<if $g.slave.isCanSee()>>remaining dumbly stiff<<else>>continuing to quake in fear<</if>> within your <<uarms $unit.player>>. Eventually you let <<them $g.slave>> go, and <<they $g.slave>> crawls pathetically back under <<their $g.slave>> blanket.
It seems <<they $g.slave>> slave|is more afraid of you than ever, and if you thought that a simple hug could win <<them $g.slave>> over, you were wrong.
</p>

<<run setup.qc.FriendshipWithYou('slave', -50).apply($gQuest)>>

<<opt "Rape <<them $g.slave>>">>

<p>
You snatch the blanket off <<them $g.slave>>, shove <<their $g.slave>> uppermost shoulder down so <<their $g.slave>> face is smashed into the <<utile $g.slave>>, and bring your knees down between <<their $g.slave>> <<ulegs $g.slave>>, spreading them to force them apart.
You use the <<uhand $unit.player>> that isn't controlling <<their $g.slave>> torso to locate <<their $g.slave>>

<<if $g.slave.isHasVagina()>>

<<if $g.slave.isHasTrait('vagina_gape')>>
amusingly loose cunt
<<elseif $g.slave.isHasTrait('vagina_loose')>>
large <<woman $g.slave>>hood
<<else>>
tight pussy
<</if>>

<<else>>

<<if $g.slave.isHasTrait('anus_gape')>>
amusingly broad asshole
<<elseif $g.slave.isHasTrait('anus_loose')>>
big butthole
<<else>>
tight rosebud
<</if>>

<</if>>

in the dark as <<they $g.slave>> begins to struggle and scream.
<<They $g.slave>> comes fully awake when <<they $g.slave>> feels your rough fingers searching for and then finding <<their $g.slave>>
<<uhole $g.slave>>,
and <<their $g.slave>> noise increases to the point where it becomes annoying.
<<if $g.slave.isHasTail()>>
Raising <<their $g.slave>> tail, you
<<else>>
You
<</if>>
stuff <<their $g.slave>> face into the <<utile $g.slave>>
and take <<them $g.slave>> mercilessly, using a pillow to cut off <<their $g.slave>> breath whenever <<they $g.slave>> struggles too much, until oncoming suffocation forces <<them $g.slave>> to go still and take it like a good little bitch.
</p>
<p>
Sometimes dreams do come true.
</p>

<<run setup.qc.FriendshipWithYou('slave', -50).apply($gQuest)>>

<</choose>>


:: Event_bandit_ambush_ambush [nobr] {"position":"100,15350","size":"100,100"}
<p>
Several of your slavers report to work today with heavy injuries. Apparently, when they were ambushing
a trading caravan, they were ambushed by a group of bandits who seemingly have been waiting for them.
Having carried no valuables with them, the slavers were beaten badly by this particular group of bandits
who seemed to carry some kind of grudge against your company.
</p>

<p>
There is nothing else you could do for now other than try to nurse their
injuries as best as you could.
Perhaps you could get your revenge one day. A former-bandit slave is always
useful to have.
</p>


:: Event_banditry_ [nobr] {"position":"1100,14100","size":"100,100"}
<p>The banditry on the roads hasn't gotten any better, and the Lords of Lucgate have, as you expected, done nothing to curb their activities. Unfortunately this has meant you're getting even fewer traders and travellers coming to your fort, and your actual income has been down this month from what you had expected.</p>
<p>Maybe you need to train your fighters up to take on the bandits next time you get the opportunity...</p>


:: Event_bank_marketing_strategy [nobr] {"position":"100,15475","size":"100,100"}
<p>
You have made dangerous enemies in the recent weeks, including
some executives in the <<rep $company.bank>>.
And recently, they have begin to retaliate. Suddenly several other companies
view your company with much more disdain than usual, no doubt thanks to the bank
unleashing their marketers to spread the bad words around.
The <<uadjgood $g.slaver>> <<urace $g.slaver>> slaver could offer you no advice
on this situation, other than perhaps not to anger the bank too much in the future.
You consider for a little while to deduct the slaver's pay for such a dumb comment,
but ultimately decide to carry on with your day.
</p>


:: Event_bar_delights [nobr] {"position":"975,12725","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<p>
The <<rep setup.buildingtemplate.tavern>> of your fort doesn't only serve cum --
it also serves many different more mundane refreshments.
Ever since its opening you and your slavers often patron the place.
As it happens,
<<yourrep $g.slave>> slave|is currently stationed there, a break from <<their $g.slave>>
usual duties as a generic entertainment slave.
Today, after finishing serving <<yourrep _u>>, <<they $g.slave>> slave|is carrying a selection of refreshments and the necessary implements for you:
a bottle of wine, an empty glass, and a spare cigar, balanced on a tray.
</p>

<p>
<<They $g.slave>> comes to a stop right beside your elbow, waiting for further direction, just as <<they $g.slave>>'s been trained to do in these cases.
<<if $g.slave.isHasTrait('breast_titanic')>>
<<Their $g.slave>> breasts are so massive that <<they $g.slave>>'s got the tray more or less balanced on top of them. As <<they $g.slave>> breathes, <<their $g.slave>> tits rise and fall slightly,
causing ripples in the bottle of wine and threatening to knock the cigar from its plate.
<<elseif $g.slave.isHasTrait('muscle_verystrong')>>
With <<their $g.slave>> incredible musculature, <<they $g.slave>>'s able to maintain utter stillness in the perfect posture of an obedient slave. A naturally standing human makes some small movements, but <<their $g.slave>> strength allows <<them $g.slave>> to suppress them by setting muscle groups against each other. This has the ancillary benefit of making them stand out nicely.
<<else>>
<<They $g.slave>> keeps <<their $g.slave>> <<if $g.slave.isCanSee()>><<ueyes $g.slave>><<else>>face<</if>> slightly downcast,
<<their $g.slave>> back arched, <<their $g.slave>> <<ubreasts $g.slave>> pressed outward, and <<their $g.slave>> bottom stuck out a bit. <<They $g.slave>>'s the perfect picture of an obedient little sex slave<<if $g.slave.isHasTrait('height_giant')>> (though, of course, <<they $g.slave>>'s anything but physically small)<</if>>.
<</if>>
</p>

<<choose>>

<<opt "Enjoy some oral with your refreshments">>
<p>
There was many things you did not understand before you've become the leader of a slaving company. One of the smallest and yet most enjoyable is the almost unlimited availability of a good drink and
<<if $unit.player.isHasDick()>>a blowjob<<else>>some cunnilingus<</if>>. Turning to <<rep $g.slave>>, you pour yourself some wine and <<if !$g.slave.isCanSee()>>audibly <</if>>widen your <<ulegs $unit.player>> slightly in your chair.
<<They $g.slave>> immediately drops to <<their $g.slave>> knees and gets to work,

<<if $g.slave.isHasTrait('training_oral_master')>>

using all of <<their $g.slave>> mastery at giving oral pleasure.

<<elseif $g.slave.isHasTrait('training_oral_advanced')>>

using all of <<their $g.slave>> skills at in oral pleasure.

<<else>>

doing <<their $g.slave>> best despite <<their $g.slave>> mediocre oral skills.

<</if>>

You take your time, taking meditative sips and running a thoughtful <<uhand $unit.player>> across <<rep $g.slave>>'s head while you look at the view out the <<rep setup.buildingtemplate.tavern>> and into the general <<rep setup.buildingtemplate.recreationwing>> area.
This isn't the first time you've done this, nor will it be the last, and <<rep $g.slave>> is used to being used as a servin <<girl $g.slave>>.
</p>

<<opt "Show <<them $g.slave>> a special way to enjoy refreshments">>

<<if $gQuest.getSeed() % 2>>

<p>
You tell <<them $g.slave>> to hop up on the bar.
<<They $g.slave>> obeys promptly, <<if $g.slave.isCanSee()>>watching you<<else>>listening<</if>> closely for further instructions.
To <<their $g.slave>> complete lack of surprise, you tell <<them $g.slave>> to pull <<their $g.slave>> <<ulegs $g.slave>> back and spread <<their $g.slave>> hole<<if $g.slave.isHasVagina()>>s<</if>>.
As <<they $g.slave>> opens <<themself $g.slave>> for you,
<<they $g.slave>> <<if $g.slave.isCanSee()>>sees<<else>>hears<</if>> that you're doing something with
the bottle of wine, and
<<if $friendship.getFriendship($unit.player, $g.slave) >= 500>>
relaxes, trusting you completely<<else>>does <<their $g.slave>> best to relax<</if>>.
<<They $g.slave>> gasps when <<they $g.slave>> feels
the cool tip of the wine bottle being gently inserted into <<their $g.slave>> ass, followed by a rush of warm liquid into their stomach.
You press the bottle into <<their $g.slave>> slowly. There was not much left in the bottle, but <<their $g.slave>> body is very permeable there, and the effects hit <<their $g.slave>> very quickly.
</p>

<p>
You go back drinking, letting the slave loll around on the tavern, enjoying the effects. When <<they $g.slave>>'s had time to reflect on the strange incident, <<they $g.slave>>
resolves to trust you more in the future, since it can be fun.
</p>

<<else>>

<p>
You tell <<their $g.slave>> to hop up on the bar and face you. <<They $g.slave>> obeys promptly, <<if $g.slave.isCanSee()>>watching you<<else>>listening<</if>> closely for further instructions.
To <<their $g.slave>> surprise, you
<<if $unit.player.isHasBreasts()>>unfasten your top, freeing your breasts, and <</if>>uncover your <<if $unit.player.isHasDick()>>stiffening cock<<else>>moistening pussy<</if>>.
Taking some wine in your fingers, you massage it onto your erect
<<if $unit.player.isHasDick() && $unit.player.isHasBreasts()>>
nipples and dick
<<elseif $unit.player.isHasVagina() && $unit.player.isHasBreasts()>>
nipples and clit
<<elseif $unit.player.isHasDick()>>
dick
<<else>>
clit
<</if>>
making sure to cover yourself completely. You recline in your seat, beckoning to <<rep $g.slave>> to lick you clean. <<They $g.slave>> eagerly complies, eager to get a taste of wine after nothing but slave-grade food for so long.
<<if $g.slave.isHasTrait('training_oral_master')>>
<<They $g.slave>> slave|is extremely skilled with <<their $g.slave>> tongue;
before long, not only are you completely cleaned, but you can barely feel your crotch from <<their $g.slave>> masterful sucking.
<<elseif $g.slave.isHasTrait('training_oral_advanced')>>
<<They $g.slave>> slave|is quite skilled with <<their $g.slave>> tongue; before long, you are both cleaned off and enjoying some wine after the powerful orgasm <<they $g.slave>> coaxed out of you.
<<elseif $g.slave.isHasTrait('training_oral_basic')>>
<<They $g.slave>> has basic skill with <<their $g.slave>> tongue; before long, you are nearly cleaned of all the wine. With one final lick, <<they $g.slave>> takes the last taste of it and brings you to climax at the same time.
<<else>>
<<They $g.slave>> has no idea how to make this pleasurable; <<they $g.slave>> slave|is merely greedily lapping up the wine off your <<uskin $unit.player>>. As <<they $g.slave>> nears finishing your crotch, you grab <<their $g.slave>> head and hold <<their $g.slave>> to yourself until you are satisfied with <<their $g.slave>> licking.
<</if>>
You go back to drinking, letting the slave lick <<their $g.slave>> lips of the combined taste of your <<uscent $unit.player>> and wine. When <<they $g.slave>>'s had time to reflect on the strange incident, <<they $g.slave>> resolves to trust you more in the future, since it can be fun and tasty.
</p>

<</if>>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<optif !$settings.bannedtags.gore>>
<<opt "Use the cigar on <<them $g.slave>>">>

<<set _doctor = $dutylist.getUnitIfAvailable('doctor')>>

<p>
You select a cigar and start smoking, ordering <<them $g.slave>> to stick around and get <<their $g.slave>> <<ubreasts $g.slave>> out.
<<They $g.slave>> sees nothing too unusual about this, and
obeys complaisantly, standing beside you with <<their $g.slave>> <<ubreasts $g.slave>> bare. You reach over and play with them as you smoke, teasing <<their $g.slave>> nipples and playing with <<their $g.slave>> <<ubreasts $g.slave>>.
Deciding that you're done with the cigar, you pull a long draw of smoke into your <<umouth $unit.player>>, bringing the coal at its foot to a fine glow. Then you pull it out of your <<umouth $unit.player>> and press it against the slave's defenseless <<ubreasts $g.slave>>.
<<They $g.slave>>
shrieks with agony, flinching away instinctively, and collapses to the ground<<if $g.slave.isMasochistic()>>, masochistically orgasming from the sudden rush of stimulation<</if>>. Writhing in pain, <<they $g.slave>> checks the burn on <<their $g.slave>> <<ubreasts $g.slave>> with both hands, <<their $g.slave>> sobbing only interrupted by ragged gasps for breath.
You order <<them $g.slave>> to go get <<their $g.slave>> burn looked at<<if _doctor>> by your resident doctor <<rep _doctor>><</if>>, and go back to drinking. <<They $g.slave>> scrabbles toward the door, weeping,<<if $g.slave.isMasochistic()>> horrified at <<themself $g.slave>> for getting off to that,<</if>> eager to get away.
</p>

<<run setup.qc.FriendshipWithYou('slave', -50).apply($gQuest)>>

<</choose>>


:: Event_bedroom_lessons [nobr] {"position":"350,19225","size":"100,100"}
<p>
You've recently noticed that <<yourrep $g.pimp>> pimp|have been much more effective at <<their $g.pimp>> duty. <<They $g.pimp>> pimp|is directing the slaves more passionately, which translates to a higher income from your <<rep setup.buildingtemplate.recreationwing>>.
</p>

<p>
Our of pure curiosity, you asked <<therace $g.pimp>> what had changed. Apparently, <<they $g.pimp>> pimp|have received some pointers from <<yourrep $g.slaver>>. As you recall, <<rep $g.slaver>> used to be
<<if $g.pimp.isHasTrait('bg_courtesan')>>
a high-class courtesan, trading in flesh but only to the most deserving and wealthy clients.
<<else>>
a free whore, trading in flesh to everyone paying.
<</if>>
It seems <<they $g.slaver>> still recall the experience of <<their $g.slaver>> past life, and have decided to put them to good use by imparting them unto your pimp.
</p>

<p>
Given <<reps $g.pimp>> <<uinsultnoun $g.pimp>>, however, you've little doubt that whatever lesson the <<man $g.pimp>> pimp|have learned, it will be gone and forgotten before long. But at least for the next few weeks, you can expect increased expected profits from the <<rep setup.buildingtemplate.recreationwing>>.
</p>


:: Event_best_ass_rescue [nobr] {"position":"100,16350","size":"100,100"}
<<include "Opportunity_best_ass_rescue">>


:: Event_blackmail_due [nobr] {"position":"850,16475","size":"100,100"}
<<set _progress = $varstore.get('rival_blackmail_progress') || 0>>

<<if $varstore.get('rival_blackmail_active')>>
<p>
An emissary from the bastard rival slaving company that has come to your fort demanding
payment for your slaver's continued... ahem, "luxury accomodation" under their care. You
grudgingly pay the slaver,
<<if _progress >= 3>>
while sensing a desperation in the messenger's voice, no doubt thanks to your
efforts to crumble your rival' company so far...
<<elseif _progress >= 2>>
knowing full well that soon, retaliation is at hand...
<<elseif _progress >= 1>>
your current retaliation plan in the front of your mind...
<<else>>
while wondering if this will continue on forever...
<</if>>
</p>

<p>
The emissary promised to return again next month.
</p>

<<else>>
<<if $varstore.get('rival_blackmail_cancel')>>
  <p>
    You've made up your mind to not continue the monthly installments.
    The messenger will return empty-handed.
    But your former slaver's fate is now sealed...
  </p>
<<else>>
  <p>
  Having defeated your rival's company, the monthly "accomodation fee" you
  have been paying for your slaver's continued safety has finally ended. It
  feels good.
  </p>
<</if>>

<</if>>


:: Event_blackmailed [nobr] {"position":"1100,16475","size":"100,100"}
<<include "Opportunity_blackmailed">>


:: Event_blame_on_you [nobr] {"position":"850,17600","size":"100,100"}
<p>
Your fort is located in a particularly lawless region of <<lore geo_mestia>>, and random bandit ambush as well as slave hunting parties are rather common in the area. Despite that, something rather eccentric would happen from time to time, and the rumors spread quickly among the many gossipwomen of the vale. The latest of such rumors is regarding the recent cases that seems to only target young, idyllic, and virginal <<men $g.slave>>. The victims would be later found a far cry from their once pure and innocent self — their holes would be gaped beyond repair and their faces locked in permanent ahegao (or at least for a couple of weeks). Despite that, nothing valuable was lost, and it seems that the perpetrator's only goal was to simply enjoy the rape.
</p>

<p>
Because of such uncommon motive, the blame somehow fell into your company, and your reputation takes a little hit with the surrounding people. You round up your slavers, asking if anyone would happen to know something related to this. Unsurprisingly, nobody claims any connection.
<<if $unit.player.isHasTrait('per_attentive')>>
Although most looks trustworthy (at least to your very low standards of trustworthy), you are perceptive enough to note that <<rep $g.slaver>> behaved unnaturally. <<They $g.slaver>> might know something more, but decided not to tell you. You don't have any proof though, so you just shrugged and go on with the rest of your day.
<<elseif $unit.player.isHasTrait('per_dreamy')>>
You roll your eyes upwards, and being the inattentive slaver that you are, you simply get back to work and just hope for the best.
<<else>>
Still, you somehow sense that something was off regarding <<reps $g.slaver>> behavior, and <<therace $g.slave>> might actually know something. But that's all your intuition, and without any proof, you decide to just go on with the rest of your day.
<</if>>

</p>


:: Event_bodyswap_epilogue [nobr] {"position":"350,16350","size":"100,100"}
<p>
It seems your actions have finally stopped the bodyswapper's activities in the
<<lore region_desert>>, at least for now.
The grateful citizens pool up some money for your company, which you <<uadv $unit.player>> accept.
</p>


:: Event_bondage_cage [nobr] {"position":"600,19225","size":"100,100"}
<p>
Among the many shops that now reside within your fort complex is the <<rep
setup.buildingtemplate.workshop>> is the blacksmith shop, currently being run by a <<urace
$g.tenant>> named <<rep $g.tenant>>. The <<man $g.tenant>> is a burly
grizzled <<urace $g.tenant>>, and <<their $g.tenant>> arms are covered by
bulky muscles from <<their $g.tenant>> daily work.
</p>

<p>
<<Yourrep $g.slaver>> can often be seen in the fort too — sometimes just chatting with the owner, and some other times actually helping out with <<them $g.tenant>>. As you recall, <<rep $g.slaver>> used to be a blacksmith <<themself $g.slaver>>, when they often made
<<if $g.slaver.getHomeland() == setup.Text.Race.REGIONS.city>>
craftmen's tools for the various people living in the <<lore region_city>>.
<<elseif $g.slaver.getHomeland() == setup.Text.Race.REGIONS.vale>>
slave cages for the various taverns in the <<lore region_vale>>.
<<elseif $g.slaver.getHomeland() == setup.Text.Race.REGIONS.forest>>
iron bows for the hunters of the <<lore region_forest>>.
<<elseif $g.slaver.getHomeland() == setup.Text.Race.REGIONS.desert>>
weapons for the raiders of the <<lore region_desert>>.
<<elseif $g.slaver.getHomeland() == setup.Text.Race.REGIONS.sea>>
various devices from the many needs in the land beyond the <<lore region_sea>>.
<<elseif $g.slaver.getHomeland() == setup.Text.Race.REGIONS.mist>>
demonic bondage tools in the land beyond <<lore concept_mist>>
<<else>>
many weapons in the land far beyond <<lore geo_mestia>>.
<</if>>
The resident blacksmith enjoys the company of your slaver, and occasional help too.
</p>

<p>
When you enter your office today, you found a big box covered with a clothes, together with a small card on top of it. It's a gift from <<yourrep $g.slaver>>, for the long time you've been having <<therace $g.slaver>> in your company. Opening the covering, you find a <<rep setup.item.f_slavebed_good_slaver>> inside — unlike normal slave cages, there are holes for all four limbs to be secured in, for more kinky plays or for punishment when they get too naughty. A unique present, that must surely be hand-crafted by your slaver and the resident blacksmith of your fort.
</p>

<p>
It doesn't happen often, but sometimes being the leader of a slaving company brings warmth to your heart, knowing that your slavers, despite how lazy, greedy, and incompetent they usually appear to be, still appreciate your leadership.
</p>


:: Event_boobs_collision [nobr] {"position":"1225,12725","size":"100,100"}
<<set _o = $g.slave.getBedchamberOtherSlave()>>

<<if !_o>>
/* Should not happen, but nice for testing: */
<<set _o = setup.getAnySlaver()>>
<</if>>

<p>
Although your private slaves spend most of their time inside the bedchamber, they don't just live there. They still occasionally go out from the room, either for exercise, bathe, or to perform other slave duties.
<<Yourrep $g.slave>> slave|is in a particular hurry today,
<<their $g.slave>>
<<if $g.slave.isHasTrait('breast_titanic')>>
gargantuan tits hampering <<them $g.slave>> badly
<<else>>
huge boobs getting in the way
<</if>>
as <<they $g.slave>> rushes around.
Returning from the baths to the bedchamber,
<<they $g.slave>> turns a corner and runs hard into
<<name _o>>.
Having just bathed, both slaves are nude, and the collision of their massive breasts
makes an audibly painful smack.
<<name $g.slave>> has enough momentum that <<they $g.slave>> overbears
the top-heavy <<name _o>> entirely.
The poor <<woman _o>> crashes backwards,
<<their _o>> butt hitting the floor with a slap.
<<name $g.slave>> lands on top of <<them _o>>, the fall and the sudden weight of <<name $g.slave>> on top of <<them _o>> driving the wind out of <<name _o>> with a whoosh.
</p>

<p>
"Sorry! I'm so sorry," apologizes <<name $g.slave>>.
<<They $g.slave>> starts to try to disentangle
<<themself $g.slave>> as <<name _o>> struggles to get <<their _o>>
breath back, but you see <<name $g.slave>>'s back stiffen.
<<They $g.slave>> stops trying to get up.
As the discomfort of the collision fades, <<they $g.slave>> notices the warmth of
<<name _o>> underneath <<them $g.slave>>, and the way their nipples are pressed against one another.
Impulsively, <<they $g.slave>> kisses <<name _o>> full on the lips,
<<if $g.slave.isHasTrait('breast_titanic') && _o.isHasTrait('breast_titanic')>>
even though the mass of boob between them is so massive that <<they $g.slave>> has to struggle to bring <<their $g.slave>> <<umouth $g.slave>> down to meet <<name _o>>'s.
<<else>>
squashing their boobs together hard so <<they $g.slave>> can reach despite the mass of soft flesh between them.
<</if>>
</p>

<p>
"H-hey," <<name _o>> gasps when <<name $g.slave>> finally breaks the lip lock, but <<they _o>>'s clearly not that displeased. <<name $g.slave>>, who has clearly forgotten running into the other slave entirely and now has other things on <<their $g.slave>> mind, begins to grind against <<them _o>>. When <<name _o>> smiles back at the horny <<woman $g.slave>> on top of <<them _o>>, <<name $g.slave>>

<<if $g.slave.isHasDick() && !$g.slave.isInChastity()>>

<<if !_o.isHasVagina()>>

pushes <<name _o>>'s legs apart<<if _o.isHasTail()>>, move aside <<their _o>> <<utail _o>><</if>> to rotate <<their _o>> hips, reaches down, and

<<if $g.slave.isHasTrait('dick_large')>>

<<if _o.isHasTrait('anus_gape')>>
rubs a little saliva on <<their $g.slave>> <<udick $g.slave>> before shoving it up <<name _o>>'s anus.
<<else>>
carefully pushes <<their $g.slave>> <<udick $g.slave>> up the whimpering <<name _o>>'s tight butt.
<</if>>
<<else>>

<<if _o.isHasTrait('anus_gape')>>
shoves <<their $g.slave>> cock up <<name _o>>'s anus, which is loose enough that <<they $g.slave>> doesn't need much lubrication.
<<else>>
pushes <<their $g.slave>> cock up the <<name _o>>'s willing butt.
<</if>>

<</if>>

<<else>>

reaches down

<<if $g.slave.isHasTrait('dick_large')>>

<<if _o.isHasVagina()>>
to insert <<their $g.slave>> <<udick $g.slave>> into <<name _o>>'s loose wet cunt.
<<else>>
and carefully pushes <<their $g.slave>> <<udick $g.slave>> into the whimpering <<name _o>>'s tight pussy.
<</if>>

<<else>>
reaches down
<<if _o.isHasVagina()>>
and inserts <<their $g.slave>> dick into <<name _o>>'s loose wet cunt.
<<else>>
to put <<their $g.slave>> dick inside <<name _o>>'s tight pussy.
<</if>>
<</if>>

<</if>>

<<else>>

starts to rub <<their $g.slave>> wet pussy against <<name _o>>'s
<<if (_o.isHasDick())>>
<<udick _o>>.
<<else>>
mons.
<</if>>

<</if>>

Once <<they _o>>'s gotten <<themself _o>> positioned,
<<name _o>> reaches around <<name $g.slave>>'s <<ubody $g.slave>> to grab <<their $g.slave>> ass.
<<They _o>> holds <<name $g.slave>> against <<them _o>> as <<name $g.slave>> starts humping gently, and cranes <<their _o>> neck up to kiss <<them $g.slave>>.
</p>

<<choose>>

<<opt "Fuck them">>

<p>
You approach the fucking slaves, kneeling next to them and running a possessive <<uhand $unit.player>> over <<name $g.slave>>'s butt.
These slaves are your personal slaves, and
<<they $g.slave>> doesn't even have to look, recognizing you by your grip, and greets you <<uadv $g.slave>>:
"Hi <<Master $unit.player>>!" <<name _o>>
<<if $g.slave.isFemale()>>
giggles
<<else>>
smiles
<</if>>
and cranes around to <<if !_o.isCanSee()>>see<<else>>greet you<</if>>.
"Hi <<Master $unit.player>>," <<they $g.slave>> choruses.
<<name $g.slave>> wiggles <<their $g.slave>> bottom under your <<uhand $unit.player>>, trusting your judgment, and <<name _o>> <<if !_o.isCanSee()>>watches<<else>>waits<</if>> to see what you'll do with anticipation.
</p>

<p>

<<if !$unit.player.isHasDick()>>

You decide to make use of the position the slaves have gotten themselves into. Once naked, you get on all fours ahead of them, and then back yourself between them until you're effectively sitting on the massive cushion formed between them by their breasts. This puts your pussy against <<name _o>>'s <<umouth _o>>,
and your butt right in front of <<name $g.slave>>'s face. <<name _o>> starts to eat you out with dedication, and after planting a wet kiss on each of your thighs, <<name $g.slave>> runs <<their _o>> tongue from the base of your cunt and along your perineum, and then begins to kiss your asshole. The universe of warm wetness created by their <<umouth $g.slave>>s is so intense that your <<uarms $unit.player>> almost buckle.

<<else>>

They don't have long to wait. There's no need to be excessively creative. You get behind them and start from the top, <<if $g.slave.isHasTail()>>raising <<their $g.slave>> tail and <</if>> laying your cock against <<name $g.slave>>'s back, which produces an anticipatory shudder. Moving down, you

<<if $g.slave.isHasTraitExact('anus_tight')>>

push your cock against <<name $g.slave>>'s tight asshole, causing <<them $g.slave>> to stiffen and struggle momentarily before it pops inside <<them $g.slave>>.
After giving <<their $g.slave>> butt a thorough fuck,
you move your wet cockhead down <<their $g.slave>> soft perineum

<<else>>

push your cock up <<name $g.slave>>'s asspussy, which accepts it with ease. After giving it a good hard reaming, you move your wet cockhead down <<their $g.slave>> soft perineum

<</if>>

<<if !$g.slave.isHasVagina()>>
and into the warm space between the two slaves for a little while.
<<else>>
and into <<their $g.slave>> cunt, giving it a good hard fuck.
<</if>>

Then you see to <<name _o>> beneath <<them $g.slave>>,

<<if _o.isHasVagina()>>
giving <<them _o>> a turn with <<their _o>> owner's cock inside <<their $g.slave>> womanhood before
<</if>>

giving <<them _o>> as hard a buttfuck as you can manage with <<name $g.slave>> between you.

Then you move back up, using them until you're spent and they're lying limply in a pool of sweat and tits.

<</if>>

</p>

<<opt "Dominate the clumsy slave's ass">>

<p>
You tell <<name $g.slave>> that that was very clumsy of <<them $g.slave>>. The slaves start with surprise, since they didn't know you were watching, producing a delightful jiggle of smashed-together boob.

"Yes <<Master $unit.player>>," <<name $g.slave>> says obediently, suspecting that you aren't done.
<<They $g.slave>>'s right. In an idle, speculative tone, you muse that with <<their $g.slave>> huge boobs pinning <<them $g.slave>> to the ground and <<name _o>> holding <<their $g.slave>> butt like that, <<they $g.slave>> can't get up.
"Yes <<Master $unit.player>>," <<they $g.slave>> agrees.

Quite helpless, you continue.

"Yes <<Master $unit.player>>," <<they $g.slave>> parrots.

Unable to escape, you conclude.
"Yes <<Master $unit.player>>," <<they $g.slave>> moans.
</p>

<p>
You tell <<name _o>> to

<<if (_o.isHasDick())>>

sodomize <<them $g.slave>>. <<name _o>> obeys hurriedly, shoving a <<uhand _o>> between their hips to

<<if _o.isHasTrait('dick_huge')>>

<<if $g.slave.isHasTrait('anus_gape')>>
shove <<their _o>> <<udick _o>> up <<name $g.slave>>'s loose anus.
<<else>>
carefully push <<their _o>> <<udick _o>> inside <<name $g.slave>>'s tight butthole.
<</if>>

<<name $g.slave>> rides <<name _o>> hard, knowing that the looser <<their $g.slave>> ass is, the easier whatever you're planning will be. <<name _o>>'s big tool gapes <<their $g.slave>> hole quickly.

<<else>>

<<if $g.slave.isHasTrait('anus_gape')>>
shove <<their _o>> <<udick _o>> inside <<name $g.slave>>'s loose anus.
<<else>>
push <<their _o>> <<udick _o>> up <<name $g.slave>>'s tight butthole.
<</if>>

<<name $g.slave>> rides <<name _o>> hard, knowing that the looser <<their $g.slave>> ass is, the easier whatever you're planning will be. <<name _o>>'s penis isn't big enough to gape <<them $g.slave>> very much, so <<name $g.slave>>, trying to be prepared, reaches around to shove an extra finger in alongside it.

<</if>>

You
<<if !$unit.player.isHasDick()>> put on a strap-on,<</if>>
stop <<their $g.slave>> desperate humping<<if !$unit.player.isHasDick()>>,<</if>> and shove <<their $g.slave>> torso back down against <<name _o>>'s boobs. <<name _o>> grabs hold of <<name $g.slave>>'s buttocks and pulls them as far apart as <<they $g.slave>> possibly can, removing all protection from <<name $g.slave>>'s already-full asshole. <<name $g.slave>> takes a deep breath and lets it out slowly as <<they $g.slave>> feels <<if !$unit.player.isHasDick()>>the head of the strap-on<<else>>your cockhead<</if>> press insistently against the outside of <<their $g.slave>> anus and then, centimeter by agonizing centimeter, seat itself up <<their $g.slave>> butt alongside <<name _o>>'s cock. <<They $g.slave>> shudders when you begin to thrust. <<name _o>>, overstimulated, climaxes first; as the edge comes off <<their _o>> hardon, <<their _o>> cock slides out of <<name $g.slave>>'s ass, letting you be utterly merciless to the loosened, cum-lubricated hole.

<<else>>

fingerfuck <<them $g.slave>>. <<name _o>> obeys hurriedly, reaching inward and

<<if $g.slave.isHasTrait('anus_gape')>>
pushing two fingers from each hand inside <<name $g.slave>>'s loose anus.
<<else>>
carefully pushing a finger from each hand up <<name $g.slave>>'s tight butthole.
<</if>>

<<name $g.slave>> begs <<name _o>> to fuck <<their $g.slave>> butt, knowing that the looser <<their $g.slave>> ass is, the easier whatever you're planning will be. <<name _o>> does <<their _o>> best, using <<their _o>> fingers to stretch <<name $g.slave>>'s sphincter as much as <<they _o>> can without hurting <<them $g.slave>>.

Once you're satisfied that <<they $g.slave>> can take what's coming, you<<if !$unit.player.isHasDick()>> put on a strap-on,<</if>> steady <<their $g.slave>> hips<<if !$unit.player.isHasDick()>>,<</if>> and shove <<their $g.slave>> torso back down against <<name _o>>'s boobs.
<<name _o>> pulls to either side, gaping <<name $g.slave>>'s hole for you. <<name $g.slave>> takes a deep breath and lets it out slowly as <<they $g.slave>> feels <<if !$unit.player.isHasDick()>>the head of the strap-on<<else>>your cockhead<</if>> slide between <<name _o>>'s fingers, centimeter by agonizing centimeter, and seat itself up <<their $g.slave>> butt. <<They $g.slave>> shudders when you begin to thrust. <<name _o>> keeps <<their $g.slave>> fingers where they are, doing <<their $g.slave>> best to use them to give you a handjob inside <<name $g.slave>>'s ass.
<</if>>
</p>

<p>
When you're done, you pull out, leaving <<name $g.slave>> to collapse, whimpering and shaking, onto <<name _o>>'s boobs. <<name _o>> <<if !_o.isCanSee()>>winks<<else>>smiles<</if>> at you over <<their _o>> shoulder. "That was fun <<Master $unit.player>>," <<they _o>> says <<uadv _o>>. "Can we do that again soon, please?"
</p>

<p>
"Ohh fffuck," <<name $g.slave>> moans into <<their $g.slave>> boobs, to no one in particular. "Please nooo, my poor hole will never be the same againnn."
</p>

<</choose>>


:: Event_boss_visit [nobr] {"position":"1100,17100","size":"100,100"}
<<include "Quest_boss_visit">>


:: Event_bouncer_needed [nobr] {"position":"1100,16725","size":"100,100"}
<<set _profit = setup.dutytemplate.questbrothelmanager.profit()>>
<<set _progress = setup.dutytemplate.questbrothelmanager.progress()>>
<<set _class = setup.dutytemplate.questbrothelmanager.class()>>
<<set _facility = setup.dutytemplate.questbrothelmanager.facility()>>
<<set _attraction = setup.dutytemplate.questbrothelmanager.attraction()>>
<<set _name = setup.dutytemplate.questbrothelmanager.brothelName()>>
<<set _gender = setup.dutytemplate.questbrothelmanager.gender()>>
<<set _describe = setup.dutytemplate.questbrothelmanager.describe()>>

<p>
The bandit attack last month on <<attach _describe>> highlights an important issue with your brothel: the lack of security.
<<if $g.owner.getSkill(setup.skill.combat) >= 40>>
While <<yourrep $g.owner>> owner|is no slouch in combat, <<they $g.owner>> alone won't be sufficient to keep the compound safe.
<<else>>
This is further compounded by <<yourrep $g.owner>>'s lack of combat ability.
<</if>>
</p>

<p>
The head whore, <<name $g.head>>, head|have suggested to your slaver to hire a bouncer or two, to keep the place safe from degenerates. While that's certainly a good idea, a bouncer's services won't come cheap. However, as the leader of a slaving company, you are in a unique position to offer an alternative solution: offer one of your dominant but obedient slaves as a permanently-stationed bodyguard instead. The slave would need to be sufficiently good as a bouncer, however, and must exhibit at least some qualities befitting of a proper bouncer. While the slave will be "freed", as long as they have been sufficiently trained and stamped out of their free will, they will become a free person in title only.
</p>


:: Event_bounties_of_the_sea [nobr] {"position":"850,19225","size":"100,100"}
<p>
After four full weeks, <<yourrep $g.slaver>>
slaver|have returned from their voyage into the <<lore region_sea>>, and it was a great success.
<<if $g.slaver.isHasTrait('bg_pirate')>>
With <<their $g.slaver>> hired crew, the ex-pirate was able to raid an undefended ship, just like <<their $g.slaver>> good ol' times. It seems the sea-dog has not lost <<their $g.slaver>> edge, and after splitting the bounties with <<their $g.slaver>> motley crew, your share comes out in the form of a rare slave, who is now waiting in the slave pens.
<<else>>
With <<their $g.slaver>> hired fishing boat, the ex-seaman was able to catch a myriad of strange sea creatures, which fetch for quite a large amount of sum in the markets of your fort. In the end, your profit amounts to a whopping <<money 5000>>, surely more than enough to cover the expenses of the trip.
<</if>>
</p>

<p>
Having voyaged into the sea once more, the slaver looks quite content with themselves, and <<their $g.slaver>> mood is much better in the coming weeks.
</p>


:: Event_broken_soul [nobr] {"position":"850,16600","size":"100,100"}
<<include 'Quest_broken_soul'>>


:: Event_broken_soul_wanders_in [nobr] {"position":"1100,16600","size":"100,100"}
<<set _u = setup.getAnySlaver()>>

<<if $fort.player.isHasBuilding('trainingchamber')>>

<p>
A strange dazed person has wandered into your fort, seemingly fully mindbroken,
and <<their $g.slave>> only
possession is <<their $g.slave>> clothes bearing <<their $g.slave>> name:
<<rep $g.slave>>.
Gazing aimlessly, the slave eventually hit <<yourrep _u>> who was busy
<<uhobbyverb _u>>. As punishment, <<rep _u>> brings the <<man $g.slave>>
into your <<rep setup.buildingtemplate.slavepens>> — perhaps the only
productive use of such a mindbroken slave.
</p>

<<else>>

<p>
With the <<rep setup.buildingtemplate.dungeons>> and the <<rep
setup.buildingtemplate.slavepens>> ready, your company can finally begin its
career as a proper slaving company. The incoming slaves will be temporarily located
in the <<rep setup.buildingtemplate.slavepens>>, and you can keep them
permanently in the <<rep setup.buildingtemplate.dungeons>> complex,
waiting either to be used or to be sold for profit.
</p>

<p>
As your slavers continue to clear more rubbles from the underground complex of the fort,
<<yourrep _u>> is surprised to find a living prisoner seemingly abandoned
in the ruins. <<They $g.slave>> slave|is a little bit malnourished, but is fine
otherwise — maybe one of the captives of the many raiding bands living in
the area. Your slaver's question as to why the slave was left alone here is
soon answered as they notice a blank look coming from the slave — it seems the slave
has been mindbroken and would worth nothing in the markets. From a nearby
parchment, you learn that slave's name is <<rep $g.slave>>.
</p>

<p>
With your dungeons mostly empty, it might be fine to take such a slave for now. Who
knows, maybe <<they $g.slave>> will be worth something to the right buyer.
</p>

<</if>>


:: Event_broken_wings [nobr] {"position":"100,16725","size":"100,100"}
<p>
Over the course of your company, you and your slavers have unknowingly
successfully restore bit by bit parts of <<yourrep $g.slave>>. <<Yourrep
$g.slaver>> thinks that it might be possible now to actually heal the slave
from whatever destroyed the slave's mind. It might restore the slave back to
working condition, suitable to be used by you and your slavers. But is it
worth the efforts?
</p>

<p>
Either way, the quest is now sitting on your desk, should you wish to complete it...
</p>


:: Event_brothel_cleanup [nobr] {"position":"100,16850","size":"100,100"}
<<include "Quest_brothel_cleanup">>


:: Event_brothel_decline [nobr] {"position":"350,16850","size":"100,100"}
<<set _profit = setup.dutytemplate.questbrothelmanager.profit()>>
<<set _progress = setup.dutytemplate.questbrothelmanager.progress()>>
<<set _class = setup.dutytemplate.questbrothelmanager.class()>>
<<set _facility = setup.dutytemplate.questbrothelmanager.facility()>>
<<set _attraction = setup.dutytemplate.questbrothelmanager.attraction()>>
<<set _name = setup.dutytemplate.questbrothelmanager.brothelName()>>
<<set _gender = setup.dutytemplate.questbrothelmanager.gender()>>
<<set _describe = setup.dutytemplate.questbrothelmanager.describe()>>

<p>
<<Yourrep $g.owner>> owner|come to you with bad news.
Unfortunately, <<attach _describe>> is getting old, and as a result it is no longer drawing as many customers as it used to. Expect the revenue to steeply decline from now on.
</p>

<p>
There are a couple of options you can take from here. There might be a possibility to rejuvenate the brothel from time to time, but it is unclear how effective this would. Alternatively, you can also close your brothel if you feel it is no longer making enough profit for you — you can do so by asking <<yourrep $g.owner>> directly about it. Finally, you might consider selling the brothel, should an offer come...
</p>

<p>
Should you wish to close or sell your brothel, you might be able to recruit
some of its workers back into your company.
</p>


:: Event_brothel_ex_whore [nobr] {"position":"100,17225","size":"100,100"}
<<set _profit = setup.dutytemplate.questbrothelmanager.profit()>>
<<set _progress = setup.dutytemplate.questbrothelmanager.progress()>>
<<set _class = setup.dutytemplate.questbrothelmanager.class()>>
<<set _facility = setup.dutytemplate.questbrothelmanager.facility()>>
<<set _attraction = setup.dutytemplate.questbrothelmanager.attraction()>>
<<set _name = setup.dutytemplate.questbrothelmanager.brothelName()>>
<<set _gender = setup.dutytemplate.questbrothelmanager.gender()>>
<<set _describe = setup.dutytemplate.questbrothelmanager.describe()>>
<<set _promotion = setup.dutytemplate.questbrothelmanager.promotion()>>
<<set _dom = setup.dutytemplate.questbrothelmanager.sub()>>

<p>
There are many people working in <<attach _describe>>, and not all of them are courtesans. There is of course <<yourrep $g.owner>>, who is responsible for managing the brothel. There are also the bouncers, including one of your former slave. And finally, there is <<name $g.head>>, a former whore who you have promoted as the brothel's
<<if _promotion == 'money'>>
business manager.
<<else>>
customer relations officer.
<</if>>
</p>

<p>
<<if _promotion == 'money'>>

As the business manager, the <<girl $g.head>> is almost always busily working in <<their $g.head>> office. <<They $g.head>> must ensure that resources are used within an appropriate limit, and also ensure that no expense went unrecorded. At the end of each day, <<name $g.head>> can often be seen working downstairs, ensuring that all the customer have paid for the services rendered.

<<else>>
As the customer relations officer, the <<girl $g.head>> is almost always seen working within the brothel. Whenever a customer looks unhappy, <<they $g.head>> approaches them, and tries <<their $g.head>> best to appease them. At the end of each day, <<name $g.head>> can usually be found near the entrance, bowing and thanking the customers for their patronage.
<</if>>
It's quite a busy life.
</p>

<<choose>>

<<opt "Give <<them $g.head>> a week of well-deserved vacation">>

<p>
The next day, you wait for <<them $g.head>> in <<their $g.head>> office, and give them an all-expenses-paid trip to the <<lore region_vale>>. When the diligent <<man $g.head>> tries to refuse, you insist, and eventually <<therace $g.head>> relents and agree to go on a vacation.
</p>

<p>
The vacation does wonder for the overworked <<name $g.head>>, and they never realize how jaded they had been up until the vacation. When <<they $g.head>> returns, <<they $g.head>> appears much more cheerful than before, and is able to work more efficiently than before. Your brothel's reputation increased slightly as a result.
</p>

<<run setup.qc.Money(-2000).apply($gQuest)>>
<<run setup.qc.VarAdd('quest_brothel_high_income', 6, -1).apply($gQuest)>>

<<opt "Enjoy some consensual sex with the hard-working <<man $g.head>>">>

<p>
When <<name $g.head>> head|return to <<their $g.head>> luxurious bedroom, <<they $g.head>> head|was surprised to find you lying on the bed naked. Taking the hint, <<they $g.head>> head|leap into the bed, and you slowly caress the overworked <<urace $g.head>>. You make out for a while under the sheets, before going raunchier and raunchier into the night. Neither of you get too much sleep that night, but despite that, in the next day <<name $g.head>> appears more refreshed and less jaded than ever.
</p>

<<run setup.qc.VarAdd('quest_brothel_high_income', 2, -1).apply($gQuest)>>

<</choose>>


:: Event_brothel_expansion [nobr] {"position":"600,16850","size":"100,100"}
<<include "Quest_brothel_expansion">>


:: Event_brothel_focus [nobr] {"position":"850,16850","size":"100,100"}
<<include "Quest_brothel_focus">>


:: Event_brothel_focus_ii [nobr] {"position":"1100,16850","size":"100,100"}
<<include "Quest_brothel_focus_ii">>


:: Event_brothel_high_season [nobr] {"position":"350,17225","size":"100,100"}
<<include "Quest_high_brothel_season_dom_">>


:: Event_brothel_palace [nobr] {"position":"100,16975","size":"100,100"}
<<include "Quest_brothel_palace">>


:: Event_brothel_pickup [nobr] {"position":"850,15725","size":"100,100"}
<p>
Today, you have half a mind to tie up <<yourrep $g.slaver>> in your office as
decoration. <<Theslaver $g.slaver>> had fallen victim to a pick-up scam: <<they $g.slaver>>
slaver|was promised great rewards in exchange for lending the
slave <<rep $g.victim>> for a single week. And of course, the slave never
came back, and the supposed business partner disappears into the vast deserts of the
east...
</p>

<p>
As much as you'd like to castrate <<yourrep $g.victim>> for the stupidity, you
also took a little part of the blame: this is probably done in part in
retaliation for your recent transgressions against the <<rep
$company.humandesert>>. Either way, the task now falls onto your <<uhands $unit.player>>.
<<uneedrescue $g.victim>>.
</p>


:: Event_brothel_promotion [nobr] {"position":"350,16975","size":"100,100"}
<<include "Opportunity_brothel_promotion">>


:: Event_brothel_rejuvenation [nobr] {"position":"600,17225","size":"100,100"}
<<include "Quest_brothel_rejuvenation">>


:: Event_brothel_reopening [nobr] {"position":"600,16975","size":"100,100"}
<<include "Opportunity_brothel_reopening">>


:: Event_brothel_security [nobr] {"position":"850,16975","size":"100,100"}
<<include "Quest_brothel_security">>


:: Event_brothel_suite [nobr] {"position":"850,17225","size":"100,100"}
<<include "Opportunity_brothel_suite">>


:: Event_brothel_training [nobr] {"position":"1100,16975","size":"100,100"}
<<include "Quest_brothel_training">>


:: Event_brothel_volunteer [nobr] {"position":"1100,17225","size":"100,100"}
<<if $g.head.isFemale()>>
  <<set $g.volunteer = $g.volunteer_female>>
<<else>>
  <<set $g.volunteer = $g.volunteer_male>>
<</if>>

<<include "Opportunity_brothel_volunteer">>


:: Event_busy_brothel [nobr] {"position":"100,17350","size":"100,100"}
<<set _profit = setup.dutytemplate.questbrothelmanager.profit()>>
<<set _progress = setup.dutytemplate.questbrothelmanager.progress()>>
<<set _class = setup.dutytemplate.questbrothelmanager.class()>>
<<set _facility = setup.dutytemplate.questbrothelmanager.facility()>>
<<set _attraction = setup.dutytemplate.questbrothelmanager.attraction()>>
<<set _name = setup.dutytemplate.questbrothelmanager.brothelName()>>
<<set _gender = setup.dutytemplate.questbrothelmanager.gender()>>
<<set _describe = setup.dutytemplate.questbrothelmanager.describe()>>
<<set _promotion = setup.dutytemplate.questbrothelmanager.promotion()>>
<<set _dom = setup.dutytemplate.questbrothelmanager.sub()>>

<p>
Given the sexual nature of the neko living in the <<lore location_npc>>, brothels there occupy an important part of the culture. Citizens visit the brothel often to select from the available merchandise, relieve their sexual needs, and leave. Some brothels even simulate affection, companionship, or emotional guidance.
</p>

<p>
Your brothel, <<attach _describe>> is one of the best establishment of its kind in the <<lore location_npc>>.
Citizens who patronize it can expect themselves to be very satisfied by the skilled courtesans.
<<if _dom == 'sub'>>
The courtesans have been extensively trained to specialize in the act of being submissive sluts, and your place is often voted best brothel for doms in the region.
<<elseif _dom == 'dom'>>
The proud and dominant courtesans are quite famous in the city, and many citizens harbor a secret desire to be dominated by the tough bitches.
<<else>>
The brothel has it all — be it to dominate others, to be dominated, or somewhere in between.
<</if>>
<<if _promotion == 'favor'>>
The customer relations officer <<name $g.head>> makes extra sure that the customers always leave the compound with a smile on their faces (not to mention the lighter feeling in their pockets).
<</if>>
</p>

<p>
The brothel really reflects well on you and your company, and perhaps you could so something with it.
</p>

<<choose>>

<<opt "Surprise the hardworking courtesans with a week of rest">>

<p>
The problem with assembly-line sex is that it has a tendency to destroy any sense of intimacy or fun. So, you make some simple preparations and close the brothel for a week. Several freelancers were hired to staff the brothel, and the brothel is then made available exclusively to all your brothel's workers, including the grateful courtesans. They are free to do anything they want, and many spend the days playing games, enjoying light amusements, and perusing the brothel's many services as a customer.
The <<girl $g.slave>>s are surprised by your generosity, but they have fun. When the brothel reopens, your customer give glowing reviews for the courtesans newfound enthusiasm, which increases the brothel's fame.
</p>

<<run setup.qc.VarAdd('quest_brothel_high_income', 2, -1).apply($gQuest)>>

<<opt "Eliminate prices for one day to promote the brothel">>

<p>
The news that
<<if _class > 0>>
entertainment
<<else>>
sex
<</if>>
will be free at the brothel travels like wildfire.
You had to pay to hire extra security measures to control the throng that spends the entire day entering and leaving the brothel, though as the day goes on the crowds thin. By noon,
<<if _dom == 'dom'>>
<<if $g.head.isHasDick()>>
all the pricks on offer are so sore that only those who fetishize cum-less orgasms stick around.
<<else>>
all the doms are already so tired that only those who fetishize reverse power play stick around.
<</if>>
<<elseif _dom == 'sub'>>
all the holes on offer are so fucked out that only those who fetishize that sort of thing stick around.
<<else>>
all the holes on offer <<if $g.head.isHasDick()>> as well as the pricks<</if>> are so sore that only those who fetishize that sort of thing stick around.
<</if>>
The brothel is a real seminal sewer by afternoon,
and it smells like it. Nevertheless, free sex is a short route to public approval, although you do miss out on the fees.
</p>

<<run setup.qc.Money(-2000).apply($gQuest)>>
<<run setup.qc.Favor('neko', 100).apply($gQuest)>>

<</choose>>


:: Event_cage_relief [nobr] {"position":"225,12850","size":"100,100"}
<p>
You come face to face with <<yourrep $g.slave>> in a hallway of your
bedchamber wing, entirely by happenstance.
<<if $g.slave.isCanSee()>><<Their $g.slave>> <<ueyes $g.slave>> lock with yours, and <<they $g.slave>> stares at you dumbly for a long moment<<else>>Once <<they $g.slave>> regains <<their $g.slave>> footing after bumping into you, <<they $g.slave>> gazes towards you dumbly for a long moment<</if>>.
Then <<they $g.slave>> squares <<their $g.slave>> <<if $g.slave.isHasTrait('muscle_strong')>>broad<</if>> shoulders and bites <<their $g.slave>> lower lip, obviously doing <<their $g.slave>> best to think quickly. Right when you're about to reprimand <<their $g.slave>> for not greeting you properly, <<they $g.slave>> surprises you by throwing <<themself $g.slave>> abjectly on the ground in front of you.
</p>

<p>

<<if !$g.slave.isCanTalk()>>

<<They $g.slave>> uses gestures to apologize for <<their $g.slave>> rudeness, and then gets to <<their $g.slave>> knees so <<they $g.slave>> can use <<their $g.slave>> <<uhands $g.slave>> to gesture more clearly. <<Their $g.slave>> <<uhands $g.slave>> are shaky as <<they $g.slave>> begs, making two false starts before unmistakably gesturing to ask you to remove <<their $g.slave>> <<ucgenital $g.slave>>. Once <<they $g.slave>> sees that you understand, <<they $g.slave>> begins to <<if $g.slave.isFemale()>>cry<<else>>beg<</if>> openly.
<<They $g.slave>> gestures that <<they $g.slave>> can barely get off wearing <<their $g.slave>> chastity cage, that it hurts when <<they $g.slave>> does, and that <<they $g.slave>>'s constantly oppressed by the need for release. <<They $g.slave>> begs hard, and promises to remain a good little bitch.

<<else>>

"Please, <<Master $unit.player>>," the prostrate slave says shakily, sounding like <<they $g.slave>>'s on the verge of tears.
"P-please remove my chastity cage."
Hearing <<themself $g.slave>> say it, <<they $g.slave>> begins to cry openly.
"I c-can't t-take it anymore. I can b-barely get off wearing this cage on my dick, and when I d-do, it h-hurts," <<they $g.slave>> sobs. "I need to g-g-get off s-so bad. Please, please!" <<They $g.slave>> looks up at you in supplication, tears streaking <<their $g.slave>> face. "Please, <<Master $unit.player>>! I'll continue being s-such a good little bitch, I promise!"

<</if>>

</p>

<<choose>>

<<opt "Help <<them $g.slave>> get off">>

<p>
You take <<them $g.slave>> by the <<uhand $g.slave>> and pull <<them $g.slave>> to <<their $g.slave>> <<ufeet $g.slave>>, and then kiss <<them $g.slave>>.
<<They $g.slave>> knows that this means no, but melts into you anyway, accepting the comforting gesture for what it is. <<They $g.slave>>'s surprised when you do not break the kiss, but continues to make out with you compliantly. You take <<them $g.slave>> by the <<uhands $g.slave>>,
intertwining your fingers with <<theirs $g.slave>> and holding them down at your sides for a while before wrapping <<their $g.slave>> <<uarms $g.slave>> around you at your <<uwaist $unit.player>><<if $g.slave.isHasTail()>>,
before feeling up <<their $g.slave>> <<utail $g.slave>><</if>>.
Your <<uhands $unit.player>>, thus freed to grope <<them $g.slave>>, tenderly hold <<their $g.slave>> head and neck instead, cupping <<their $g.slave>> <<if $g.slave.isHasTrait('face_beautiful')>>gorgeous<<elseif $g.slave.isHasTrait('face_attractive')>>pretty<<else>>homely<</if>> jawline and making <<them $g.slave>> moan at the intimacy.
</p>

<p>
<<They $g.slave>>'s completely forgotten <<their $g.slave>> troubles,
and you see that it stays that way.
Whenever <<they $g.slave>>'s in danger of achieving an erection, which would remind <<them $g.slave>> of <<their $g.slave>> chastity cage with a twinge of discomfort, you cool your makeout session off slightly, massaging <<them $g.slave>> capably instead of kissing <<them $g.slave>> deeply. After some time, <<they $g.slave>> shudders, to <<their $g.slave>> own complete surprise and to your unsurprised satisfaction.
<<They $g.slave>>'s just done what in a normal sexual encounter would be considered premature ejaculation, since you wrought <<them $g.slave>> to such a subtle state of arousal that <<they $g.slave>> got off without really getting hard, <<their $g.slave>> ejaculate leaking down <<their $g.slave>> cage.
<<They $g.slave>> can muster no coherent response, but hugs you convulsively,
sobbing into your <<if $unit.player.isHasBreasts()>>boobs<<else>><<if $unit.player.isHasTrait('muscle_strong')>>strong<</if>> shoulder<</if>> with gratitude and release.
</p>

<p>
The discomfort returns in less than half an hour.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<opt "Remove <<their $g.slave>> chastity cage for a while">>

<p>
You agree to remove the cage for a while, on the condition that <<they $g.slave>> be a good little bitch like <<they $g.slave>> promised.
<<They $g.slave>> thanks you frantically, watching with mixed relief and gratitude as you unlock <<their $g.slave>> <<ucgenital $g.slave>>.
Freed from the cage after a long while, <<their $g.slave>> <<udick $g.slave>> immediately reaches an incredible erection. It only took a couple of strokes to make the overfull <<uballs $g.slave>> spurt their content into your <<uhand $g.slave>>, to the great joy and gratitude from the slave. You place your cum-soaked <<uhand $unit.player>> in front of <<their $g.slave>> face, for <<them $g.slave>> to lick clean enthusiastically while your other <<uhand $unit.player>> locks <<their $g.slave>> <<ucgenital $g.slave>> back onto <<their $g.slave>> now flaccid dick.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<opt "Use <<their $g.slave>> cage to torture <<them $g.slave>>">>

<p>
You make no reply at all, but walk around to stand behind the slave.
<<They $g.slave>> knows <<they $g.slave>>'s fucked, and starts to shake with fear. You put a <<ufoot $unit.player>> on <<their $g.slave>> ass and shove <<them $g.slave>> down to lie flat on the <<utile $g.slave>>,
and then straddle <<them $g.slave>>, shoving <<if $unit.player.isHasDick()>>your cock up <<their $g.slave>> butt<<else>>one more finger than <<they $g.slave>> can comfortably take up <<their $g.slave>> butt<</if>>.
<<They $g.slave>> tries to beg some more, but you give <<them $g.slave>> a warning slap, and <<they $g.slave>> shuts up. Despite your roughness, <<they $g.slave>>'s so horny that <<they $g.slave>> starts to get hard. You can't see or feel this directly, of course, but it's easy to tell from <<their $g.slave>> desperate sobbing and involuntary writhing, and the lovely spasming of <<their $g.slave>> anal sphincter. <<Their $g.slave>> tears dry up as <<they $g.slave>> builds towards a climax; orgasm might be an uncomfortable experience for <<them $g.slave>>, but it will buy <<them $g.slave>> a few minutes free of discomfort.
</p>

<p>
But <<they $g.slave>>'s to be disappointed. You
<<if $unit.player.isHasDick()>>worm a <<uhand $unit.player>> down between <<their $g.slave>> ass and your stomach, and shove a finger up inside <<their $g.slave>>, alongside your dick<<else>>use the <<uhand $unit.player>> that isn't fucking <<them $g.slave>> to pull one of <<their $g.slave>> <<uarms $g.slave>> around behind <<them $g.slave>> into a painful joint lock<</if>>.
<<if $g.slave.isMasochistic()>>
You intended to use the sudden pain to ruin <<their $g.slave>> building orgasm,
but it backfired spectacularly when you remember the masochistic nature of this slave.
The pain only amplifies <<their $g.slave>> pleasure, and <<they $g.slave>> cums painfully, strings of ejaculate dripping down <<their $g.slave>> tortured and caged cock.
<<else>>
The pain ruins <<their $g.slave>> building orgasm, and <<they $g.slave>> begs with frustration and despair as <<they $g.slave>> realizes that <<they $g.slave>> won't be getting off today. You force <<them $g.slave>> to experience this horrible near-release twice more, bringing <<them $g.slave>> to a terribly uncomfortable state of arousal and then using sudden pain to destroy any chance <<they $g.slave>> has of getting relief. All the wriggling and jerking around is good for you, though.
<</if>>
</p>

<<run setup.qc.FriendshipWithYou('slave', -50).apply($gQuest)>>

<</choose>>


:: Event_change_to_position [nobr] {"position":"850,14475","size":"100,100"}
<<include "Opportunity_change_to_position">>


:: Event_choose_your_own_adventure_chapter_2 [nobr] {"position":"1100,17475","size":"100,100"}
<<include "Opportunity_choose_your_own_adventure__chapter_2">>


:: Event_choose_your_own_adventure_chapter_3 [nobr] {"position":"100,17600","size":"100,100"}
<<include "Opportunity_choose_your_own_adventure__chapter_3">>


:: Event_choose_your_own_adventure_chapter_4 [nobr] {"position":"350,17600","size":"100,100"}
<<include "Opportunity_choose_your_own_adventure__chapter_4">>


:: Event_choose_your_own_adventure_final_chapter [nobr] {"position":"600,17600","size":"100,100"}
<p>
Once again the book bearing the sloppy written "Choose Your Own Adventure"
appears on your desk.
By now it proves to be an enjoyable read for you and happily await its
return.
You recall that so far, you have made <<=
$varstore.get('choose_your_own_adventure_changes')>> modifications to the
story,
<<if $varstore.get('choose_your_own_adventure_changes') > 2>>
a quite significant number of changes, which greatly alters the
<<= $varstore.get('choose_your_own_adventure_siblings')>>'s
fate.
<<else>>
a modest amount of changes, barely tampering with the
<<= $varstore.get('choose_your_own_adventure_siblings')>>'s fate.
<</if>>
</p>

<p>
You open what seems to be the final chapter of the book, Chapter 5, and begin to read...
</p>


:: Event_cleaning_punishment [nobr] {"position":"475,12850","size":"100,100"}
<p>
<<Yourrep $g.slave>> clearly isn't working as hard as <<they $g.slaver>> should.
And this does not escape
the
<<if $g.slaver.isHasTrait('per_attentive')>>
attentive
<</if>>
eyes of <<yourrep $g.slaver>>, who once worked <<themself $g.slaver>> as a house-servant.
In fact, right now <<rep $g.slaver>> has <<them $g.slaver>> bent over with <<their $g.slaver>> buttocks bare, and is administering a punishing spanking.
<<Reps $g.slave>> <<uskin $g.slave>> is starting to show the force of the beating, and <<they $g.slave>> slave|is begging desperately for mercy.
</p>

<p>
<<name $g.slaver>>, meanwhile, is obviously enjoying torturing the poor servant for <<their $g.slaver>> failings. <<They $g.slaver>>'s
<<if $g.slaver.isHasDick()>>jacking off furiously
<<else>>rubbing <<their $g.slaver>> sopping pussy<</if>> with <<their $g.slaver>> other <<uhand $g.slaver>>,
getting close to orgasm as the servant begs and moans.
</p>

<<choose>>

<<opt "Fuck <<reps $g.slave>> mouth as <<rep $g.slaver>> beats <<them $g.slaver>>">>

<p>
You ask <<yourrep $g.slaver>> to continue the spanking.
<<Rep $g.slave>> has one anguished second to realize what's happening before you
<<ustrippantsand $unit.player>>
shove yourself <<if (!$unit.player.isHasDick())>>against <<their $g.slaver>> <<umouth $g.slave>><<else>>down <<their $g.slaver>> throat<</if>>. <<They $g.slaver>> gags reflexively, jerking back, only to jerk forward again in automatic pain avoidance when <<name $g.slaver>> hits <<their $g.slaver>> already-sore buttocks yet again. <<They $g.slaver>>'s broken enough to understand that <<they $g.slaver>> needs to relax and let <<themself $g.slaver>> be abused, but <<their $g.slaver>> <<ubody $g.slave>>'s reflexive responses deny <<them $g.slaver>> the relief that might give.
<<if $g.slave.isHasTrait('per_cruel')>>
The sadistic <<urace $g.slave>>
comes twice before you do, a deliciously cruel expression on <<their $g.slaver>> face.
<<else>>
You eventually
<<if $unit.player.isHasDick()>>
climaxes, sending torrent of cum straight down the slave's throat.
<<else>>
climaxes with the slave's <<umouth $g.slave>> still deep within your pussy.
<</if>>
<</if>>
Your abuse combined with the punishing slaps ensures that <<rep $g.slave>> learns <<their $g.slave>> lessons, promising to be more diligent next time.
</p>

<<run setup.qc.FriendshipWithYou('slaver', 150).apply($gQuest)>>
<<run setup.qc.FriendshipWithYou('slave', -150).apply($gQuest)>>

<<opt "Show mercy">>

<p>
The slave's continued begging and sobbing tugs at your heart, and you finally give in. You gently ask <<yourrep $g.slaver>> to cease the punishment, and the
<<if $g.slaver.isHasTrait('per_cruel')>>
cruel
<</if>>
slaver grudgingly let the slave go.
While the slave certainly appreciate your timely intervention, the slaver
most certainly do not, and you the two of you grow somewhat more distant as a result.
</p>

<<run setup.qc.FriendshipWithYou('slaver', -150).apply($gQuest)>>
<<run setup.qc.FriendshipWithYou('slave', 150).apply($gQuest)>>

<</choose>>


:: Event_clerk_exercise [nobr] {"position":"1100,19225","size":"100,100"}
<<include "Opportunity_clerk_exercise">>


:: Event_clerk_exercise_outcome [nobr] {"position":"100,19350","size":"100,100"}
<p>
Two months ago, <<yourrep $g.slaver>> asked to take a short break from <<their $g.slaver>> slaving duties to work on <<their $g.slaver>> physique. And today, the results of <<their $g.slaver>> hard work is finally here.
The slaver indeed looks better than ever.
<<if $gQuest.getSeed() % 2 == 0>>
You can see the obvious muscles on the slaver now, a far cry from <<their $g.slaver>> previously lanky form.
<<elseif $gQuest.getSeed() % 2 == 1>>
The slaver is running laps almost effortlessly on the <<rep setup.buildingtemplate.traininggrounds>> now, <<their $g.slaver>> endurance having increased so much from before.
<</if>>
And <<therace $g.slaver>> slaver|know it too. <<They $g.slaver>> slaver|is now ready to return to <<their $g.slaver>> slaving duties, and with a good mood too.
</p>


:: Event_cold_blooded [nobr] {"position":"350,15850","size":"100,100"}
<p>
  As you walk around the fort, you see <<yourrep $g.victim>> making <<their $g.victim>> way walking past
  the river next to the fort, just after <<they $g.victim>> finish <<uhobbyverb $g.victim>>.
  A ripple forms in the water and suddenly a lizardkin warrior leaps from the water.
  You are too far to do anything but watch as <<rep $g.victim>> victim|is
  dragged away from your fort and into the water.
  By the time you arrive at the river, neither the lizardkin nor your <<urace $g.victim>> slaver
  are anywhere to be seen.
</p>

<p>
  This is no doubt a retaliation attempt from <<rep $company.lizardkin>> for
  the relatively evil deeds you have performed against them.
  No use in dwelling on that for now though -- <<uneedrescue $g.victim>>.
</p>


:: Event_combat_training [nobr] {"position":"350,19350","size":"100,100"}
<p>
Even after joining your company as a slaver, <<yourrep $g.slaver>> still have some of their old habits from <<their $g.slaver>> days as a
<<if $g.slaver.isHasTrait('bg_knight')>>
knight.
<<elseif $g.slaver.isHasTrait('bg_mercenary')>>
mercenary.
<<else>>
soldier.
<</if>>
One of them is the daily combat practice that <<they $g.slaver>> almost religiously do on the <<rep setup.buildingtemplate.traininggrounds>>.
<<if $g.slaver.isHasTrait('bg_knight')>>
The daily combat practice is necessary to allow <<them $g.slaver>> to wear <<their $g.slaver>> knight armor in the past, and <<they $g.slaver>> slaver|is unable to break out of the habit of practicing for this purpose.
<<elseif $g.slaver.isHasTrait('bg_mercenary')>>
The daily combat practice had ensured <<their $g.slaver>> survival as a mercenary, and <<they $g.slaver>> slaver|is not keen on forgetting it anytime soon.
<<else>>
The daily combat practice was drilled deep within <<their $g.slaver>> psyche by <<their $g.slaver>> previous army instructor, and it stays true even to the current day.
<</if>>
</p>

<p>
In fact, right now <<they $g.slaver>> slaver|is practicing, swinging <<their $g.slaver>> <<uweapon $g.slaver>> back and forth while counting.
<<They $g.slaver>> is
<<if $g.slaver.isHasBreasts()>>
shirtless, with only <<their $g.slaver>> underwear to cover <<their $g.slaver>> <<ubreasts $g.slaver>>. The muscles underneath contract and flex with <<their $g.slaver>> every move.
<<else>>
shirtless, <<their $g.slaver>>
<<ubreasts $g.slaver>> contracting and flexing with <<their $g.slaver>> every move.
<</if>>
It is actually quite sexy looking at <<therace $g.slaver>> training the various parts of <<their $g.slaver>> muscles.
</p>

<<choose>>

<<opt "Spar with <<them $g.slaver>>">>

<p>
You bring your own <<uweapon $g.you>> and approach <<yourrep $g.slaver>>. <<Therace $g.slaver>> slaver|is more than happy to have a training partner, breaking the monotony of training alone, and the two of you proceed to spar earnestly.
</p>

<<set _res = setup.Skill.skillCheckCompare($unit.player, $g.slaver, setup.skill.combat)>>

<p>
<<if _res == 2>>
Unfortunately, your combat prowess is simply too good, and before you realize it, <<yourrep $g.slaver>> slaver|is lying injured in front of you.
<<run setup.qc.Injury('slaver', 1).apply($gQuest)>>
<<elseif _res == 1>>
It was close, but you manage to clutch the sparring fight out and win against the
former
<<if $g.slaver.isHasTrait('bg_knight')>>
knight.
<<elseif $g.slaver.isHasTrait('bg_mercenary')>>
mercenary.
<<else>>
soldier.
<</if>>
<<elseif _res == -1>>
It was close, but the former <<if $g.slaver.isHasTrait('bg_knight')>>
knight
<<elseif $g.slaver.isHasTrait('bg_mercenary')>>
mercenary
<<else>>
soldier
<</if>>
catches you off-guard and cause you to fall flat into the ground, signifying your defeat.
<<else>>
Unfortunately, your combat prowess is nowhere near <<reps $g.slaver>>, and <<they $g.slaver>> accidentally injured you during the practice even after so much holding back.
<<run setup.qc.Injury('you', 1).apply($gQuest)>>
<</if>>
Still, it was all in good fun, and the two of you become closer through the exercise.
<<run setup.qc.FriendshipWithYou('slaver', 200).apply($gQuest)>>
</p>

<<opt "Watch <<them $g.slaver>> train">>

<p>
It's quite mesmerizing how <<rep $g.slaver>> slaver|is able to maintain a rhythm swinging <<their $g.slaver>> <<uweapon $g.slaver>> while counting out loud. Your focus starts to switch too — while initially you were just looking at <<their $g.slaver>> sweaty <<ubody $g.slaver>>, you start to catch some of the techniques <<they $g.slaver>> slaver|was using to keep the weapon steady. In the end, you feel you've learned a thing or two from just watching the slaver exercised.
</p>

<<run setup.qc.ExpUnit('you', 2).apply($gQuest)>>

<</choose>>


:: Event_coming_of_age [nobr] {"position":"100,12600","size":"100,100"}
<<set _mom = $family.getUnitRelation($g.child, setup.familyrelation.mother)>>
<<set _dad = $family.getUnitRelation($g.child, setup.familyrelation.father)>>
<<set _u = setup.getAnySlaver()>>
<p>
Today marks the 18-th birthday of <<rep $g.child>>, which if you recall
correctly was the <<daughter $g.child>> of
<<if _mom && _mom.isSlaver()>>
<<yourrep _mom>>.
<<else>>
a former slaver in your employ.
<</if>>
Now comes the day where you need to decide what to do with the <<lass $g.child>>.
You can try asking <<yourrep _u>> for advice, but on a second thought these
personal matters are best resolved with your own <<uhands $unit.player>>.
</p>


:: Event_company_history_ledger [nobr] {"position":"600,19350","size":"100,100"}
<p>
As you work as usual in your office today, <<yourrep $g.slaver>> slaver|come knocking on the office door. Entering, the slaver slaver|is carrying a large stack of books, almost covering <<their $g.slaver>> entire face.
<<if $g.slaver.isHasTrait('per_attentive')>>
But despite that, the attentive <<urace $g.slaver>> managed to maintain <<their $g.slaver>> balance and place the tall stack of books on your desk. You
<<else>>
You are not surprised when <<therace $g.slaver>> lost balance and the books scattered across the floor of your office.
After you help the
<<if $g.slaver.isHasTrait('per_dreamy')>>
clumsy
<</if>>
slaver pick up all the books and place them on your desk, you
<</if>>
then ask what these books are about.
</p>

<p>
Apparently, the ex-scholar has been spending quite a time chronicling your company's misdeeds into a series of books. Indeed, the first book seemingly detail the start of your company, from its humble beginnings where the fort is nothing but a ruined remnants of a long-lost castle.
<<if $g.slaver.getSpeech() == setup.speech.friendly>>
The book is very fun to read, almost like a storybook.
<<elseif $g.slaver.getSpeech() == setup.speech.bold>>
The book tells your company's story in a grand way, and sometimes even take creative liberties in explaining the more mundane things.
<<elseif $g.slaver.getSpeech() == setup.speech.cool>>
The book gets straight to the point, and is very easy to complete in one go.
<<elseif $g.slaver.getSpeech() == setup.speech.witty>>
The book is full of humor, and you laugh at some of the jokes being told here and there.
<<elseif $g.slaver.getSpeech() == setup.speech.debauched>>
The book is very fun to read, no small thanks to the many sexual snippets being inserted here and there — accurate ones too!
<</if>>
</p>

<p>
This is an amazing chronicle, and while the book won't go anywhere, you might want to share it with the rest of your company.
</p>

<<choose>>

<<opt "Share it with the rest of your company">>

<p>
You share the great news with the rest of your slaving company, and they greatly enjoy the read. Meanwhile, <<yourrep $g.slaver>>
<<if $g.slaver.isHasTrait('per_humble')>>
slaver|is completely humbled
<<else>>
slaver|look very pleased with <<themself $g.slaver>>
<</if>>
by the book's reception. <<name $g.slaver>> slaver|is on the tongue of every conversation that night, and <<therace $g.slaver>>'s mood increase in the coming weeks.
</p>

<<run setup.qc.FriendshipWithYou('slaver', 5).apply($gQuest)>>

<<opt "Keep it in your office for a day and share it with visitors">>

<p>
For the rest of the week, you keep the tomes in your office. Many visitor takes interest in them, and they gain a new appreciation for how far the company has come from its humble beginnings. Your company's reputation increase slightly among the nearby residents.
</p>

<<run setup.qc.Favor('humankingdom', 20).apply($gQuest)>>
<<run setup.qc.Favor('humanvale', 20).apply($gQuest)>>

<</choose>>


:: Event_company_rug [nobr] {"position":"850,19350","size":"100,100"}
<p>
<<Yourrep $g.slaver>> slaver|is pretty good with <<their $g.slaver>> <<uhands $g.slaver>>, and often slaver|use them to make various small crafts before and still after your joining your company.
In fact, <<they $g.slaver>> slaver|have just gifted you one of <<their $g.slaver>> creations: a rug embroided with the logo of your company.
</p>

<p>
It's a very well-crafted rug, and it must have taken <<therace $g.slaver>> quite some time to finish it. The edges are soft, the materials are durable, and the logo is most certainly drawing attention to the rug. After thanking the slaver, you retreat to your office and place the rug at its entrance for the time being, before you decide on a more permanent use for it.
</p>


:: Event_connected_slaver [nobr] {"position":"1100,19350","size":"100,100"}
<p>
Today, you are greeted with the strangest of good news.
One of your missing slavers, <<rep $g.rescue>>, rescue|have somehow reappear inside the <<rep setup.buildingtemplate.prospectshall>>, and ready to join your company back.
</p>

<p>
Apparently, <<they $g.rescue>> rescue|have been independently rescued by <<yourrep $g.slaver>>.
<<if $g.slaver.isHasTrait('bg_informer')>>
<<Therace $g.slaver>> slaver|have utilized <<their $g.slaver>> prior connections from when <<they $g.slaver>> slaver|was making <<their $g.slaver>> living as an informer, and slaver|have rescued your missing slaver.
<<elseif $g.slaver.isHasTrait('bg_boss')>>
<<Therace $g.slaver>> slaver|have decided to borrow utilize <<their $g.slaver>> vast connection in the criminal underworld to locate and rescue your missing slaver.
<<else>>
<<Therace $g.slaver>> slaver|have used <<their $g.slaver>> wide network of connections to ultimately rescue your missing slaver.
<</if>>
An incredible feat, and you make notes to thank <<theslaver $g.slaver>> personally later.
</p>


:: Event_consensual_topping [nobr] {"position":"725,12850","size":"100,100"}
<<set _top = $g.top>>
<<set _bot = $g.top.getLover()>>

<<if _bot>>

<p>
As you stroll outside past the slavers lodgings area of your fort, you hear a
lewd slap, slap, slap coming from <<yourrep _top>>'s room. Sneaking in
through the window, you are not at all surprised that <<their _top>> lover
<<rep _bot>> is inside.
<<Rep _bot>> has clearly had a long day, and is tired, but <<they _bot>>'s
being a good lover and letting <<rep _top>> use <<their _bot>> body.
<<Rep _bot>> is lying facedown on their bed, arms crossed under <<their _bot>> head,
<<if _bot.isHasTail()>>tail raised,<</if>>
looking quite relaxed.
<<They _bot>> has a couple of pillows tucked under <<their _bot>> hips to raise them so that <<their _bot>> sweetheart can fuck <<them _bot>> comfortably.
They've obviously been at this for a while.
<<Rep _top>>'s dominant tendencies means that <<therace _top>> slaver loves nothing more than to top and is not gentle at it, and<<if !_top.isHasDick()>>, donning a strap-on,<</if>>
<<they _top>>'s pounding <<if _bot.isSubmissive()>>the submissive <</if>><<rep _bot>> as hard as <<they _top>> can.
<<They _top>>'s
<<if _top.isHasTrait('muscle_strong')>>
  a very strong <<man _top>>, and <<their _top>> muscles work noticeably
<<elseif _top.isHasTrait('muscle_thin')>>
  not very fit, and <<they _top>>'s gasping tiredly
<<else>>
  physically fit, but even so, <<they _top>>'s showing signs of fatigue
<</if>> as <<they _top>> pistons

<<their _top>> <<udickorstrap _top>>
in and out of the
<<uhole _bot>>
beneath <<them _top>>.
</p>

<p>
For <<their _bot>> part, <<rep _bot>> is playing an utterly passive role.
<<They _bot>> even has <<their _bot>> eyes closed, though <<they _bot>>'s obviously conscious; <<they _bot>>'s smiling<<if _bot.isSubmissive()>>, and the shameless submissive loves being treated like this<</if>>.

<<if !_bot.isHasVagina()>>

  <<if _bot.isHasTrait('anus_gape')>>
    <<Their _bot>> welcoming asspussy can take this all night.

  <<elseif _bot.isHasTrait('anus_loose')>>

    <<if !_top.isHasDick()>>
      <<Their _bot>> lover is using a formidable rubbery phallus, but <<they _bot>> was clearly fucked into a nice relaxed gape a while ago.
    <<elseif _top.isHasTrait('dick_huge')>>
      <<Their _bot>> lover's cock is big enough that it sometimes bothers even <<their _bot>> experienced anus, but <<they _bot>> was clearly fucked into a nice relaxed gape a while ago.
    <<else>>
      She can take her lover's modestly cock easily.
    <</if>>

  <<else>>

    <<if !_top.isHasDick()>>
      <<Their _bot>> lover is using a formidable phallus, but <<their _bot>> tight ass has clearly been worked in gradually tonight, and <<they _bot>>'s somehow taking it just fine.
    <<else>>

      <<if _top.isHasTrait('dick_large')>>
        <<Their _bot>> lover's cock is big enough that it often causes <<them _bot>> some anal pain, but <<their _bot>> tight ass has clearly been worked in gradually tonight, and <<they _bot>>'s taking it just fine.
      <<else>>
        <<Their _bot>> lover's little dick is well suited to <<their _bot>> tight butt, and <<they _bot>>'s taking <<their _bot>> anal pounding just fine.
      <</if>>

    <</if>>

  <</if>>

<<else>>

  <<if _bot.isHasTrait('vagina_gape')>>
    <<Their _bot>> gaping cunt can take this all night.

  <<elseif _bot.isHasTrait('vagina_loose')>>

    <<if !_top.isHasDick()>>
      <<Their _bot>> lover is using a formidable phallus, but <<they _bot>>'s relaxed and taking it easily.

    <<elseif _top.isHasTrait('dick_huge')>>
      <<Their _bot>> lover's cock is big enough that it sometimes bothers even <<their _bot>> veteran pussy, but <<they _bot>>'s relaxed and taking it easily.

    <<else>>
      She can take her lover's modestly cock easily.
    <</if>>

  <<else>>

    <<if !_top.isHasDick()>>
      <<Their _bot>> lover is using a formidable phallus, but <<their _bot>> tight little pussy has clearly been worked in gradually tonight, and <<they _bot>>'s somehow taking it just fine.

    <<else>>

      <<if _top.isHasTrait('dick_large')>>
        <<Their _bot>> lover's cock is big enough that it often causes <<them _bot>> some pain, but <<their _bot>> tight little pussy has clearly been worked in gradually tonight, and <<they _bot>>'s taking it just fine.

      <<else>>
        <<Their _bot>> lover's little dick is well suited to <<their _bot>> tight little pussy, and <<they _bot>>'s taking <<their _bot>> pounding just fine.

      <</if>>

    <</if>>

  <</if>>

<</if>>

Being the lover of a
<<uadjper _bot>> fucker like <<rep _bot>> can be tiring, especially in addition to <<their _top>> other duties. But despite the vigor, the sex looks quite loving. <<Rep _bot>> goes on smiling comfortably as
<<their _bot>> butt jiggles under each hard slap as <<rep _top>> brings <<their _top>> hips down to penetrate <<them _bot>> fully, yet again.
</p>

<p>
Mere moments after you absorb this arresting scene,
<<rep _top>> thrusts
<<their _top>> <<udickorstrap _top>>
all the way inside <<rep _bot>>'s
<<if _bot.isHasVagina()>>
womanhood
<<else>>
ass
<</if>>
and shudders,
<<if _top.isHasDick()>>
  filling it with cum.
<<else>>
  orgasming.
<</if>>
Then <<they _top>> collapses, utterly spent.
<<Rep _bot>>
<<if _top.isHasDick()>>
  gasps at the sensation of the ejaculate shooting into <<their _bot>> body,
<<else>>
  smiles a little wider as <<they _bot>> feels <<rep _top>> muscles tense with climax,
<</if>>
and then grunts a little as <<rep _top>> lies down on top of <<them _bot>>.

<<if _top.isHasTrait('breast_titanic')>>
The enormous weight of <<their _top>> lover's boobs squashes <<them _bot>>.
<</if>>
After a few seconds, <<they _bot>> wiggles <<their _bot>> hips a little as a wordless question.
The sensation
<<if _top.isHasDick()>>
against <<rep _top>>'s softening, overstimulated member
<<else>>
is transmitted through the phallus and its harness to <<rep _top>>'s overstimulated clit, and this
<</if>>
makes the exhausted <<urace _top>> on top quiver, eliciting a giggle from <<therace _bot>> underneath <<them _top>>.
"I love you, <<name _top>>,"
<<they _bot>> whispers, and receives a mumbled "I love you too" in breathy response, right next to <<their _bot>> ear.
</p>

<p>
As the two slavers dozed in each other's embrace, you finish your little voyeuristic adventure and go on with the rest of your day.
</p>

<<run setup.qc.Friendship('top', 'bot', 300).apply(setup.costUnitHelperDict({
top: _top, bot: _bot
}))>>

<</if>>


:: Event_corruption_rain [nobr] {"position":"100,14975","size":"100,100"}
<p>
As you were going by your usual business, the sky above your fort (and only
above your fort) suddenly turns pitch black. A black magical circle appears
on the sky, raining dark spells down your fort.
Your slavers and slaves frantically try to dodge as many of the dark bullets
as possible, which seemingly deal no damage to the structure but rapidly
alter any flesh unlucky enough to be touched by the corruption.
</p>

<p>
Eventually, the spell fizzles leaving the sky bright once again. But the
damage has been done, as several of your slavers and slaves who are currently at home
become noticably corrupted.
</p>

<p>
Only powerful beings can possibly cast such a dangerous spell. Given the
amount of dark energy though, this must be the work of the <<rep
$company.demon>>, whom you have angered recently.
</p>


:: Event_court_gossip [nobr] {"position":"350,15475","size":"100,100"}
<p>
Recently, you have somehow made crucial enemies within the vindictive <<rep $company.royal>> of the
<<rep $company.humankingdom>>.
In particular, many ladies there is starting to show disdain towards your company.
Given your slavery background, it would not do for these ladies should their connections
towards you be well known, and hence they resorted to something they are incredibly familiar with
to undermine your company: gossips.
Within days, gossips spread very fast about the multiple inadequacies of your company,
and before long many other companies starting to view your company with much less respect than before...
</p>

<p>
Perhaps it would be a sound advice not to make enemies of these women, but what is done is done.
</p>


:: Event_cow_milking [nobr] {"position":"975,12850","size":"100,100"}
<p>
When hanging around your <<rep setup.buildingtemplate.recreationwing>>, you
encounter <<yourrep $g.slave>> in the <<rep setup.buildingtemplate.pasture>>,
heading for one of the milking areas.
Though it's <<their $g.slave>> job to be a <<urace $g.slave>> cow,
<<they $g.slave>>'s allowed to roam as <<they $g.slave>> pleases in the area
when <<they $g.slave>>'s not getting milked, being fed, being used, or otherwise occupied, and <<they $g.slave>> must have been roaming the place.
In any case, <<they $g.slave>>'s obviously in desperate need of a milking. <<They $g.slave>>'s hurrying along with <<their $g.slave>>
<<if $g.slave.isHasTrait('breast_titanic')>>absurd<<else>>heavy<</if>> udders cradled in both arms, trying desperately to shield them from the uncomfortable motion of walking.
</p>

<p>
<<if $g.slave.isCanSee()>>Seeing<<else>>Noticing<</if>> you, <<they $g.slave>> stops short and then winces as <<their $g.slave>> milk-filled breasts slosh to a stop, too.
<<if !$g.slave.isCanTalk()>>
<<They $g.slave>> gestures a submissive greeting and then hesitates, catching <<their $g.slave>> lower lip cutely behind <<their $g.slave>> upper teeth. Then <<they $g.slave>> politely asks if you would milk <<their $g.slave>>.
<<else>>
"Hi <<Master $unit.player>>," <<they $g.slave>> says in greeting, and then hesitates, catching <<their $g.slave>> lower lip cutely behind <<their $g.slave>> upper teeth. "Um, may you please milk me?"
<</if>>
Milking is a deeply important activity for <<them $g.slave>>, emotionally; the neurochemical effects of continual lactation are strong.
</p>

<<choose>>

<<opt "Treat <<them $g.slave>> right">>

<p>
You give <<them $g.slave>> a reassuring swat across the rump and tell <<them $g.slave>> you'd be happy to.
You head toward the utility area with the milkers, and <<they $g.slave>> follows
eagerly behind you, pleased you'd do this for <<them $g.slave>> and very ready to relieve the pressure in <<their $g.slave>> tits.
You seat yourself on a stool and draw <<them $g.slave>> onto your lap.
Reaching behind yourself, you give <<therace $g.slave>> cow on your lap a broad bucket, and tell <<them $g.slave>> to hold it on <<their $g.slave>> lap.
Then you reach around <<them $g.slave>> and take <<their $g.slave>> <<if $g.slave.isHasTrait('breast_titanic')>>gargantuan<<else>>heavy<</if>> udders in your <<uhands $unit.player>>.
<<They $g.slave>> gasps as <<they $g.slave>> adjusts the bucket so it's below both of <<their $g.slave>> nipples at once.
</p>

<p>
<<They $g.slave>> receives a methodical massage of <<their $g.slave>> breasts, both at once. They're large enough to be more than a single handful, so you go bit by bit, ensuring that no part of <<their $g.slave>> udders goes untouched.
<<Their $g.slave>> nipples start to gush milk without help after a few moments of this, and <<they $g.slave>> groans with relief and satisfaction as <<they $g.slave>> feels <<their $g.slave>> breasts begin to empty and enjoys the sensation of the massage.
After you're satisfied, you move your <<uhands $unit.player>> to <<their $g.slave>> nipples and milk <<them $g.slave>> like a cow, getting the last drops of milk out of <<them $g.slave>> and bringing <<them $g.slave>> to a surprise orgasm.
When <<they $g.slave>>'s done, <<they $g.slave>> leans back into you for a moment before setting the milk bucket down, a wordless gesture of considerable trust. It means a lot to <<them $g.slave>> that you would milk <<them $g.slave>> yourself.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<opt "Treat <<them $g.slave>> like a cow">>

<p>
You ask <<them $g.slave>> if <<they $g.slave>> really wants to be treated like a cow. <<They $g.slave>> nods, a bit hesitantly, sensing a certain danger but not really knowing what else to do.
You lead <<them $g.slave>> to the utility area where the milkers are, and fetch a pair of low stools, make <<them $g.slave>> kneel on one, and put <<their $g.slave>> <<uhands $g.slave>> on the other, so <<they $g.slave>>'s on all fours with <<their $g.slave>> udders hanging beneath <<them $g.slave>><<if $g.slave.isHasTrait('breast_titanic')>>, the twin masses of female flesh almost reaching the floor<</if>>.
</p>

<p>
You swing a bucket under <<their $g.slave>> nipples and milk <<them $g.slave>> by <<uhand $unit.player>>, as though <<they $g.slave>> slave|was a cow. This isn't exactly what <<they $g.slave>> had in mind, but the feeling of your <<uhands $unit.player>> on <<their $g.slave>> nipples, tugging the streams of milk out of <<them $g.slave>> and into the bucket beneath eventually relaxes <<them $g.slave>>.
Seeing this, you muse aloud, as though to yourself, that a little farmyard bestiality wouldn't hurt, since there's no one here but you and a dairy cow. Pawing the cow's behind possessively, you finger <<them $g.slave>> aggressively before deciding on

<<if $unit.player.isHasVagina()>>

a little cow tongue action. You stand up and grind your pussy against the cow's upturned mouth, humping <<their $g.slave>> face hard enough to shake the drops of milk still clinging to <<their $g.slave>> sore nipples down and into the bucket below.
When you're finished, you step away, leaving <<their $g.slave>> face thoroughly coated in girlcum,

<<elseif $g.slave.isHasVagina()>>

a little cow pussy. You walk around behind <<them $g.slave>> and fuck <<them $g.slave>> hard enough to shake the drops of milk still clinging to <<their $g.slave>> sore nipples down and into the bucket below. When you're finished, you step away, leaving your cum to run out of <<their $g.slave>> cunt and down <<their $g.slave>> thighs,

<<else>>

some cow ass. You walk around behind <<them $g.slave>> and buttfuck <<them $g.slave>> hard enough to shake the drops of milk still clinging to <<their $g.slave>> sore nipples down and into the bucket below. When you're finished, you step away, leaving your cum to drip out of <<their $g.slave>> gaped asshole,

<</if>>
and ask <<them $g.slave>> what cows say. "Um, moo?" <<they $g.slave>> responds in a small, submissive voice.
</p>

<</choose>>


:: Event_cumslut_whore [nobr] {"position":"1225,12850","size":"100,100"}
<p>
Late at night, as you return to your bedchamber, you see your personal slave <<rep $g.slave>> resting in the <<uslavebed $g.slave>>.
It's the end of <<their $g.slave>> day as your slave, and despite being obviously tired, <<they $g.slave>>'s smiling. Every so often, <<they $g.slave>>'ll get a dreamy expression and
<<set _eq = $g.slave.getEquipmentAt('mouth')>>
<<if _eq && _eq.getTags().includes('gag')>>
lick <<their $g.slave>> <<rep _eq>>.
<<else>>
lick <<their $g.slave>> lips.
<</if>>
<<They $g.slave>> fetishizes cum to the extent that getting to eat a mile of dick really satisfies <<their $g.slave>>.
</p>

<<choose>>

<<opt "<<They $g.slave>> must have at least a little room left">>

<p>
You call <<name $g.slave>> in and ask how full <<they $g.slave>> is. <<They $g.slave>> looks confused for a moment but soon figures out what you mean.
<<if !$g.slave.isCanTalk()>>
<<They $g.slave>> gestures at <<their $g.slave>>
<<ubelly $g.slave>>, makes a sign for "full," and then makes a sign for "never."
<<else>>
"Oh <<Master $unit.player>>, I'll never be full again,"
<<they $g.slave>> says.
<</if>>
<<ustripmouth $g.slave>>
<<They $g.slave>> comes eagerly over and sucks you off with enthusiasm. As you cum, <<they $g.slave>> orgasms quickly at the taste of the stuff hitting <<their $g.slave>> <<umouth $g.slave>>.
<<if !$g.slave.isAllowedTalk()>>
<<They $g.slave>> signs that you taste great.
<<else>>
"<<Master $unit.player>>, you taste great," <<they $g.slave>> purrs.
<</if>>
<<They $g.slave>> has become more trusting in your willingness to give <<them $g.slave>> what <<they $g.slave>> wants.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<opt "Cum in <<their $g.slave>> <<umouth $g.slave>> all night">>

<p>
You've had a busy day, so you've been unusually remiss in fucking your slaves. Naturally, this means you'll be spending the evening in the fort, using the living sexual appliances.
<<name $g.slave>> is instructed to follow you and assist.
<<They $g.slave>>'s tired, so you let <<them $g.slave>> tag meekly along, masturbating gently as you use other slaves or just watching lazily.
But whenever you're on the point of cumming, you switch to <<their $g.slave>> <<umouth $g.slave>> and let <<them $g.slave>> finish you with a few sucks and pumps of <<their $g.slave>> fatigued <<uhands $g.slave>>.
By the time you put the exhausted <<name $g.slave>> to the <<uslavebed $g.slave>>, <<they $g.slave>>'s in a haze of cum-induced pleasure. <<They $g.slave>> has become more submissive to you.
</p>

<</choose>>


:: Event_curse_bestowed [nobr] {"position":"1100,14975","size":"100,100"}
<p>
Bad luck happens to everyone. Sometimes you'd just stumble on a rock for no reason, while some other times a bird shite or two would just so happen to drop right on top of you. But when several of your slavers just so happens to fell flat into the ground from a bump on the earth shaped exactly just like a penis, fell flat onto the phallus on their asses before some kind of liquidy substance just so happen to drop from the sky and into their mouths, you know it's not bad luck at play anymore.
</p>

<<set _u = setup.getAnySlaver()>>

<p>
<<Yourrep _u>> thinks that some of your slavers might just have been cursed by demonic beings. As you recall, your relationship with the <<rep $company.demon>> has rather soured in the recent weeks, and perhaps they've decided to exact karma upon you by cursing some of your slavers.
</p>

<p>
There's nothing you can do at this point, except maybe to try and cleanse the curses by blessing them one way or another. And not to anger the demons again next time!
</p>


:: Event_curse_of_misfortune [nobr] {"position":"350,18350","size":"100,100"}
<p>
Being unlucky is one thing, but having found a stuck piece of rock in <<their $g.a>> meal, after having a bird dropped right on top of <<their $g.a>> head during the same day an errant arrow from a practice session grazed
<<if $g.a.getTail()>>
<<their $g.a>> <<utail $g.a>>
<<elseif $g.a.getWings()>>
<<their $g.a>> <<uwings $g.a>>
<<else>>
on top of <<their $g.a>> head
<</if>>
simply could not be explained by sheer coincidence. <<Yourrep $g.a>> is cursed, there is no other way around it, and <<therace $g.a>> a|know it too.
</p>

<p>
According to <<therace $g.a>>, they had been rather "unlucky", to put it mildly, throughout <<their $g.a>> entire life. This would just not do, especially for a slaver, and you finally urge <<them $g.a>> to try and spend a couple of weeks investigating whether there are ways to undo this accursed luck of <<them $g.a>>.
</p>

<p>
You will probably hear back from <<rep $g.a>> in a couple of weeks...
</p>


:: Event_daylight_robbery [nobr] {"position":"1100,15475","size":"100,100"}
<p>
A strange letter has arrived at your fort today, smelling faintly of roses.
But it contains nothing even remotely sweet.
It is a threat, and one you could not refuse: you have irked some people
within the <<rep $company.royal>> who threatened to reveal your atrocities to the
rest of the court. Given how much the king abhors slavery, this would no doubt
plunge your company's reputation to the dirt, and there would be no more job you
could possibly pick up afterwards.
</p>

<<set _u = setup.getAnySlaver()>>

<p>
The letter demanded you pay repatriations for your crimes against them -- a hefty sum of
<<money 15000>> to be delivered to a specific spot near the city.
With no other way around it, you sighed and ordered <<rep _u>> to pack up some of your hard-earned
coins and set off to the spot.
</p>

<p>
Perhaps you should rethink your actions more carefully in the future -- nothing good ever comes
from antagonizing these powerful people...
</p>


:: Event_debtor_for_sale [nobr] {"position":"225,12975","size":"100,100"}
<<include 'Event_TigerBankRepoCommon'>>

<p>
The current sale offer is a bit different than usual.
The bank is offering you a brand new slave, apparently being the debtor <<themself $g.debtor>>.
<<Their $g.debtor>> debt has increased so much to the point that even after the many repo-men and women repossessed all <<their $g.debtor>> belongings, it was still not enough. <<They $g.debtor>> eventually put a slave collar on the poor <<urace $g.debtor>>'s neck, before eventually offering the new slave to you.
</p>


:: Event_defiant_slave [nobr] {"position":"850,16100","size":"100,100"}
<p>
After a few days, it becomes clear that your newly acquired slave, <<rep
$g.slave>>, slave|is rather special. Unlike most of your other slaves, <<they
$g.slave>> slave|is not reduced to begging and crying after the first few
training sessions, and still remains as defiant as ever. It seems the usual
training regime you have for your normal slaves will not work for this
particularly strong-willed <<urace $g.slave>>.
</p>

<p>
Thankfully, <<yourrep $g.slaver>> slaver|have came up with a plan, which
<<they $g.slaver>> slaver|hands over to you in the form of <<rep
setup.item.technology_research>>. Reading the plan, you would first have to
build the <<rep setup.buildingtemplate.researchroom>>. Having that built, you
can then assign a few of your slavers to research <<yourrep $g.slave>>,
figuring out how to break the resistant slave, possibly with outside help. It
should not be too hard to find such ways, but there is no doubt that each
would require extreme measures and will be very difficult to actually
complete.
<<if $unit.player.isHasTrait('per_dominant')>>
You can't help but let out a dominant grin as you imagine the once resistant
slave being broken to the point of compliance.
<<elseif $unit.player.isHasTrait('per_submissive')>>
Your submissive mind starts to conjure various images of you being put in the
slave's no doubt extensive training, but realizing that <<rep $g.slaver>>
slaver|is still in the room you quickly shoo the thoughts away.
<</if>>
</p>

<p>
You thank <<yourrep $g.slaver>> before sitting on your desk alone with the
<<rep setup.item.technology_research>> on your desk, staring back at you.
</p>


:: Event_defying_odds [nobr] {"position":"600,18475","size":"100,100"}
<p>
<<Yourrep $g.a>> a|is a particularly unlucky slaver, and despite your efforts in the past, the bad luck that haunts <<rep $g.a>> never went away. In fact, you can sense <<they $g.a>> had somehow got cursed yet again. However, <<therace $g.a>> a|have taken it upon <<themself $g.a>> to work harder than most to compensate — they would
practice longer than your other slavers,
<<if $g.a.isHasTrait('muscle_strong')>>
work out longer than your other slavers,
<</if>>
<<if $g.a.isHasTrait('per_studious')>>
spend more time in the library than the rest,
<</if>>
<<if $g.a.isHasTrait('per_active')>>
run laps around the track,
<</if>>
<<if $g.a.isHasTrait('skill_ambidextrous')>>
practice <<their $g.a>> dual wielding abilities,
<</if>>
<<if $g.a.isHasTrait('per_gregarious')>>
practice <<their $g.a>> speech in the mirror,
<</if>>
<<if $g.a.isHasTrait('per_lustful')>>
spend time making sure <<they $g.a>> look presentable,
<</if>>
and as a result often wakes up earlier than most.
They would occasionally get cursed here and there, but it did not stop <<theslaver $g.a>> from moving forwards with <<their $g.a>> life.
</p>

<p>
A vendor has come to your office today, offering several heavy-looking tomes for study. It's far too heavy and too time-consuming for your ordinary slavers to even bother looking at it, but perhaps you could make it a suitable gift for <<rep $g.a>>. It costs <<money 5000>> to buy.
</p>

<<choose>>

<<opt "Purchase: Dual Wielding and Its Applications">>
<<set _skill = setup.skill.combat>>
<<set _name = "Dual Wielding and Its Applications">>
<<set _practicing = "practicing 'dual-wielding' with the kitchen knives">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: Beauty and the Brawn">>
<<set _skill = setup.skill.brawn>>
<<set _name = "Beauty and the Brawn">>
<<set _practicing = "flexing muscles in time with the music">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: A Shot in the Dark">>
<<set _skill = setup.skill.survival>>
<<set _name = "A Shot in the Dark">>
<<set _practicing = "shooting with a blindfold on">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: Ninjas: Real or Fake?">>
<<set _skill = setup.skill.intrigue>>
<<set _name = "Ninjas: Real or Fake">>
<<set _practicing = "sneaking around the fort's rooftops'">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: Badly Breaking">>
<<set _skill = setup.skill.slaving>>
<<set _name = "Badly Breaking">>
<<set _practicing = "breaking a dummy-slave">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: Introduction to Everything">>
<<set _skill = setup.skill.knowledge>>
<<set _name = "Introduction to Everything">>
<<set _practicing = "learning about supposedly everything">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: The Silver Snake">>
<<set _skill = setup.skill.social>>
<<set _name = "The Silver Snake">>
<<set _practicing = "practicing strange and mystical sales speeches">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: Healing Division">>
<<set _skill = setup.skill.aid>>
<<set _name = "Healing Division">>
<<set _practicing = "healing the void">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: Magic 101">>
<<set _skill = setup.skill.arcane>>
<<set _name = "Magic 101">>
<<set _practicing = "casting imaginary spells">>

<<includereplace 'EventDefyingOddsCommon'>>

<<opt "Purchase: The Lusty Lizardkin Maid">>
<<set _skill = setup.skill.sex>>
<<set _name = "The Lusty Lizardkin Maid">>
<<set _practicing = "projecting lusty gaze on passerbies">>

<<includereplace 'EventDefyingOddsCommon'>>

<</choose>>


:: Event_demon_visit [nobr] {"position":"350,17350","size":"100,100"}
<<include "Quest_demon_visit">>


:: Event_demonic_pitfall [nobr] {"position":"100,15975","size":"100,100"}
<p>
Today, you spilled your drink in the morning, lost a sparring fight to <<rep
$g.victim>> later, and triped on your own clothes and fell flat into the
ground just now. Just as you thought your day cannot get any worse, the
sky suddenly turns dark. As you stare into the sky cursing your luck, a dark
tendril lurches very fast into your compound, grabbing <<yourrep $g.victim>>, and
within moments sucks <<theslaver $g.victim>> back into the vortex.
</p>

<p>
While you are tempted to just blame it all on luck, this is probably the
works of <<rep $company.demon>> whom you've angered recently. <<uneedrescue
$g.victim>>, before god-knows what the demons will do to the poor <<urace
$g.victim>> there in the land beyond <<lore concept_mist>>.
</p>


:: Event_demonic_roleplay [nobr] {"position":"475,12975","size":"100,100"}
<p>
    You cross paths with <<rep $g.slave>> as <<they $g.slave>> hurries to the <<rep setup.buildingtemplate.theatre>>, just starting <<their $g.slave>> day.
    <<They $g.slave>>'s full of energy, and judging from <<their $g.slave>> delightful <<succubus $g.slave>> outfit, <<they $g.slave>> is due for some demonic roleplay scenario.
    <<if $g.slave.isHasTrait('race_demon')>>
        The fact that <<they $g.slave>> is actually a demon adds to the mysticism.
    <</if>>
    <<They $g.slave>>
    <<if $g.slave.isCanSee()>>
        sees your glance
    <<else>>
        recognizes your whistle
    <</if>>
    and greets you with a
    <<if $g.slave.isCanSee()>>
        wicked glint in <<their $g.slave>> eye
    <<else>>
        wicked smirk on <<their $g.slave>> face
    <</if>>
    , bowing a bit to show off <<their $g.slave>>
    <<if $g.slave.isHasTrait('breast_titanic')>>
        bare, inhumanly large breasts
    <<elseif $g.slave.isHasTrait('breast_large')>>
        heavy, naked breasts
    <<else>>
        naked <<ubreasts $g.slave>>
    <</if>>
    and then continuing towards you
    <<if $g.slave.isFemale()>>
        with a pirouette.
    <<else>>
        while obviously swaying <<their $g.slave>> <<udick $g.slave>> all for you to see.
    <</if>>
    <<Their $g.slave>>
    <<if $g.slave.isHasTail()>>
        <<utail $g.slave>> bounces flirtily, before holding
    <<else>>
        fake demonic tail sways flirtily, before <<they $g.slave>>
    <</if>>
    hold
    <<if $g.slave.isFemale()>>
        the back of <<their $g.slave>> skirt up to show off
    <<else>>
        their asscheeks apart to show off
    <</if>>
    <<if $g.slave.isHasTrait('anus_gape')>>
        the broad area of puckered skin around <<their $g.slave>> slutty asspussy
    <<elseif $g.slave.isHasTrait('anus_loose')>>
        a hint of <<their $g.slave>> asshole, which <<their $g.slave>> buttocks don't quite conceal
    <<else>>
        <<their $g.slave>> tight pucker
    <</if>>
    .
</p>

<p>
    <<They $g.slave>> looks like
    <<if $g.slave.isHasTrait('height_giant')>>
        an imposing, hungry
    <<elseif $g.slave.isHasTrait('muscle_verystrong')>>
        a muscular, hungry
    <<else>>
        hungry little
    <</if>>
    sex demon,
    and you tell <<them $g.slave>> so.
    <<if $g.slave.isHasTrait('race_demon')>>
        The <<urace $g.slave>> obviously knows all there is about
        demons, including the more absurd folktales regarding <<succubus $g.slave>>.
    <<elseif $g.slave.isHasTrait('per_smart')>>
        The clever <<urace $g.slave>> knows quite a bit about the folktales regarding <<succubus $g.slave>>.
    <<else>>
        <<They $g.slave>> has learned quite a bit about how people likes to roleplay <<succubus $g.slave>> from <<their $g.slave>> slave training.
    <</if>>
    "Oh <<Master $unit.player>>, I'm ssstarving," <<they $g.slave>> moans,
    running <<their $g.slave>> tongue over <<their $g.slave>> lips and
    <<if $g.slave.isFemale()>>
        sticking out <<their $g.slave>> chest to present <<their $g.slave>> boobs
    <<else>>
        stick out <<their $g.slave>> <<udick $g.slave>>
    <</if>>
    even more obviously.
</p>

<<choose>>
<<opt "Let <<them $g.slave>>
    eat">>

    <p>
        You tell <<them $g.slave>> <<they $g.slave>>'s a good little <<succubus $g.slave>>, and you're going to let <<them $g.slave>> feed.
        <<They $g.slave>> knows exactly what you mean, and
        gets to <<their $g.slave>> knees quickly, pressing <<their $g.slave>> nipples against your thighs and grasping your hips to give <<themself $g.slave>> leverage for some very aggressive oral.
        After
        <<if $unit.player.isHasDick()>>
            a couple of lush sucks at each of your balls, <<they $g.slave>> moves straight to a hard blowjob, deepthroating your cock and almost ramming <<their $g.slave>> head against you.
            <<They $g.slave>>
            <<if $g.slave.getMainTraining().getTags().includes('troral')>>
                doesn't have to pretend to be starving for your cum.
            <<else>>
                does a good job of acting like <<they $g.slave>>'s authentically starving for your cum.
            <</if>>
            <<They $g.slave>> groans with satisfaction when you blow your load down <<their $g.slave>> gullet,
        <<else>>
            nuzzling <<their $g.slave>> nose against your moist cunt, <<they $g.slave>> starts to eat you out like <<they $g.slave>>'s starving, sparing no time for subtlety, lapping up your female juices with evident relish. You run your <<uhand $g.you>> through <<their $g.slave>> head, telling <<them $g.slave>> <<they $g.slave>>'ll have to survive on pussyjuice. <<They $g.slave>> replies, but you hold <<their $g.slave>> head hard against you as <<they $g.slave>> does, turning whatever <<they $g.slave>> says into an unintelligible, delectable mumbling into your <<woman $g.you>>hood. <<They $g.slave>> groans with satisfaction when you stiffen with orgasm, giving <<them $g.slave>> a final gush of girlcum,
        <</if>>
        and gets to <<their $g.slave>> <<ufeet $g.slave>> licking <<their $g.slave>> lips and patting <<ubelly $g.slave>>.
    </p>

    <<run setup.qc.FriendshipWithYou('you', 50).apply($gQuest)>>

<<optif $g.slave.isHasVagina() && $unit.player.isHasDick()>>
<<opt "Feed <<them $g.slave>>
    ">>

    <p>
        You tell <<them $g.slave>> <<they $g.slave>>'s a good little <<succubus $g.slave>>, and you're going to feed <<them $g.slave>>.
        <<if $g.slave.isHasTrait('breast_huge')>>
            Reaching up under <<their $g.slave>> breasts for the top edge of <<their $g.slave>> outfit
        <<else>>
            Grabbing <<their $g.slave>> outfit's top edge
        <</if>>
        and seizing <<them $g.slave>> behind a knee with your other <<uhand $g.you>>, you sling <<them $g.slave>> across a convenient bench nearby.
        <<They $g.slave>> spreads <<their $g.slave>> <<ulegs $g.slave>> for you, smiling with anticipation,
        <<their $g.slave>>cunt flushing with arousal.
        <<They $g.slave>> reaches down around <<their $g.slave>> own ass and spreads <<their $g.slave>> pussy for you, only releasing <<their $g.slave>> fingertip grip on <<their $g.slave>> labia when <<they $g.slave>> feels you hilt yourself inside <<their $g.slave>>
        <<if $g.slave.isHasTrait('vagina_gape')>>
            cavernous
        <<elseif $g.slave.isHasTrait('vagina_loose')>>
            comfortable
        <<else>>
            caressing
        <</if>>
        channel.
        You're here to rut, not make love, and you give it to <<them $g.slave>> hard, forcing animal grunts out of <<them $g.slave>>. <<They $g.slave>> climaxes strongly, and the glorious feeling finishes you as well, bringing rope after rope of your cum jetting into <<them $g.slave>>. <<They $g.slave>> groans at the feeling, and as <<they $g.slave>> gets to <<ufeet $g.slave>> <<they $g.slave>> uses a <<uhand $g.slave>> to transfer a taste of the mixture of your seed and <<their $g.slave>> pussyjuice to <<their $g.slave>> <<umouth $g.slave>>.
        <<They $g.slave>>'s very good at playing the part of a sex demon whose hunger knows no end,
        <<if $g.slave.isHasTrait('race_demon')>>
            even though <<they $g.slave>> know, being part demon <<themself $g.slave>>, that it is not that simple.
        <<else>>
            something <<they $g.slave>> learned from <<their $g.slave>> long slave trainings.
        <</if>>
    </p>

<<optif $unit.player.isHasDick()>>
<<opt "Fuck <<them $g.slave>>
    without feeding <<them $g.slave>>">>

    <p>
        You tell <<them $g.slave>> <<they $g.slave>>'s a good little <<succubus $g.slave>>. Thinking <<they $g.slave>> understands, <<they $g.slave>>
        <<if $g.slave.isHasVagina()>>
            turns and hugs the nearest wall, going up on tiptoe and cocking <<their $g.slave>> hips to offer you <<their $g.slave>> needy cunt. <<They $g.slave>> moans as your <<udick $g.you>>
            <<if $g.slave.isHasTrait('vagina_gape')>>
                enters <<their $g.slave>> big cunt
            <<elseif $g.slave.isHasTrait('vagina_loose')>>
                fills <<their $g.slave>> wet cunt
            <<else>>
                slides slowly inside <<their $g.slave>> tight cunt
            <</if>>
            . As you fuck <<them $g.slave>>, you ask <<them $g.slave>> how
            sex demons feed. "W-well," <<they $g.slave>> gasps, struggling to gather <<their $g.slave>> wits,
        <<else>>
            gets down on <<their $g.slave>> knees and starts to suck you off. <<They $g.slave>> deepthroats you eagerly, stretching to tickle your balls with <<their $g.slave>> tongue as <<they $g.slave>> gets you all the way in, and then shifting a hand to roll them around as <<they $g.slave>> sucks. As <<they $g.slave>> blows you, you ask <<their $g.slave>> how sex demons feed. "Well," <<they $g.slave>> gasps, popping your dickhead free of <<their $g.slave>> <<umouth $g.slave>> and replacing the sucking with a stroking <<uhand $g.slave>>,
        <</if>>
    </p>

    <p>
        "<<Master $unit.player>>, they can eat a man's essence by swallowing his cum
        <<if $g.slave.isHasVagina()>>
            or getting him to ejaculate inside their pussies
        <</if>>
        ."
    </p>

    <p>
        It's not exactly true, but it's what most people in <<lore geo_mestia>> believes, and it's good enough for what you have in mind.
        You then ask <<them $g.slave>> whether <<they $g.slave>> would like to feed off you.
    </p>

    <p>
        "Oh <<Master $unit.player>>, please. Please feed me,"
    </p>

    <p>
        <<they $g.slave>> begs. Too bad, you tell <<them $g.slave>>; <<they $g.slave>> gets to go hungry.
        After all, sex demons can't feed using their butts.
        <<if $g.slave.isHasVagina()>>
            You withdraw from <<their $g.slave>> cunt and stuff your cock up <<their $g.slave>> ass without pausing or softening your thrusting at all.
        <<else>>
            You pull <<them $g.slave>> to <<their $g.slave>> feet, spin <<them $g.slave>> around, shove <<them $g.slave>> up against the wall, and stuff your cock up <<their $g.slave>> ass.
        <</if>>
        <<if $g.slave.isHasTrait('anus_gape')>>
            It's not like <<their $g.slave>> experienced butt can't take an assraping, but
        <<elseif $g.slave.isHasTrait('anus_loose')>>
            <<Their $g.slave>> practiced ass relaxes and accommodates your dick, but
        <<else>>
            <<Their $g.slave>> tight asshole spasms with pain as it stretches to accommodate you, and
        <</if>>
        <<they $g.slave>> whines at your sudden aggression, wiggling within your
        <<if $g.you.isSubmissive()>>
        <<else>>
            dominating
        <</if>>
        grip. You fill <<their $g.slave>> ass with cum as <<they $g.slave>> struggles, still playing <<their $g.slave>> part, begging you not to cum in <<their $g.slave>> bottom, since sex demons can't live on buttsex.
    </p>

<</choose>>


:: Event_desert_raiders [nobr] {"position":"100,15725","size":"100,100"}
<<include 'Quest_desert_raider'>>


:: Event_desperately_horny [nobr] {"position":"725,12975","size":"100,100"}
<p>
<<Yourrep $g.slave>> comes to see you, looking deeply unhappy and shivering occasionally.

<<if !$g.slave.isAllowedTalk()>>
Since <<they $g.slave>> slave|is not allowed to speak by your rules, <<they $g.slave>> just
stands there,
<<if $g.slave.isHasTail()>>tail twitching,<</if>>
unsure what to do.
<<elseif !$g.slave.isCanTalk()>>
<<They $g.slave>> tries to communicate something with <<their $g.slave>> <<uhands $g.slave>>, but <<they $g.slave>>'s so distracted <<they $g.slave>> can't manage it. <<They $g.slave>> starts to shake a little,
<<if $g.slave.isHasTail()>>tail twitching,<</if>>
and gives up.
<<else>>
"<<Master $unit.player>>, please! Please - I - please, I need to - oh, <<Master $unit.player>> -" <<they $g.slave>> babbles. <<They $g.slave>> starts to shake a little,
<<if $g.slave.isHasTail()>>tail twitching,<</if>>
and lapses into silence.
<</if>>

The reason for <<their $g.slave>> distress is obvious:

<<if $g.slave.isHasDick() && $g.slave.isInChastity()>>

<<their $g.slave>> <<ucgenital $g.slave>> is mostly solid, but it has a small hole below where the tip of <<their $g.slave>> dick is held, and this is dripping precum. <<They $g.slave>>'s sexually helpless, and sexually overcharged to the point where <<they $g.slave>>'s dripping more precum than a usual slave might ejaculate normally.

<<elseif $g.slave.isHasTrait('dick_titanic')>>

<<their $g.slave>> gigantic member juts out painfully, scattering droplets of precum whenever <<they $g.slave>> moves. One of <<their $g.slave>> spasms brings <<their $g.slave>> dickhead brushing up against <<their $g.slave>> <<ubelly $g.slave>>, and the stimulation almost brings <<them $g.slave>> to orgasm.

<<elseif $g.slave.isHasTrait('dick_large')>>

<<their $g.slave>> impressive member juts out painfully, scattering droplets of precum whenever <<they $g.slave>> moves. One of <<their $g.slave>> spasms brings <<their $g.slave>> dickhead brushing up against <<their $g.slave>> <<ubelly $g.slave>>, and the stimulation almost brings <<them $g.slave>> to orgasm.

<<elseif $g.slave.isHasDick()>>

<<their $g.slave>> little member juts out and painfully erect, scattering droplets of precum whenever <<they $g.slave>> moves. One of <<their $g.slave>> spasms brings <<their $g.slave>> dickhead brushing up against <<their $g.slave>> <<ubelly $g.slave>>, and the stimulation almost brings <<them $g.slave>> to orgasm.

<<else>>

<<their $g.slave>> pussy is so wet there are little rivulets of moisture running down <<their $g.slave>> inner thighs. One of <<their $g.slave>> spasms brings <<them $g.slave>> enough stimulation that it almost brings <<them $g.slave>> to orgasm.
<</if>>
</p>

<p>
This is the result of the lusty slaver not getting off for some time<<if !$g.slave.isAllowedOrgasm()>>, because your rules disallow them to<</if>>.
The poor overcharged <<man $g.slave>> can likely think of nothing but an orgasm right now — <<They $g.slave>>'s so horny that <<they $g.slave>>'ll do anything for a release. However, <<they $g.slave>> did come to you with <<their $g.slave>> trouble rather than masturbating illicitly.
</p>

<<choose>>

<<opt "Touch <<them $g.slave>> enough to get <<them $g.slave>> off">>

<p>
You tell <<them $g.slave>> that <<they $g.slave>> deserves a reward for coming to you. <<They $g.slave>> almost bursts into tears and nods jerkily, unable to do anything else. You brush a finger across <<their $g.slave>> cheek,
<<their $g.slave>> <<uears $g.slave>>, <<their $g.slave>> lips;
at each touch <<they $g.slave>>
<<if !$g.slave.isCanTalk()>>breathes in sharply<<else>>gasps<</if>>.
Moving around behind <<them $g.slave>>, you run a <<uhand $unit.player>> down <<their $g.slave>> flank to <<their $g.slave>> hip, and then around to <<their $g.slave>> <<ubelly $g.slave>>, and up towards <<their $g.slave>> <<ubreasts $g.slave>>.
Your run a thumb over each nipple, almost tipping <<them $g.slave>> over the edge.
Your <<uhands $unit.player>> move down again, spreading <<their $g.slave>> buttocks to tease <<their $g.slave>> clenched anus, and then forward across <<their $g.slave>> perineum - and this is enough. <<They $g.slave>> spasms, pitching forward and almost falling. <<They $g.slave>> hurries to clean up after <<themself $g.slave>> with <<their $g.slave>> tongue, sobbing with relief and thanking you;
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<opt "Reward <<them $g.slave>> for coming to you">>

<p>
<<They $g.slave>> almost cries with relief when you tell <<their $g.slave>> to

<<if $g.slave.getMainTraining().getTags().includes('troral')>>

kneel and <<if $unit.player.isHasDick()>>suck a dick<<if $unit.player.isHasVagina()>> and eat a pussy<</if>><<else>>eat pussy<</if>> while you continue resting on your <<uslaverbed $g.slave>>. <<They $g.slave>>'s so horny that <<they $g.slave>>'s barely got <<if $unit.player.isHasDick()>>your cock into <<their $g.slave>> <<umouth $g.slave>><<else>><<their $g.slave>> lips and tongue on your cunt<</if>> before <<they $g.slave>> climaxes spontaneously, shivering and moaning nicely. You keep <<them $g.slave>> down there for a while, relaxing and orgasming occasionally as <<they $g.slave>> gently <<if $unit.player.isHasDick()>>blows you<<else>>lavishes attention on your wet vagina<</if>>.

<<elseif $g.slave.getMainTraining().getTags().includes('tranal')>>

tell <<them $g.slave>> to sit on your lap. <<They $g.slave>> climaxes the instant your <<if $unit.player.isHasDick()>>dickhead<<else>>strap-on<</if>> touches <<their $g.slave>> <<if $g.slave.isHasTrait('anus_gape')>>anal gape<<else>>pucker<</if>>, but <<they $g.slave>> knows this is just the start, and <<they $g.slave>> laughs with pleasure as <<their $g.slave>> <<if $g.slave.isHasTrait('anus_gape')>>lewd sphincter loosely squeezes<<else>>sphincter tightens against<</if>> the base of <<if $unit.player.isHasDick()>>your cock<<else>>the strap-on<</if>>. You shove the <<if $g.slave.isFemale()>>giggling<<else>>excited<</if>> buttslut down so <<their $g.slave>> <<ubreasts $g.slave>> is resting against the tops of your <<ulegs $unit.player>>.
<<They $g.slave>> wraps <<their $g.slave>> <<ulegs $g.slave>> around your <<uwaist $unit.player>> and hugs your knees with <<their $g.slave>> <<uarms $g.slave>>, securing <<themself $g.slave>> as an anal cocksleeve for as long as you feel like keeping <<if $unit.player.isHasDick()>>your penis lodged up a compliant butthole<<else>>the happy buttslut trapped under there<</if>>.

<<elseif $g.slave.getMainTraining().getTags().includes('trdominance')>>

wait a moment, because you know what <<they $g.slave>> needs. <<They $g.slave>>'s mystified, but steels <<themself $g.slave>> and waits. Another slave is taken from your dungeons, and <<they $g.slave>> discovers that <<they $g.slave>>'s to be toyed with together, with
<<name $g.slave>>'s
<<if $g.slave.isHasDick() && $g.slave.isCanCum()>>
cock up <<their $g.slave>> asshole<<else>>fingers assfucking <<them $g.slave>><</if>>.
The dominant <<name $g.slave>> climaxes immediately to <<their $g.slave>> use of the poor slave, rubbing <<themself $g.slave>> all over the other slave's buttocks while <<they $g.slave>> continues banging <<their $g.slave>> backdoor.

<<elseif $g.slave.isMasochistic()>>

tell <<them $g.slave>> to get <<their $g.slave>> ass up on your <<uslaverbed $g.slave>> and lie face down. <<They $g.slave>> clambers up, and you let <<them $g.slave>> lie there for a while, tortured by anticipation and arousal, before giving <<their $g.slave>> nearest buttock a harsh open-handed slap. The shock and pain send <<their $g.slave>> over the edge immediately, and <<they $g.slave>> grinds forward into the <<uslaverbed $g.slave>> involuntarily; the feeling of the sheet against <<their $g.slave>> <<if $g.slave.isHasDick()>>dickhead<<else>>mons<</if>> slams <<them $g.slave>> into a second climax, and <<they $g.slave>> sobs with overstimulation. You keep <<their $g.slave>> there for a good long while, using <<them $g.slave>> as a toy that makes interesting noises when you hit it.

<<else>>

lie down on your <<uslaverbed $g.slave>> on <<their $g.slave>> side in the fetal position. <<They $g.slave>> clambers up hurriedly and hugs <<their $g.slave>> knees, spinning <<themself $g.slave>> around on the sheet so <<their $g.slave>> rear is pointing right at you. You stand up and pull <<them $g.slave>> over, <<their $g.slave>> <<uskin $g.slave>> sliding across the sheets, until <<their $g.slave>> butt is right at the edge of the <<uslaverbed $g.slave>>. You give it a good fuck, <<if $unit.player.isHasDick()>> use <<their $g.slave>> <<umouth $g.slave>> to clean your dick afterwards,<</if>> and then and then order <<them $g.slave>> brusquely to clean up and come right back. You use <<them $g.slave>> as a nice little <<if $unit.player.isHasDick()>>cockholster<<else>>sex toy<</if>> for the rest of the day.

<</if>>
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<</choose>>


:: Event_devoted_entertainment_slave [nobr] {"position":"975,12975","size":"100,100"}
<p>
    <<Yourrep $g.slave>> is a real obedient public slave. This morning, <<they $g.slave>> rose early, did <<their $g.slave>> chores, and looked after <<themself $g.slave>>. <<They $g.slave>> heads out past toward the <<rep setup.buildingtemplate.recreationwing>> to offer <<themself $g.slave>> to everyone <<they $g.slave>> meets.
</p>
<p>
    As <<they $g.slave>> goes, you notice that
    <<if $g.slave.isHasDick() && $g.slave.isInChastity()>>
        precum is starting to dribble out of <<their $g.slave>> chastity cage
    <<elseif $g.slave.isHasDick()>>
        <<their $g.slave>> cock is so hard it's standing out, perfectly straight
    <<else>>
        their pussy is already soaking wet
    <</if>>
    no doubt looking forward to having to
    <<if $g.slave.getMainTraining().getTags().includes('troral')>>
        gorge <<themself $g.slave>> on cum.
    <<elseif $g.slave.getMainTraining().getTags().includes('tranal')>>
        spend all day getting pounded in the ass.
    <<elseif $g.slave.getMainTraining().getTags().includes('trobedience')>>
        get dominated.
    <<else>>
        be a complete slut.
    <</if>>
    If you went with <<their $g.slave>>, you could certainly show off a little.

</p>

<<choose>>

<<opt "Share <<their $g.slave>>
    body with the public">>

    <p>
        <<name $g.slave>> is surprised to find you walking beside <<them $g.slave>>, but obediently falls in behind you as a proper slave should.
        You take <<them $g.slave>> to the <<rep setup.buildingtemplate.hiringsquare>> and seat yourself on a bench.
        You pull <<their $g.slave>> ass down onto your
        <<if !$unit.player.isHasDick()>>
            strap-on
        <<else>>
            rigid cock
        <</if>>
        so <<they $g.slave>> can offer everything else to the public visitors.
        <<if $g.slave.isHasVagina()>>
            For several hours, visitors come and go, most choosing to fuck <<their $g.slave>> wet and available pussy. You climax repeatedly from the
            <<if !$unit.player.isHasDick()>>
                titillating nature of
            <<else>>
                extra fullness of <<their $g.slave>> butt during
            <</if>>
            double penetration, and by the time you're finished <<they $g.slave>>'s dripping ejaculate from both <<their $g.slave>> holes.
        <<else>>
            With your cock pumping <<their $g.slave>> butt as much as you can manage with <<them $g.slave>> seated in your lap, <<their $g.slave>> dick flops up and down, lewdly advertising <<their $g.slave>> sexual availability. <<They $g.slave>> gives so many blowjobs by the time you're finished that <<their $g.slave>> face, chest and even stomach are liberally spattered with cum.
        <</if>>
        The visitors appreciated the entertainment.
    </p>

    <<run setup.qc.Favor('humanvale', 25).apply($gQuest)>>

<<opt "Give <<them $g.slave>>
    some aftercare">>

    <p>
        <<name $g.slave>> returns many hours later. <<They $g.slave>> carefully took breaks for <<their $g.slave>> own safety, and cleaned <<themself $g.slave>> periodically, so there isn't much evidence, but <<they $g.slave>>'s obviously bone tired. When you meet <<them $g.slave>> at the entrance to the dungeons, <<they $g.slave>>'s surprised to
        <<if $g.slave.isCanSee()>>
            see
        <<else>>
            find
        <</if>>
        you, but <<they $g.slave>> gives you a little smile anyway. You give <<them $g.slave>> a strong massage and put <<them $g.slave>> to bed. Afterward you turn to be about your business, but <<they $g.slave>> wordlessly offers <<themself $g.slave>> to you as you do.
        <<if $g.slave.isHasTraitExact('vagina_tight')>>
            <<Their $g.slave>> tight pussy is certainly tempting.
        <<elseif $g.slave.isHasTraitExact('vagina_loose')>>
            <<Their $g.slave>> soft pussy is certainly tempting.
        <<elseif (!$g.slave.isHasVagina())>>
            <<Their $g.slave>> relaxed anus is certainly inviting.
        <<else>>
            <<Their $g.slave>> capacious pussy is certainly inviting.
        <</if>>
        <<They $g.slave>>'s sore, so you spoon <<them $g.slave>> gently in bed, fucking <<them $g.slave>> slowly to sleep. <<They $g.slave>> falls asleep with a serene expression on <<their $g.slave>> face. <<Their $g.slave>> trust in you has increased.
    </p>

    <<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<opt "Chat about <<their $g.slave>>
    day">>

    <p>
        <<name $g.slave>> returns many hours later. <<They $g.slave>>'s obviously bone tired. When you meet <<them $g.slave>> at the entrance to your penthouse <<they $g.slave>>'s surprised to
        <<if $g.slave.isCanSee()>>
            see
        <<else>>
            find
        <</if>>
        you, but <<they $g.slave>> gives you a little smile anyway. You bring <<them $g.slave>> back to your office, and <<they $g.slave>>'s clearly expecting to get fucked, so <<they $g.slave>>'s surprised when you hand <<them $g.slave>> a hot beverage and sit down on the couch with <<them $g.slave>>. <<They $g.slave>> relaxes quickly and chats with you about <<their $g.slave>> day, gossiping about all the private doings of all the prominent visitors who fucked <<their $g.slave>>
        <<if $g.slave.isHasVagina()>>
            cunt
        <<else>>
            asshole
        <</if>>
        today.
        <<if ($g.slave.isHasTrait('per_smart'))>>
            <<They $g.slave>>'s witty and holds up <<their $g.slave>> end of the conversation without straying from <<their $g.slave>> role as a slave.
        <<elseif !$g.slave.isHasTrait('per_slow')>>
            <<They $g.slave>> has a few juicy items to share, and even gossiping, <<they $g.slave>>'s mindful of <<their $g.slave>> role as a slave.
        <<else>>
            <<They $g.slave>> may be an idiot, but <<their $g.slave>> babble is amusing enough.
        <</if>>
        Time flies, and when you finally stand up to continue with your evening, <<they $g.slave>> thanks you for listening to <<them $g.slave>>.
    </p>

    <<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>
<</choose>>


:: Event_disappearing_act [nobr] {"position":"600,15100","size":"100,100"}
<p>
Today has been a stressful day, with many new assignments and many antics
from your slavers occupying your mind. As you contemplate using <<yourrep
$g.victim>> to ease the stress, a sudden magical circle
forms under <<yourrep $g.victim>>. Before your eyes, <<their $g.victim>> body
disintegrates, no doubt being transported to another plane via portal magic.
As the magic finishes, there are no trace left of <<rep $g.victim>>, outside
of their equipment which falls into the floor.
</p>

<p>
The elves are said to be masters of such portal magic, and you suspect this is
one of their doings. After all you have done to <<rep $company.elf>>, it
should be no surprise that they decide to retaliate. Still, somehow you are able to
track down <<reps $g.victim>> location. <<uneedrescue $g.victim>>, but it
will sure be an incredibly difficult job to do.
</p>


:: Event_doctor_molestation [nobr] {"position":"1225,12975","size":"100,100"}
<p>
Your duties as the leader of the company means that you spend quite some time going around your fort.
As you past by the <<rep setup.buildingtemplate.doctoroffice>>,
you hear a quiet moaning and the distinct noise of flesh on flesh.
Peeking into the office, you see <<yourrep $g.slaver>> between
<<their $g.slaver>> patient slave <<rep $g.slave>>'s <<ulegs $g.slave>>,
who are lying gagged on top of the doctor's table and
spread wide by makeshift stirrups made from weapon sheathes.

<<if $g.slaver.isHasDick()>>
<<They $g.slaver>> slaver|is pounding eagerly away and mauling <<their $g.slaver>> patient's bare <<ubreasts $g.slave>> with both <<uhands $g.slaver>>.
<<else>>
<<They $g.slaver>> slaver|is using one <<uhand $g.slaver>> to fingerfuck <<their $g.slaver>> patient, and the other to masturbate furiously.
<</if>>

As you recall, your doctor is indeed
<<if $g.slaver.isHasTrait('per_dominant')>>
a rather dominant <<urace $g.slaver>>, and <<they $g.slaver>> could not resist violating a sub or two.
<<elseif $g.slaver.isHasTrait('per_lustful')>>
rather lustful, even by your fort's standard, and <<they $g.slaver>> could not resist violating a slave or two even on duty.
<</if>>
</p>

<<choose>>

<<opt "Just move on with your day">>

<p>
Sensing nothing wrong with a little fun on the job, you leave
your <<uadjper $g.slaver>> doctor alone to continue <<their $g.slaver>> poundings.
<<Rep $g.slave>> will certainly feel that <<their $g.slave>> ass sore the next day, but in <<their $g.slave>> life, that would be nothing surprising.
</p>

<<run setup.qc.Injury('slave', 1).apply($gQuest)>>
<<run setup.qc.BoonizeRandom('slaver', 5).apply($gQuest)>>

<<opt "Ask the doctor to be gentle with the injured slave">>

<p>
Feeling pity for the slave, you <<uadv $unit.player>> knock on the door before entering. While sex is an acceptable recreation activity in your fort, you also need your slave to recover quickly, and you
<<uadv $unit.player>> tell this to your <<urace $g.slaver>>.
<<They $g.slaver>> begrudgingly agree, and slow down <<their $g.slaver>> fucking pace significantly to something more comfortable for the injured slave.
</p>

<</choose>>


:: Event_dominant_slave_1 [nobr] {"position":"850,12600","size":"100,100"}
<<set _o = $g.slave.getBedchamberOtherSlave()>>

<<if !_o>>
/* Should not happen, but nice for testing: */
<<set _o = setup.getAnySlaver()>>
<</if>>

<p>
As you approach your bedchamber to get some rest from your work, you hear your dominant slaves' voice coming from your chambers followed by a groan of bliss, indicating that <<they $g.slave>>'s been having fun without you. As you come around the corner and lean of the door frame you see that you have guessed correctly.
</p>

<p>

<<name $g.slave>> is standing over your little sub who has been forced to be on all fours

<<if _o.isHasTrait('training_pet_master') || _o.isHasTrait('training_pet_advanced')>>

like the good little pet <<they _o>> is

<<else>> like a pet

<</if>>

with a collar and leash attached to <<their _o>> <<uneck _o>>.
<<name $g.slave>> appears to be taking <<their $g.slave>> dominance training quite literally as they are currently training <<name _o>> to walk underneath their <<ulegs $g.slave>>. <<name $g.slave>> walks forward every few seconds and waits for <<name _o>> to stop, before crouching down on <<name _o>>, giving <<them _o>> a quick head massage as <<name $g.slave>> lowers their head down to <<their _o>> ear and whispers in the commanding tone you have taught <<name $g.slave>> so well: "You're being such a good little pet. You are going to make our <<Master $unit.player>> so happy when <<they $unit.player>> return."

At this point, <<name $g.slave>> walks around to face the door and looks up from <<name _o>>'s staring eyes to find you watching them both. With a sudden change in <<their $g.slave>> body language that indicates surprise, <<name $g.slave>> walks forward a little and locks <<their $g.slave>> legs around <<name _o>>'s head, forcing <<them _o>> to look at their <<Master $unit.player>>. Looking down at <<reps $g.slave>> head squished between two thighs causes you become somewhat aroused, and you start to get <<wet $unit.player>>.

</p>

<p>
You finally decide this is the time to enter the room and walk straight up to <<name $g.slave>> getting within a few inches of <<their $g.slave>> face and stare into <<their $g.slave>> eyes for a few moments. As <<name $g.slave>> becomes increasingly nervous, you break the battle of will and lean back a bit, "Good <<girl $g.slave>>, it's nice watching you two learn your places" as you give <<name $g.slave>>'s face a gentle stroke. You crouch down and give <<name _o>> a head scratch and then turn around and go over to your <<uslaverbed $unit.player>> and begin to strip. As you lie down with your <<ubreasts $unit.player>><<if $unit.player.isHasDick()>>, <<udick $unit.player>> and <<uballs $unit.player>>
<</if>>
on full display, you wave your <<uhand $unit.player>> at them both and instruct them to continue.
</p>

<p>
Regaining some composure, <<name $g.slave>> releases <<name _o>> from <<their $g.slave>> legs,

<<if !$g.slave.isHasDick()>> "stay" she commands and walks over to your toy collection to retrieve a large strapon then walks over

<<else>> takes a step back

<</if>>

and kneels down behind <<their $g.slave>> submissive pet. As <<they $g.slave>> does <<they $g.slave>> begins groping <<their _o>> butt while gentle probing <<their _o>> anus for a solid minute until <<reps _o>> <<uarms _o>> begin to shake. Just before <<their _o>> arms give out, <<name $g.slave>> reaches forward and roughly grabs <<their _o>>
hair
to keep <<their _o>>
<<uface _o>>
from falling into the ground. "Oh no you don't pet." <<they $g.slave>> says as <<they $g.slave>> pulls <<name _o>>'s hair back making <<their _o>> ass squeeze <<their $g.slave>> <<udickorstrap $g.slave>> between <<their _o>> cheeks. "You don't want to give in before you receive your reward, do you?" <<name $g.slave>> explains, causing <<name _o>> to make a slutty smile as <<they _o>> starts grinding <<their _o>> ass against <<them $g.slave>> accompanied with a quick bark.

</p>


<<choose>>

<<opt "Watch <<them $g.slave>> train <<their $g.slave>> pet for a while">>

<<set _o = $g.slave.getBedchamberOtherSlave()>>

<<if !_o>>
/* Should not happen, but nice for testing: */
<<set _o = setup.getAnySlaver()>>
<</if>>

<p>
Seemingly content on just watching your slaves, you lie back and enjoy the evening festivities as <<name $g.slave>> finally lets <<their $g.slave>> <<udickorstrap $g.slave>> slide into <<name _o>>'s <<uhole _o>>, causing <<them _o>> to groan happily and shudder. <<name $g.slave>> eventually lets go of <<name _o>>'s hair, allowing <<them _o>> to sink down to the floor and stick out <<their _o>> ass even more. "If you want this <<udickorstrap $g.slave>> <<name _o>>, you have to earn it", <<name $g.slave>> teases as <<they $g.slave>> picks up <<name _o>>'s leash again, making the collar tight against <<their _o>> neck, reminding <<them _o>> that <<their _o>> place is at the end of a leash, pleasing <<their _o>> <<Master $g.slave>>. <<Rep _o>> obediently reaches back and pulls apart <<their _o>> butt cheeks to reveal <<their _o>>
<<if _o.isHasVagina()>>
<<uvagina _o>> and
<</if>>
<<uanus _o>> for <<their _o>> <<Master $g.slave>> as <<they _o>> started humping <<name $g.slave>>'s <<udickorstrap $g.slave>>. "Good <<girl _o>>!"
</p>

<p>
With the constant action between your two slaves, it doesn't take long for <<name $g.slave>> and <<name _o>> to both almost reach their orgasms. "Ah ah ah, not yet pet. You don't get to
<<if _o.isHasDick()>>
cum
<<else>>
climax
<</if>>
unless you make me first. You won't want that would you." <<name $g.slave>> says as <<they $g.slave>> holds <<name _o>> firmly against <<them $g.slave>> so she couldn't hump anymore. <<name _o>> looks back with pure lust in <<their _o>> eyes, clearly begging for release "<<Master $g.slave>> please, am I not a good pet?". At that moment <<name $g.slave>> pulled on <<their _o>> collar again, pulling <<name _o>> up against <<their $g.slave>> <<ubreasts $g.slave>> and proceeds to start groping <<reps _o>> <<ubreasts _o>> and pinching <<their _o>> nipples. As soon as <<name _o>> started gasping again, <<name $g.slave>> thrusts forward, pushing them both on the ground as <<they $g.slave>> whispers in <<reps _o>> ears "I know you are.
<<if _o.isHasDick()>>
Cum
<<else>>
Climax
<</if>>
for me".
</p>

<p>
You eventually fell asleep to the quiet moans of your little puppy and the occasionally "Shh, don't wake <<Master $unit.player>>" coming from the other, more dominant slave.
</p>

<<opt "Help <<them $g.slave>> train their pet">>

<<set _o = $g.slave.getBedchamberOtherSlave()>>

<<if !_o>>
/* Should not happen, but nice for testing: */
<<set _o = setup.getAnySlaver()>>
<</if>>

<p>
Letting <<name $g.slave>> to continue to <<woman $g.slave>>handle <<name _o>>, <<name $g.slave>> finally lets <<their $g.slave>> <<udickorstrap $g.slave>> slide into <<name _o>>'s <<uhole _o>>, causing <<them _o>> to groan happily and shudder. You take this as your time to slide off your <<uslaverbed $unit.player>> and walk over to <<name _o>>. Crouching down in front of <<name _o>>, you spread your <<ulegs $unit.player>> seductively to reveal your

<<if $unit.player.isHasDick()>>

<<udick $unit.player>> and <<uballs $unit.player>> hanging tantalizingly

<<else>>

<<uvagina $unit.player>>

<</if>>

just slightly out of reach from <<reps _o>> <<umouth $unit.player>>.
</p>

<p>
Reaching out with both <<uhands $unit.player>>, you begin scratching your pet's head, eliciting a moan of satisfaction from <<them _o>>, before saying "<<name $g.slave>>, we should teach <<name _o>> some new tricks, and only if <<they _o>> does well with the trick can we both reward <<them _o>>."
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<optif $unit.player.isHasTrait('per_submissive') && $friendship.getFriendship($unit.player, $g.slave) > 600>>
<<opt "Let <<name $g.slave>> train two pets">>

<p>
Slowly getting up, you walk over to a drawer that you keep locked from your other slavers for a very important reason. <<name $g.slave>> and <<name _o>> both stop and watch you open the drawer and pull out a jeweled collar that you have been keeping for a special occasion. You walk over to <<name $g.slave>> and <<name _o>> and kneel down beside them both, before giving the collar to <<name $g.slave>>.
</p>

<p>
<<name $g.slave>> cautiously takes the collar in <<their $g.slave>> <<uhand $g.slave>> and looks back towards you puzzled. "You've been a good slave <<name $g.slave>> for quite some time and I think it's time I fully reward your loyalty towards your <<Master $unit.player>>." You lean over
<<reps _o>> back and kiss <<name $g.slave>>, to <<their $g.slave>> surprise, for several seconds before pulling back, "I have but one condition before we start. This stays between the three of us". <<name $g.slave>> does a quick bow of <<their $g.slave>> head, the surprise not having quite sunk in yet, while you feel <<name _o>> grab ahold of your thigh and rubs <<their _o>> head against it like a good cuddly cat. Guiding <<reps $g.slave>> <<uhands $g.slave>> with the collar still in them around your neck, you feel <<they $g.slave>> finally understand and finishes fastening the collar around your neck. With the collar fastened you get down on all fours next to <<name _o>> and nustle your head against <<theirs _o>> while presenting your butt to <<name $g.slave>>, just another pet for tonight's only <<Master $g.slave>>.
</p>

<p>
With two pets to train, <<name $g.slave>> has <<their $g.slave>> work cut out for them for the rest of the evening as <<they $g.slave>> routinely made each one of <<their $g.slave>> pets service <<their $g.slave>> <<udickorstrap $g.slave>> while the other tended to <<their $g.slave>> <<uhole $g.slave>>. The night ends after several hours of depravity with all three occupants lying exhausted on <<reps $unit.player>> <<uslaverbed $unit.player>>, <<reps $g.slave>> <<udickorstrap $g.slave>> still lodged deep inside <<reps $unit.player>> <<uhole $unit.player>>.
</p>

<<run setup.qc.BoonizeRandom('you', 2).apply(setup.costUnitHelper($unit.player))>>

<</choose>>


:: Event_doppelganger_epilogue [nobr] {"position":"1100,17600","size":"100,100"}
<<include "Opportunity_doppelganger_epilogue">>


:: Event_doppelganger_show [nobr] {"position":"100,17725","size":"100,100"}
<<set _guest = $gQuest.getTemplate().key == 'doppelganger_show'>>

<p>
<<Rep $g.slaver>> and <<their $g.slaver>> doppelganger <<rep $g.dop>> now both live at your fort —
<<if _guest>>
<<rep $g.slaver>> slaver|remain your slaver, of course, while <<rep $g.dop>> stays at your guest.
<<else>>
they are both now working as your slavers.
<</if>>
<<if $g.slaver.getLover() == $g.dop>>
Since they are lovers,
<<elseif $g.slaver.getLover()>>
Despite already having a lover,
<<else>>
As <<they $g.slaver>> slaver|do not yet have a lover,
<</if>>
<<rep $g.slaver>> would occasionally enjoy the sex with <<their $g.slaver>> own clone, occasionally enjoying
<<if $g.slaver.isHasDick()>>
the taste of <<their $g.slaver>> own dick,
<<else>>
the taste of <<their $g.slaver>> own cunt,
<</if>>
as well as the feeling of being serviced by what is basically <<their $g.slaver>> own <<umouth $g.slaver>>.
</p>

<p>
Today, they decide to pay you back for your generosity by giving you some private show, if you'd like?
</p>

<<choose>>

<<opt "Enjoy watching some self-sex action">>

<p>
They invited you to their room, knowing how much you enjoy watching sex. Once inside, they shuffle around, making you unable to distinguish who is who, and their bodies become nothing but interchangeable pair of flesh. They begin by caressing each other, touching their own sensitive spots that are also present in their other body, before eagerly kissing with each other. They then jump on the bed, and press their
<<if $g.dop.isHasDick()>>cocks<<else>>pussies<</if>> against one another, making sure everything is pleasantly symmetrical.
One of them breaks the symmetry by rotating their body, and positioning <<their $g.dop>> <<umouth $g.dop>> just right in front of the other's <<ugenital $g.slaver>>, before
<<if $g.slaver.isHasDick()>>
sucking it eagerly with the pace <<they $g.dop>> dop|know <<they $g.dop>> dop|like best.
<<else>>
eating it eagerly with the pace <<they $g.dop>> dop|know <<they $g.dop>> dop|like best.
<</if>>
They roll over the bed every now and then, their symmetrical body making the experience of watching them unlike any other.
In the end, they climaxes simultaneously, and both ends up lying on the bed together, giving each other a tired but satisfied kiss.
</p>

<<opt "Pass on the offer">>

<p>
With the stable of slaves being kept deep down in your dungeons, if you want to enjoy sex, you can skip the watching part and get straight to action. With this in mind, you decline the offer, telling them that if they want to pay you back, just work hard as a slaver under your employ.
</p>

<p>
It seems your words did motivate <<rep $g.slaver>> to work a little harder in the coming weeks.
</p>

<<run setup.qc.BoonizeRandom('slaver', 5).apply($gQuest)>>

<</choose>>


:: Event_drow_hex [nobr] {"position":"100,15100","size":"100,100"}
<p>
Today, some of your slavers woke up with a terrible nightmare.
All of them reported the same dream:
The visage of a drow <<lady $g.drow>> holding the end of a leash to a range of slaves,
while pointing to them that they will be the next in line.
This couldn't be explained by coindicence, and while
you have certainly angered some dissidents amongst the drows recently,
this felt too kind and uncharacteristic of the usual cruelty displayed by the drows.
</p>

<p>
Letting it be for a few days, it was clear that the nightmares was not the end of your slavers'
problems. They keep getting into bad situations -- whether it's the random rock that happened to
make them stumble just at the right time, or whether it's the weather that suddenly turn foul whenever
they try to exercise, you're certain now that your slavers have been quite cursed, perhaps by the drows.
</p>

<p>
Unfortunately, the drows are very careful, and will surely leave no proof for you accuse them of the
sabotage. The best you can do is just to repair the damage and cleanse these curse somehow.
Perhaps you should be more careful in the future not to raise the ire of these elves...
</p>


:: Event_dungeons_and_dragons [nobr] {"position":"350,17850","size":"100,100"}
<<set _w = setup.getAnySlaver([_u])>>

<p>
Your slavers originate from many disciplines.
There's <<rep _w>>, who loves nothing but <<uhobbyverb _w>>. And then there's <<rep $g.slaver>>, who loves nothing but to
<<if $g.slaver.isHasTrait('per_humble')>>
tell tales
<<else>>
brag
<</if>>
about <<their $g.slaver>> many adventures before joining your company.
To your knowledge, some of your other slavers love (or at least feign interest) in the stories, which apparently has affected the slaver...
</p>


:: Event_dungeons_and_dragons_fetch_quest [nobr] {"position":"600,17850","size":"100,100"}
<p>
Having successfully completed a heroic quest you gave <<them $g.slaver>> sometime ago, the "hero" grew bolder, and today <<yourrep $g.slaver>> asks your for another "heroic" quest suitable for a "hero" such as <<themself $g.slaver>>.
</p>


:: Event_dungeons_and_dragons_lair_of_evil [nobr] {"position":"850,17850","size":"100,100"}
<p>
<<Yourrep $g.slaver>> has come to demand the last quest to prove <<their $g.slaver>> heroism once and for all, to your great dismay.
</p>

<p>
You still want the adventure-deprived slaver to return to normal, of course, but
prior experiences have taught you that perhaps there is a merit to this.
<<yourrep $g.slaver>> slaver|have a knack of finding a quest where there
shouldn't be, so you might be able to use this to your advantage. A quest to
save a certain royal from the evil cluthes of... something. You might just
get yourself an easy royal slave this way!
</p>

<p>
Should you think this is a good idea, best grab your pen and start writing.
Otherwise, you can always refuse the absurd request, although your slaver
will probably become dejected in the months to come...
</p>


:: Event_earth_priests_ire [nobr] {"position":"100,14100","size":"100,100"}
<p>
  Your hip is shaking rather wildly today.
  And no, it's not because you have too much energy today: your coffee mug is shaking too on the table.
  Apparently, an earthquake has just hit your fort, and you're guessing it is anything but normal.
  Looking across your fort, your suspicion is confirmed:
  large swathes of vines, as well as large pillars of earth are spawning from the earth,
  destroying parts of your fort's exterior.
</p>

<p>
  Thankfully, it did not last long.
  After a few more minutes, the vines and the pillars of earth cease to move,
  left around at your fort and blocking the paths.
  The fort structures look undamaged thankfully, but someone will have to work and remove all the
  debris around.
  Two of your slavers, <<rep $g.tiredone>> and <<rep $g.tiredtwo>> would (forcefully) be
  volunteered to clean the vines and the rubbles.
  They will work overtime as you mull just what in the earth had just happened... perhaps you angered
  something within the earth itself?
</p>


:: Event_eastern_swindlers [nobr] {"position":"100,15600","size":"100,100"}
<p>
As you are doing the daily accounting for your money, you notice a large sum
has recently went missing. Upon further scrutiny, it seems that your company
has made a very bad purchase some time in an eastern city. Apparently <<yourrep
$g.slaver>> slaver|was swindled by an unscrupulous merchant from the east,
losing much of your money. The <<uadjbad $g.slaver2>> slaver <<rep
$g.slaver2>> slaver2|was also swindled, and probably many more of your slavers.
</p>

<p>
In fact, talking to the rest of the fort reveals that almost everyone
seemingly have been swindled by a merchant or two in the recent days. Perhaps
this is their way of showing their displeasure at your company from your
deeds in the past. You consider being more careful in the future, and to avoid
making these people as your enemy, but in the meantime you can always channel your
frustration into one of your slaves.
</p>


:: Event_elven_hot_springs_consequences [nobr] {"position":"100,14225","size":"100,100"}
When you enter your office today it's obvious that someone else has been here. A potted plant has been tipped over, scattering dirt all over the floor. There is also a note on your desk.
<div class='lettercard'>
    <p>
        <<name $unit.player>>,
    </p>
    <p>
        After a lot of soul searching I cannot continue on with <<rep $company.player>> any longer. Your transgression against the sacred rites of the Wood Elves is
        <<if $g.elf.isHasTrait('per_honorable')>>
          dishonorable, and
        <<elseif $g.elf.isHasTrait('per_kind')>>
          cruel, and
        <</if>>
        not something I will be party to any longer.
        By the time you see this I will have returned to my people, along with as many wood elf slaves as I have had the chance to free.
    </p>
    <p>
        Should we ever meet again, it will be with my <<uweapon $g.elf>> at your throat.
    </p>
    <p>
        Do not try to follow me,
    </p>
    <p>
        <<name $g.elf>>
    </p>
</div>


:: Event_elvish_hex [nobr] {"position":"350,15100","size":"100,100"}
<p>
Your slavers don't spend all their free time inside the fort.
Sometimes, they would go out into the nearby taverns to enjoy something else other than slave sex and
peruse the local selection of wares.
They usually return to your fort with nothing but smile on their face, but sometimes, they would also get something else during the r&r.
</p>

<p>
Yesterday, some of your slavers returned from those taverns and bragged about how they had
been blessed by a
<<if $g.elf.isMale()>>
ruggedly handsome
<<else>>
exotically beautiful
<</if>>
elven priest they just so happen to find in the tavern while being quite drunk.
You raised an eyebrow on this, of course, since there was so many things wrong with the story.
What's an elven priest doing in the vales, far from their home?
A priest going into the taverns?
And why would they bless your slavers known for their depravities?
</p>

<p>
Your questions are answered today, as instead of a blessing, it seems that your slavers
were bestowed by a terrible curse instead. Throughout the day, they would find themself in strange
precarious situations. It seems that instead of a blessing, your slavers were bestowed with
an elven hex instead. Come to think of it, you did anger some factions among the
<<rep $company.elf>> recently, and perhaps this is their way of showing their "gratitude"
for all you've done...
</p>


:: Event_end_of_a_company [nobr] {"position":"100,16600","size":"100,100"}
<<include 'Quest_end_of_a_company'>>


:: Event_end_of_management [nobr] {"position":"100,17100","size":"100,100"}
<p>
Unfortunately, due to one way or another,
the brothel you used to own in the <<lore location_npc>> has to close.
While this marks the end of your little brothel adventure for now, who
knows if you'll get another opportunity in the future?
</p>


:: Event_end_of_management2 [nobr] {"position":"350,17100","size":"100,100"}
<<include "Event_end_of_management">>

<p>
Luckily, you were able to pick up both the former-slave-turned-head-courtesan <<rep $g.courtesan>>, as well as the
former head-whore <<rep $g.head>>. The courtesan has been obediently returned to your
slave pens, while you can decide if you want to hire the former head-whore.
</p>


:: Event_enlightenment_of_the_soul___interlude [nobr] {"position":"350,12600","size":"100,100"}
<<set _p = $g.pupil>>
<<set _doctor = $dutylist.getUnitIfAvailable('doctor')>>
<p>
In obedience to your instructions, <<rep _p>> stops taking her contraceptive potions. <<if _doctor>> Your physician, <<rep _doctor>> <<else>> an alchemist <</if>> has concocted a fertility draught and calculated the best night to ensure your sowing will fall on fertile ground. That night has now come.
</p>
<p>
The evening hour strikes, and you swagger your way down to <<rep _p>>'s quarters, ready for an evening's delight. She knows to expect you and to make herself ready. Her door is ajar and soft lamplight is shining inside. You push it open.
</p>
<p>
The light mage's quarters are clean, freshly swept out, and simply appointed, with clean sheets and a well-turned-down blanket. Since her recent education, her furnishings include a few books and a pair of decorative prisms.
<<if _p.isHasTrait('per_lustful')>> Erotic paintings advertise <<rep _p>> 's lubricious longings to all who enter these quarters, and given her well known predilections, you suspect they have been many. But tonight, she is for you.
<<elseif _p.isHasTrait('per_submissive')>>Her paintings feature women in submissive postures and attitudes, bowing to the will of their masters, and ensuring that <<rep _p>>'s visitors understand that she wants them to take charge. <</if>>
<<if _p.isHasTrait('per_masochistic')>> One of the paintings features a woman spreadeagled and chained in midair, her face a mask of pleasure, and telling the visitor of <<rep _p>>'s fondness for receiving pleasure through pain.<</if>>
<<if _p.isHasTrait('per_dominant')>> Fur-lined handcuffs on the bed, blindfolds, and an arresting watercolor of helpless male figures on their knees before an imperious Mistress, reveal <<rep _p>>'s fondness for taking the dominant role. A small wooden table is covered with marks where previous visitors have been forced to scratch their names and protestations of devotion to their Mistress. If you ever get into this room alone, you might find it interesting to see how many members of your company have tasted the delights of <<rep _p>>'s bootheels.
<</if>>
<<if _p.isHasTrait('per_cruel')>> Several scourges and fetters adorn the walls, hinting at <<rep _p>>'s fondness for inflicting pain to bring pleasure to herself. <</if>>
What matters most now is that she is here and she is ready.
</p>
<<if _p.isHasTrait('per_submissive')>> <p>She sits on the edge of the bed, stripped to a filmy shift with a gold “slave” anklet above her left foot, her crossed arms barely covering her <<ubreasts _p>>. Her eyes are downcast, and her demeanor could not be plainer: she is awaiting your orders. With a wolfish grin, you kick the door closed and stride over her way. “On your feet!” you command. She springs up hastily, like a soldier caught by the sergeant-major or a slave fearing the whip. “Now off with that,” you say, gesturing up and down at her flimsy night-dress. She hastens to obey, casting it aside and leaving herself defenseless before you. </p>
<p> Smiling a contemptuous sort of approval, you walk around your shivering slaver, stroking her <<ubody _p>> and assets as you do so. She dares not utter a sound, but her body flushes and her breathing betrays her arousal. When you've brought her to a higher pitch of excitement, you command her to remove your own garments. She does so, standing to remove your upper clothes, and kneeling at your feet—where she belongs—to remove the lower ones. When she reveals your <<udick $unit.player>>, she treats it with deference, looking down as if too nervous to face this sacred idol. At a gesture from you, she folds your clothes carefully and sets them aside, as a good maid would do. </p>
<p> “My lord. . . “ she begins, but you cut her off with a gesture. You've got other uses for her tongue than talking. Hiking one foot up on the edge of her bed, you gesture her back to her knees. Taking hold of her hair, you guide her 'til she understands what she is to do, licking first between your toes, then up to the spots between your <<uballs $unit.player>> and legs. Only when she has performed these early devotions is she allowed to face your stiff cock in worship. </p>
<<elseif _p.isHasTrait('per_dominant') && $unit.player.isHasTrait('per_submissive')>>
<p> She stands there in black with a silver circlet on her head and a short black rod cradled in her arms, looking imperiously as you enter, and bringing out immediately all your own submissive tendencies—tendencies she must have noticed long ago, whether she said a thing about them or not. </p>
<p> “You're late,” she says. You look for a clock, but she cuts you off. “I <i>said</i>, you're <i>late!</i>. Now get that door closed and off with those clothes.” You hasten to obey. “On the <i>floor!</i>,” she adds before you can finish. “Your head doesn't come up to my level unless I say, got it?” </p>
<p>”Yes, mistress.</p>
<p>”Speak when you're spoken to! Now <i>get</i> those clothes <i>off!</i>.” You scramble to obey. Instinctively you look up to see her approval when you've done. With a gesture of her fingers, she half-blinds you with a flash of magic light. “<i>Don't</i> look me in the face, slaveboy, not unless I say!” </p>
<p>Under threat of her sharp tongue you're forced to fold the clothes neatly and put them away. Only then are you allowed to crawl to her feet, and lick her leather shoes while she taps your shoulders with her rod. Total silence and quick obedience are the ways to her favor, and you quickly fall into both habits. Mistress doesn't need a word except “yes, mistress,” and she doesn't need <i>that</i> very often. </p>
<p> Your good behavior is rewarded in time, as Mistress throws down her black gown and orders you to fold it up. “So,” she says, “you think you're fit to put your spawn in me, do you? Get over here.” You scramble to obey. She hikes a foot up onto her bed and makes it plain what you are to do—to give pleasure to her legs and lower regions with your tongue. The rod is in her hand. You had best not be idle. </p>
<<elseif _p.isHasTrait('bg_whore')>> <p> Before <<rep _p>> was a slaver, she was an experienced whore, and she has not forgotten her tradecraft. She's seductively dressed and approaches with a welcoming smile and terms of endearment. You are her “love” and her “sweetheart,” at least for tonight, and her welcoming words and friendly smiles would put the shyest young novice at his ease. </p>
<p> Shyness about getting down to business was never part of her profession, and in moments you are sitting together on the bed, your arms twined around each other, and kissing lasciviously. She asks whether you like her, whether you fancy her, whether you want to put a baby in her, while her practiced fingers pluck the pair of you as naked as the day you were born. </p>
<<elseif _p.isHasTrait('bg_courtesan')>> <p> Before <<rep _p>> was a slaver, she was an experienced courtesan, and she has not forgotten her tradecraft. She's seductively dressed and approaches with a welcoming smile and terms of endearment. You are her “love” and her “sweetheart,” at least for tonight, and her welcoming words and friendly smiles would put the shyest young novice at his ease. </p>
<p> Shyness about getting down to business was never part of her profession, and in moments you are sitting together on the bed, your arms twined around each other, and kissing lasciviously. She asks whether you like her, whether you fancy her, whether you want to put a baby in her, while her practiced fingers pluck the pair of you as naked as the day you were born. </p>
<<elseif _p.isHasTrait('per_lunatic')>> <p> <<rep _p>>'s back is to you, as she kneels beside a small desk, naked as the day she was born, and eyeing a glass snow-globe. As you close the door and approach, she shakes the globe and stares at it intensely, seemingly oblivious to you, but grinding her hips erotically and stroking one of her own thighs. </p>
<p> When you've latched the door softly and crossed the room halfway, her head snaps around suddenly. There's a wild look in her eyes, as if she's being hunted. She sets the globe down carefully and rises into a crouch with a wild look in her eyes, as if preparing to spring or to flee. You come closer yet, a half-amused smile on your face. She backs towards the bed. When she feels it behind her she grips the mattress with both hands, holding on as if for dear life. Calmly and confidently, you undress.</p>
<p> And then you step forward and pounce, and she shifts immediately from wild fear to wild passion. Now she's clinging to <i>you</i> and covering your body with little kisses and bites. When you seize her head for a long kiss, her tongue invades yours like a hungry she-beast, and your touches can't come half as fast as hers. You're dealing with a Force of Nature here, and the best you can do is hang on. </p>
<p> In a little while she has you face-down on her bed, while she gives extra attention to your nether regions, gripping your hips and biting your buttocks. Soon after she's peeling your cheeks aside and giving your <<uanus $unit.player>> careful attention with her tongue, moaning her devotion and delight as she does so. </p>
<<elseif _p.isHasTrait('per_aggressive')>> <p> She's standing in a one-piece robe. Upon your entry, she looks you up and down once, nods, and marches straight up to you. With a single, decisive gesture, she pulls open the sash of her robe. With another, she shrugs it off, leaving her proudly naked and ready for action. “Let's,” she says, which is all the wooing you need. </p>
<p>Your own clothes take a little longer to get off, but she assists you eagerly, and soon you're kneeling face-to-face on the bed, kissing and touching each other eagerly. With simple gestures she guides you to the sweet spots on her body, and you are not slow to touch, kiss, and bite them, bringing forth her gasps and moans of pleasure. There's a great attraction in a woman who knows what she wants, and <i>this</i> woman knows what she wants. She wants you. And she wants your child. And she's going to get it. </p>
<<else>> <p> She sits on a small loveseat, near a table with wine and glasses, and invites you over in a friendly way. When you sit beside her, it's clear enough she'd had a glass or two already, and it's easy enough to break the ice. You talk a little about your day, about the business, about the times you've had together, and when the moment seems right the talk turns to kissing, and the kissing turns to passionate necking, and the passionate necking moves to the bed. You stroke and touch each other's bodies, first through the clothes, then, as you take them off, bare. As you get more naked, you get more excited. </p>
<</if>>

<p>
<<if _p.isHasTrait('per_playful')>> With an impish grin, <<rep _p>> reaches to a side table, and presents you with a small silver salver. On top of which you see (of all things!) dice. You look a question and she explains the game. You each take a roll, and what the dice say, you do. One die for acts, one for parts.
<<elseif _p.isHasTrait('race_catkin') || _p.isHasTrait('race_lizardkin') || _p.isHasTrait('race_wolfkin') || _p.isHasTrait('race_demon')>> The dice are eight-sided instead of the usual six, so as to accommodate her nonhuman body parts. <</if>>.
</p>

<p>You roll the reddish-pink “female” dice—they come up “massage” and “lower back.” So you give her a lower back massage, eliciting sighs of pleasure and satisfaction.</p>
<p>She rolls the blue “male” dice—one for “nibble,” one for “stomach.” She nibbles playfully at your stomach, flicking her tongue out occasionally and hitting a sweet spot that makes you spasm.</p>
<<if _p.isHasTrait('race_catkin') || _p.isHasTrait('race_lizardkin') || _p.isHasTrait('race_wolfkin') || _p.isHasTrait('race_demon')>> <p> The next roll comes up “stroke” and “tail,” and you do. </p>
<<else>>
<p>And so the fun and games go on. </p>
<</if>>

<p> On the bed, you and <<rep _p>> continue your lovemaking.

<<if _p.isHasTrait('per_lustful')>> As your love-play continues, <<rep _p>> abandons herself further and further to desire, losing all inhibitions if she ever had any. Truly she is in her element. <</if>>

<<if _p.isHasTrait('per_kind') || _p.isHasTrait('per_calm') || _p.isHasTrait('bg_whore') || _p.isHasTrait('bg_courtesan')>> To your delight, you find that <<rep _p>> has the trick of putting a man at his ease, so that you think only of pleasure and happiness, and are overwhelmed with a strong feeling for her.
<<elseif _p.isHasTrait('per_dominant') || _p.isHasTrait('per_cruel')>> She is a demanding sort of lover, quick to criticize any move she doesn't like, and if you were older or less full of lust tonight she might undermine your performance (and then laugh at you). As it is—not a chance! <</if>>

<<if _p.isHasTrait('per_playful')>> She is enjoying every moment and she lets you know it. <</if>>

<<if _p.isHasTrait('per_lunatic')>> Her wild face scrunches on one side, and she goes at your body with reckless abandon. <</if>>

<<if _p.isHasTrait('per_empath')>> She seems to know just what you're in the mood for, and anticipates your desires like a wife of ten years. <</if>>

<<if _p.isHasTrait('per_cruel') and $unit.player.isHasTrait('per_masochistic')>> You soon discover that she loves inflicting pain just as much as you love receiving it—and she slaps your face repeatedly while growling at you, as your erection swells to an almost painful maximum. <</if>>

<<if _p.isHasTrait('per_masochistic') and $unit.player.isHasTrait('per_cruel')>> You soon discover that she loves receiving pain as much as you love inflicting it—and you slap her face with a wolfish growl, twist her arms behind her, then seize up a rod and thrash her buttocks while she screams for more. <</if>>

<<if _p.isHasTrait('per_submissive')>> Above all things, <<rep _p>> lives to serve your desires, and whatever you wish, she does at once without question. <</if>>

</p>

<p>
<<if _p.isHasTrait('per_dominant')>> When she feels the moment has come, <<rep _p>> takes hold of you, rolls you onto your back, and slides her hands over your chest. With a lascivious leer, she guides your hands to her <<ubreasts _p>>, and while you fondle them, she guides your <<udick $unit.player>> into her well-lubricated <<uvagina _p>>. She begins to ride.

<<elseif _p.isHasTrait('per_dominant') && $unit.player.isHasTrait('per_submissive') && _p.isHasTrait('race_draconic')>> To your surprise, your Mistress lowers her breast to yours, seizes your arms, and rolls over to put <i>you</i> on top. Her eager face tells you what you want and you plow away at her without holding back. Then you feel a sudden pressure on your buttocks and begin to realize why she changed positions as her leer grows fierce and you feel the tip of her <<utail _p>> penetrate your <<uanus $unit.player>>. Judging by her laugh, the look on your <i>own</i> face must be priceless. “That's right,” she says. “You get it while you give it. Now <i>knock me up, you bitch!</i> You slam away obediently.

<<elseif _p.isHasTrait('per_dominant') && $unit.player.isHasTrait('per_submissive') &&
_p.isHasTrait('race_demon')>>
To your surprise, your Mistress lowers her breast to yours, seizes your arms, and rolls over to put <i>you</i> on top. Her eager face tells you what you want and you plow away at her without holding back. Then you feel a sudden pressure on your buttocks and begin to realize why she changed positions as her leer grows fierce and you feel the tip of her <<utail _p>> penetrate your <<uanus $unit.player>>. Judging by her laugh, the look on your <i>own</i> face must be priceless. “That's right,” she says. “You get it while you give it. Now <i>knock me up, you bitch!</i> You slam away obediently.

<<elseif _p.isHasTrait('race_catkin') || _p.isHasTrait('race_lizardkin') || _p.isHasTrait('race_wolfkin') || _p.isHasTrait('race_demon')>>
At a silent assent between you, <<rep _p>> kneels on the bed, with her legs apart, her head far down, and her <<utail _p>> curled up to present her <<uvagina _p>>. She puts back a hand to guide you as you slide your full length in and begin to couple.

<<elseif _p.isHasTrait('per_lustful')>> And now she is on her back, eagerly encouraging you, as you slide your full length into her <<uvagina _p>>. A slaver she may be by day, but by <i>this</i> night she is a slave of lust, and she whispers her encouragements as you grind into her and give her what she wants. Her cries of pleasure are heard by all.

<<else>> And in time, <<rep _p>> finds herself beneath you, and you atop her. There is a pause filled with breathing as you look into each others' eyes, and the looks say <i>yes</i> and <i>now</i>. With a gentle hand she guides your <<udick $unit.player>> into herself and you begin to couple.
<</if>>
</p>

<p>
Your coupling grows more intense as you near your climax.
<<if _p.isHasTrait('per_active')>> <<rep _p>>'s energy is boundless, and she keeps up with you like a gold-medal sexual athlete. <</if>>
<<if _p.isHasTrait('per_sly')>> By the sound of her, <<rep _p>> has three screaming orgasms while you're on the way. If that accomplished liar is deceiving you about that, who is harmed, really? <</if>>
<<if _p.isHasTrait('per_lunatic')>> <<rep _p>>'s orgasmic cries rise to a passionate scream they can hear down in the slave dungeons, and with her wriggling body beneath you, you burst inside in ecstasy. As you lie together panting in the afterglow, she clutches your body and begins a little sing-song, “I'm gonnnna haaave a baaaaay-beee….”
<<elseif _p.isHasTrait('bg_whore') || _p.isHasTrait('bg_courtesan')>> Soon you are overcome with ecstasy and your semen streams inside <<rep _p>>, putting her in the happy state she most desires to be in. And if she never truly climaxed from your now-softening member, there are (as it were) no hard feelings. It was a motto of her old profession: “The customer always comes first.”
<<elseif _p.isHasTrait('per_dominant')>> <<rep _p>> 's body arches in climax, but she won't let you stop. “Do it!” she cries out. “Knock me up! <i>Knock</i> me <i>up</i>, I said!!!” Your <<udick $unit.player>> happily obliges, exploding in a burst of delight, leaving you both sated and panting.
<<elseif _p.isHasTrait('race_wolfkin')>> <<rep _p>> pants doglike as you copulate, and at the moment of climax lets out an ear-splitting wolf howl. (You vaguely remember reading that wolf howls are for communication, not anything sexual. You resolve not to tell <i>her</i> that.) Your own climax is not far behind, and the animal before you is well and truly bred.
<<else>> In a fit of generosity, you try to keep your mind on other things, hoping to draw out <<rep _p>> 's pleasure before you reach your own climax. You think of the account books, but those are full of sex slaves, and that turns you on. You think of your latest staff memo, but it was about an order from a specialty brothel, and <i>that</i> turns you on. In the end, you come in less than a minute after <<rep _p>>, and as your juices flow, you know you have done a good night's work. <</if>>
</p>
<p>
Afterwards, you lie together.
<<if _p.isHasTrait('per_dominant') && $unit.player.isHasTrait('per_submissive')>> But not for long. While you are in this room, <<rep _p>> is the Mistress and she doesn't let you forget it. Before you can leave, you have one last task to perform. She hands you a folding knife and gestures you to her marked-up wooden table, where you must carefully scratch your name among those of the others who have served beneath her. The humiliation makes you blush and rouses your <<udick $unit.player>>. You may be rubbing one out later at the thought. When you're done she takes the knife back, cuts a small lock of your hair for a trophy, and tells you to get the fuck out. But you can see her satisfied smile as you go, and know that beneath the games you have played, both of you are well satisfied.
<<elseif _p.isHasTrait('per_dominant')>> But not for long. <<Rep _p>>, that natural dominatrix, doesn't like you seeing her vulnerable side. She curtly dismisses you and you leave without lingering, but you can see her satisfied smile as you go.
<<elseif _p.isHasTrait('per_sexaddict')>> You fall asleep beside <<rep _p>>, her arm across your chest and a satisfied smile on her face. An hour or two later, she prods you awake, wanting more . . . .
<<elseif _p.isHasTrait('per_calm')>> Soon after <<rep _p>> falls asleep, her face a mask of inner calm and pure tranquility, such as you rarely see on a slaver. You think this must be a reflection of her inner being, something the perverse ways of <<rep $company.player>> have never been able to touch. You slip away quietly back to your own room.
<<elseif _p.isHasTrait('per_submissive')>> <<rep _p>> demurely avoids eye contact and doesn't speak too much, but you can tell she is happy to have been fully in your power, and to have come out as she wished to be. In time, you give your “slave” a pinch on the buttocks, and leave her to her happy dreams.
<<elseif _p.isHasTrait('per_playful')>> In time <<rep _p>> pulls out a boardgame from her native country, and the two of you enjoy some play and a little good wine before you take your leave. It's all so friendly and casual. You return to your own room, happy.
<<else>> Contentedly, <<rep _p>> falls asleep, secure in her knowledge that she is the future mother of your child, and now able to advance to the final level in the Academy.
<</if>>
</p>
<p>
Some days later,
<<if _doctor>>
Your physician, <<rep _doctor>>, confirms
<<else>>
<<rep _p>> confirms
<</if>>
that you have done your duty, and the pupil is now ready to return to the academy. </p>


:: Event_enlightenment_of_the_soul___interlude2 [nobr] {"position":"600,12600","size":"100,100"}
<<set _p = $g.pupil>>
<<set _father = $family.getUnitRelation($g.child, 'father')>>
<<set _doctor = $dutylist.getUnitIfAvailable('doctor')>>

<<if !_father>>
/* player dismissed the father */
<p>
Later that week, <<yourrep _p>>
was often found missing from the fort. You can only hope they are doing
their work in the earnest.
</p>
<<else>>
<p>
Later that week, <<yourrep _p>> and <<rep _father>>
were often found missing from the fort. You can only hope they are doing
their work in the earnest.
</p>
<</if>>

<p>
Some days later,
<<if _doctor>>
Your physician, <<rep _doctor>>, confirms
<<else>>
<<rep _p>> confirms
<</if>>
that
<<if _father>>
<<rep _father>>
<<else>>
your former slaver
<</if>>
has done the duty, and the pupil is now ready to return to the academy. </p>


:: Event_entertainer_dance [nobr] {"position":"100,19475","size":"100,100"}
<p>
<<Yourrep $g.slaver>> slaver|is known for having a beautiful voice, as well as expert dancing skills. Today, a small commotion is forming on the <<rep setup.buildingtemplate.hiringsquare>>, and <<rep $g.slaver>> slaver|is in the center of it. <<Therace $g.slaver>> slaver|is dancing and singing to celebrate the nice weather, and slaver|have gathered quite a crowd of both slavers and visitors around <<them $g.slaver>>.
</p>

<<if $g.slaver.isMale()>>
  <<questimage 'entertainer_dance_male.jpg'>>
<<else>>
<</if>>

<<choose>>

<<opt "Just watch">>

<p>
<<if $g.slaver.isHasTrait('skill_entertain')>>
<<Yourrep $g.slaver>> is a region-class entertainer, and you were captivated
in no time at all. By the time the performance ended, almost the entire fort were gathered in the square. The performance was indeed very good, and you feel inspired just from watching it.

<<run setup.qc.BoonizeRandom('you', 15).apply($gQuest)>>
<<else>>
While <<yourrep $g.slaver>> may not be a famous entertainer, <<they $g.slaver>> slaver|is still very good, and you were captivated in no time. By the time the performance ended, almost half of the entire fort were gathered in the square. The performance was indeed quite good, and you feel inspired just from watching it.

<<run setup.qc.BoonizeRandom('you', 5).apply($gQuest)>>
<</if>>
</p>

<<opt "Join <<them $g.slaver>>">>

<p>
You step into the center of the square, and <<yourrep $g.slaver>> slaver|stop temporarily, waiting for you to make your move.

<<if $unit.player.isHasAnyTraitExact(['skill_entertain', 'bg_entertainer'])>>
<<if $unit.player.isHasTrait('bg_entertainer')>>
As a former entertainer yourself,
<<else>>
You are no slouch when it comes to dancing or singing, and
<</if>>
you easily continue <<their $g.slaver>> performance. Soon the two of you were dancing and singing for the growing crowd. By the end of the performance, almost the entire fort were in attendance, and many threw in some tips for the both of you. While the tips are nice, you feel you've also grown closer with <<therace $g.slaver>>.
<<run setup.qc.Money(500).apply($gQuest)>>

<<else>>
But you're not a professional dancer, and despite your best efforts, you are no match for <<their $g.slaver>> skills in dancing. Still, <<they $g.slaver>> slaver|appreciate your gesture, and soon starting to guide you into the performance. Before long a larger crowd starts to gather around the two of you, and <<yourrep $g.slaver>> slaver|continue to expertly lead you along the performance until the end. While you may not have contributed much to it, you feel you've become closer with <<therace $g.slaver>> nonetheless.
<</if>>
</p>

<<run setup.qc.FriendshipWithYou('slaver', 100).apply($gQuest)>>

<</choose>>


:: Event_equivalent_exchange [nobr] {"position":"600,20475","size":"100,100"}
<<include "Opportunity_equivalent_exchange">>


:: Event_ex_leader [nobr] {"position":"350,19475","size":"100,100"}
<<includereplace 'Opportunity_ex_leader'>>


:: Event_ex_reserved [nobr] {"position":"225,13100","size":"100,100"}
<p>
You would check up on your more obedient slaves from time to time, and <<yourrep $g.slave>> happens to be scheduled for inspection today. <<They $g.slave>> comes into your office naked, to find that the earlier inspection is going a little long. The slave before <<them $g.slave>> is obediently riding
<<if (!$unit.player.isHasDick())>>one of your larger strap-ons<<else>>your cock<</if>>.
<<They $g.slave>> waits patiently, but does not bother to hide <<their $g.slave>> arousal at the lewd sight. <<They $g.slave>> obviously wants to be next;
<<if $g.slave.isHasDick() && $g.slave.isInChastity()>>
<<their $g.slave>> chastity cage is dribbling precum, and <<they $g.slave>>'s clearly uncomfortable with simultaneous arousal and unwillingness to suffer a hardon inside it
<<elseif $g.slave.isHasDick()>>
<<their $g.slave>> <<udick $g.slave>> is painfully erect
<<else>>a sheen is visible on <<their $g.slave>> pussylips<</if>>, <<their $g.slave>> nipples are stiff, and <<they $g.slave>>'s starting to breathe a little hard.
</p>

<p>
When you finish and send the slave you were boning on <<their $g.slave>> way with a light slap on the rump, you seat yourself to inspect <<name $g.slave>>. As you do,
<<if (!$unit.player.isHasDick())>>your rather realistically modeled phallus dangles between your legs<<else>>your half-hard <<udick $unit.player>> hangs between your legs<</if>>, still slick from fucking the previous inspectee. <<Reps $g.slave>> <<ueyes $g.slave>> focus on it with painful intensity, and the <<urace $g.slave>>'s
<<if $g.slave.isHasDick() && $g.slave.isInChastity()>>
chastity cage begins to bother <<them $g.slave>> even more.
<<elseif $g.slave.isHasDick()>>
hard dick releases a string of precum.
<<else>>
the distinct smell of female arousal in the office intensifies.
<</if>>
You recall <<their $g.slave>> rather reserved past —
<<if $g.slave.isHasTrait('bg_royal')>>
<<they $g.slave>> slave|was born to rule, not to be used as sex toy.
<<elseif $g.slave.isHasTrait('bg_mythical')>>
<<they $g.slave>> slave|was born to be worshipped as a deity, not as a sex object.
<<elseif $g.slave.isHasTrait('bg_engineer')>>
<<they $g.slave>> slave|was an engineer, usually working with mechanical devices and not sex toys.
<<elseif $g.slave.isHasTrait('bg_scholar')>>
<<they $g.slave>> used to spend most of <<their $g.slave>> time buried in the books, and have little time for sex.
<<elseif $g.slave.isHasTrait('bg_noble')>>
<<they $g.slave>> attended modest and noble parties, and would often use slaves instead of being used as one.
<<elseif $g.slave.isHasTrait('bg_healer')>>
<<they $g.slave>> practiced the art of healing, an art very far yet very close to sex.
<<elseif $g.slave.isHasTrait('bg_monk')>>
<<they $g.slave>> spent <<their $g.slave>> days honing <<their $g.slave>> body and mind.
<<elseif $g.slave.isHasTrait('bg_priest')>>
<<they $g.slave>> spent <<their $g.slave>> days in chaste solitude as a dedicated priest.
<</if>>
<<They $g.slave>> must not have been a fan of the dick then, but <<they $g.slave>>'s certainly come around.<<if (!$unit.player.isHasDick())>> Even a strap-on is enough to get <<them $g.slave>> all hot and bothered.<</if>> On impulse, you ask <<them $g.slave>> if <<they $g.slave>> remembers how <<they $g.slave>> used to feel about cock. <<They $g.slave>> hesitates, wondering how to answer, but decides that honesty is the best policy and says, "Yes, <<Master $unit.player>>. I do. I mean, not all the time. It's easy to forget that I wasn't always such a cock-hungry slut." <<They $g.slave>> laughs, a rueful sound.
<<if $g.slave.isHasTrait('per_sexaddict')>>
"I need it so bad now, I'll let anybody fuck me. I mean, I'd let anybody fuck me, if it wasn't already my job as a slave.
<<elseif $g.slave.getMainTraining().getTags().includes('troral')>>
"Cocks are so hot. Just thinking about them gets me all horny. How they're all throbbing and warm and then they cum..." <<They $g.slave>> trails off. "Sorry, got distracted.
<<elseif $g.slave.getMainTraining().getTags().includes('tranal')>>
"I didn't know how much fun getting fucked in the butt was back then.
<<else>>
"Guys are just so hot - all big and strong and muscly.
<</if>>
<<if $unit.player.isHasDick()>>
<<if $unit.player.isHasTrait('face_attractive')>>
And being owned by such a handsome man has helped."
<<elseif $unit.player.isHasTrait('muscle_strong')>>
And being owned by such a shapely man has helped."
<<else>>
And being owned by a man like you has helped."
<</if>>
<<else>>
Not that I don't love ladies too."
<</if>>
<<They $g.slave>> arches <<their $g.slave>> back and bats <<their $g.slave>> eyes at you. "A lot."
</p>


<<choose>>

<<opt "<<They $g.slave>> wants dick. Give <<them $g.slave>> the dick">>

<p>
You rise fluidly out of your chair, pointing at the floor at <<their $g.slave>> feet. <<They $g.slave>> needs no further direction, and hurriedly gets down to place <<their $g.slave>> <<umouth $g.slave>> at dick height. <<They $g.slave>> <<if (!$unit.player.isHasDick())>>gives your strap-on a blowjob<<else>>sucks you off<</if>> with relish, looking adoringly up at you as <<they $g.slave>> rhythmically works <<their $g.slave>> lips up and down
<<if (!$unit.player.isHasDick())>>the<<else>>your<</if>> thick shaft. After a bit of this, you pull
<<if (!$unit.player.isHasDick())>>the phallus<<else>>yourself<</if>>
free with a delicious popping noise, and haul the slave to <<their $g.slave>> feet. You grab <<their $g.slave>> <<uarms $g.slave>> in a firm hold and pull <<them $g.slave>> up on tiptoe (at which the horny <<urace $g.slave>>
<<if $g.slave.isFemale()>>
giggles
<<else>>
smiles
<</if>>
with anticipation), and then thrust into the gap between <<their $g.slave>> thighs. This motion slides <<if (!$unit.player.isHasDick())>>the strap-on<<else>>your hard dick<</if>> <<if $g.slave.isHasVagina()>>against <<their $g.slave>> moist pussylips<<else>>against <<their $g.slave>> anus and then past <<their $g.slave>> ballsack<</if>>, eliciting a shocked gasp and then a prolonged whine of pleasure. <<They $g.slave>> humps <<themself $g.slave>> along <<if (!$unit.player.isHasDick())>>the phallus<<else>>your shaft<</if>> shamelessly, craning around to rain kisses on your jawline and neck.
</p>

<p>
<<if $g.slave.isHasVagina()>>

When you gently push <<their $g.slave>> face away from you by tipping <<their $g.slave>> torso forward, <<they $g.slave>> moans a little from the loss of closeness, but soon forgets it when you press your <<if (!$unit.player.isHasDick())>>strap-on<<else>>dick<</if>> inside <<them $g.slave>>. <<They $g.slave>> begins to gasp your name, moan adoration, and beg nonsensically, and <<they $g.slave>>
orgasms promptly.
<<They $g.slave>> groans with overstimulation as you pull out, and then whines when you redouble it by immediately switching to <<their $g.slave>> <<if $g.slave.isHasTrait('anus_gape')>>loose<<elseif $g.slave.isHasTrait('anus_loose')>>practiced<<else>>tight<</if>> ass.

<<else>>

When you gently push <<their $g.slave>> face away from you by tipping <<their $g.slave>> torso forward, <<they $g.slave>> moans a little from the loss of closeness, but soon forgets it when you press your <<if (!$unit.player.isHasDick())>>strap-on<<else>>dick<</if>> against <<their $g.slave>> <<if $g.slave.isHasTrait('anus_gape')>>loose<<elseif $g.slave.isHasTrait('anus_loose')>>practiced<<else>>tight<</if>> anus. As you push inside <<them $g.slave>>, <<they $g.slave>> begins to gasp your name, moan adoration, and beg nonsensically, and <<they $g.slave>> orgasms promptly. <<They $g.slave>> groans with overstimulation, but you're just getting started; you grab <<their $g.slave>> knees and hoist <<them $g.slave>> up to fuck <<their $g.slave>> ass some more.
<</if>>

You climax there, your tour of <<their $g.slave>> holes completed; <<they $g.slave>> drops down to clean you off again before thanking you earnestly and taking <<their $g.slave>> leave, though not without a final turn in the doorway to steal a final loving glance at <<if (!$unit.player.isHasDick())>>your strap-on<<else>>your junk<</if>>.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<opt "Send <<their $g.slave>> down to the gym to share that attraction around">>

<p>
You bring up a map of your fort and point out the <<rep setup.buildingtemplate.gym>> to <<them $g.slave>>; you tell <<them $g.slave>> to go down there, and let <<them $g.slave>> know <<they $g.slave>>'ll spend the rest of the day there. <<They $g.slave>> looks mystified, and when you do not elaborate further, <<they $g.slave>> asks,
"What should I do there, <<Master $unit.player>>?"
Anything <<they $g.slave>> wants, you tell <<them $g.slave>>. <<They $g.slave>> still looks somewhat puzzled, but <<they $g.slave>> heads down to the gym anyway. When <<they $g.slave>> gets there, <<they $g.slave>> sees a steady stream of well-muscled male visitors as well as some of your slavers entering the showers area, and gets it. <<They $g.slave>> heads into the locker room. Given the atmosphere of your fort, there isn't much reaction to a naked <<urace $g.slave>> entering a male-dominated gym. That is, until <<they $g.slave>> selects from among the sweaty gentlemen coming in from the weight room, sidles up to one, and says cheerfully, "Hi! Do you wanna fuck me?" He does, and so do many of other visitors. So many, in fact, that having the showers right there becomes convenient for <<them $g.slave>> as the day goes on.
</p>

<<run setup.qc.BoonizeRandom('slaver', 5).apply($gQuest)>>

<</choose>>


:: Event_ex_slaver_for_sale [nobr] {"position":"600,15850","size":"100,100"}
<p>
In the recent months, you have somehow made enemies with the local brigand
gang. And today, you reap the consequences as <<yourrep $g.slaver>> reports
that <<yourrep $g.victim>> victim|is nowhere to be seen. Searching through the
entire fort, from their room to the empty dungeon cells yields nothing, as
if <<rep $g.victim>> victim|have just vanished into thin air. That is, until you see
the news that <<rep $g.victim>> victim|is going to be auctioned soon in the
undercity of Lucgate.
</p>

<p>
It is unfortunately already too late for you to participate in the auction,
but from what you have gathered, this is the work of that <<rep $company.outlaws>>
that you have irked recently. But there is no time to think about that —
<<uneedrescue $g.victim>>.
</p>


:: Event_fallen_knight [nobr] {"position":"600,19475","size":"100,100"}
<p>
<<Yourrep $g.slave>> slave|have been quite well-broken to slavery. Looking at <<therace $g.slave>> now, it would be hard to believe that <<they $g.slave>> slave|was once an upstanding knight in service to <<their $g.slave>> liege.
<<if $g.slave.isHasTrait('muscle_verystrong')>>
<<Their $g.slave>> well-trained and extremely chiseled body now only serve to pleasure other <<men $unit.player>>.
<<elseif $g.slave.isHasTrait('muscle_strong')>>
<<Their $g.slave>> well-honed and muscular body now only exists to pleasure other <<men $unit.player>>.
<</if>>
<<if $g.slave.isHasTrait('per_chaste')>>
<<They $g.slave>> still slave|retain a vestige of <<their $g.slave>> former chastity oath, but would not hesitate the slightest to fulfill any of <<their $g.slave>> owner's depraved desires.
<</if>>
<<if $g.slave.isHasTrait('per_honorable')>>
While you can still sense some honor remaining inside the slave, it takes a back seat to all the slave conditioning <<they $g.slave>> slave|have acquired.
<</if>>
<<if $g.slave.isHasTrait('per_brave')>>
<<They $g.slave>> slave|remain considerably brave by slave's standard, and is able to take a hard assfucking with a stoic face.
<</if>>
All in all, you have done quite a marvelous job with the once pure and innocent.
</p>

<<choose>>

<<opt "Goad <<them $g.slave>> while you use <<them $g.slave>>">>

<p>
You order <<them $g.slave>> to present <<their $g.slave>> ass for a good hard assfucking.
<<They $g.slave>> obediently <<ustripanusand $g.slave>> spreads <<their $g.slave>> <<ulegs $g.slave>> wide, hardening <<themself $g.slave>> for the pain of the upcoming assrape.
You <<ustrippantsand $g.you>> tease your <<udickorstrap $g.you>> along <<their $g.slave>> ass while teasing <<them $g.slave>> if <<they $g.slave>> crave the penetration, despite being so utterly chaste back before.
<<They $g.slave>> slave|know that there is only one correct answer to this,
<<if $g.slave.isCanTalk()>>
but <<their $g.slave>> gag prevents them from saying anything but guttural moans.
<<else>>
and they meekly says, "Yes, <<master $g.you>>".
<</if>>
Hearing the submissive declaration, you give your phallus a push and it slides deliciously into the <<uanus $g.slave>>, and you keep taunting <<them $g.slave>> as you fuck <<them $g.slave>> <<uadv $g.you>> throughout the rest of the night.
Looking at the formerly pure and headstrong ex-knight reduced to an exhausted and well-used slut
<<if $unit.player.isHasDick()>>with cum dripping out of <<their $g.slave>> well-fucked asspussy<</if>> brings
a smile to your face at how you've utterly broken such a difficult-to-break specimen.
</p>

<<run setup.qc.FriendshipWithYou('slave', -50).apply($gQuest)>>

<<opt "Knight <<them $g.slave>> with your <<udickorstrap $g.you>>">>

<p>
With an evil grin, you order <<therace $g.slave>> to kneel before you. The obedient slave hurriedly obeys, of course, and looks at you curiously. You
<<if $unit.player.isHasDick()>>
<<ustrippantsand $g.you>>
<<else>>
don a strap-on and
<</if>>
position it right above <<reps $g.slave>> head.
</p>

<p>
<<Their $g.slave>> confusion at your action slave|was answered as <<they $g.slave>> hear you starting to enact a mock knighting ceremony. "<<name $g.slave>>, do you acknowledge me to be your true and lawful master?". Realizing what you're trying to do, <<their $g.slave>> last remnant of knightly pride was unable to suppress <<their $g.slave>> slave conditioning, and <<they $g.slave>> <<ustripmouthand $g.slave>> answers, "I so swear.".
You continue, "Do you pledge fealty to me, and swear your <<if $g.slave.isHasDick()>>asspussy<<else>>pussy<</if>> to me, to be forever at my whim and want?".
"I so swear.", repeats <<therace $g.slave>>.
"Then repeat after me: I, <<name $g.slave>>, do solemnly swear and pledge my <<if $g.slave.isHasDick()>>asspussy<<else>>pussy<</if>> to <<name $g.you>>, my liege and master, to worship and obey <<them $g.you>> forever, and to understand that my destiny is to be a slave forever."
Despite taken a little aback by your corruption of the knight oath, <<they $g.slave>> obediently repeated the oath. You lower your <<udickorstrap $g.you>> onto <<their $g.you>> shoulders while saying "Then I dub thee Sir <<name $g.slave>>, and present to you this <<udickorstrap $g.you>> that you now live and die for. You may now suck on it for my pleasure." You finish the ceremony by sliding your <<udickorstrap $g.you>> upwards into <<their $g.slave>> <<umouth $g.slave>> and <<uadv $unit.player>> facefuck <<therace $g.slave>> afterwards,
<<if $g.slave.isCanOrgasm()>> and <<they $g.slave>> cums multiple time from the dominant treatment
<<else>>
while <<they $g.slave>> slave|do <<their $g.slave>> best to not get aroused lest
<<if $g.slave.isInChastity()>>
<<their $g.slave>> dick would throb painfully against its tiny cage.
<<else>>
<<they $g.slave>> broke <<their $g.slave>> slave rules.
<</if>>
<</if>>
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<questauthorcardtext 'parody of Knighting Ceremony in Oaths of Crows'>>

<</choose>>


:: Event_faraway_disapproval [nobr] {"position":"350,15225","size":"100,100"}
<p>
Despite the long distance, your company has somehow maintain a positive
relationship with the <<rep $company.humansea>>. But recent events have
painted your company in a much worse light for them, and apparently they have
enough of it. In the coming days, you receive much less communication from
these elusive people. It seems they have decided to sever connections with
your company as the result of your recent actions.
</p>


:: Event_farmer_harvest [nobr] {"position":"850,19475","size":"100,100"}
<p>
Your slavers come from quite a variety of backgrounds, and most have not forgotten their old craft even as slavers. This includes <<yourrep $g.slaver>>, who slaver|was a farmer before <<they $g.slaver>> became your slaver. As a hobby, <<therace $g.slaver>> slaver|tend to a small garden just outside of your fort, growing various mundane crops like tomatoes and corn.
</p>

<p>
Today, <<they $g.slaver>> slaver|is reaping quite the harvest, and <<therace $g.slaver>> slaver|is beaming quite proudly about it. Indeed, the produce is of high quality, having been tended carefully both by <<themself $g.slaver>>, and also by some of the fort's slaves. <<Rep $g.slaver>> slaver|have given you a sizable portion of the harvest. Baskets of tomatoes and corn are now sitting in your office, and you wonder what to do with them.
</p>

<<choose>>

<<opt "Sell them">>

<p>
<<Reps $g.slaver>> produce is of quite a high quality, since <<they $g.slaver>> slaver|was able to tend it more thoroughly with the help of the fort's slaves.
The produce was sold for quite a sum, which goes into the company's coffers.
</p>

<<run setup.qc.Money(800).apply($gQuest)>>

<<opt "Throw a feast">>

<p>
Today's dinner will be cooked personally by you, and despite your questionable cooking skills, the fresh ingredients greatly make up for it.
The food comes out very good, and all your slavers eat heartily today. <<Yourrep $g.slaver>> slaver|become the <<man $g.slaver>> of the night, and <<their $g.slaver>> mood significantly increase in the coming days.
</p>

<<run setup.qc.BoonizeRandom('slaver', 10).apply($gQuest)>>

<<opt "That's a nice large cucumber you have there...">>

<p>
You select a particularly large cucumber and fashion it into a make-shift dildo.
<<if $unit.player.getTraitWithTag('magic')>>
  Using your own magic mastery, you enchant the cucumber to keep it fresh for a good long while.
<<else>>
  <<run setup.qc.Money(-1000).apply($gQuest)>>
  You then proceed to find an enchanter inside your fort, and pay them to enchant the cucumber
  with a spell of everlasting. This should keep the cucumber fresh for a good long while.
<</if>>
Why you have decided to do such a thing, you never know, but you got yourself one rather
unfortunate enchanted vegetable ready to be inserted into some unwilling anus...
</p>

<<if $g.slaver.isMale() || $gQuest.getSeed() % 2 == 0>>
  <<run setup.qc.EquipmentDirect('dildo_cucumber_anus').apply($gQuest)>>
<<else>>
  <<run setup.qc.EquipmentDirect('dildo_cucumber').apply($gQuest)>>
<</if>>

<</choose>>


:: Event_fetters_with_pulleys [nobr] {"position":"1100,19475","size":"100,100"}
<p>
<<Yourrep $g.slaver>> is quite the crafty <<urace $g.slaver>>. Ever since <<they $g.slaver>> joined your company years ago, <<they $g.slaver>> slaver|have been using <<their $g.slaver>> experience as an ex-inventor to craft various bondage devices.
<<if $g.slaver.isHasTrait('per_kind')>>
Being the kind slaver that <<they $g.slaver>> contradictory slaver|is, <<they $g.slaver>> slaver|do not use them <<themself $g.slaver>>, but mostly to fulfill a request or two from <<their $g.slaver>> friends.
<<elseif $g.slaver.isHasTrait('per_cruel')>>
<<They $g.slaver>> particularly delights in crafting the most painful-looking devices, and hearing the slaves scream in pain is fun for the cruel slaver.
<<else>>
<<They $g.slaver>> crafts most of the bondage tools <<they $g.slaver>> needs to use on the slaves, sometimes with a personal flair to spice up slave trainings.
<</if>>
<<if $g.slaver.isHasTrait('skill_creative')>>
<<Their $g.slaver>> creativity also means that these devices tend to be inventive, with a few nudges here and there that looks innocuous, but would often pleasurize the slave in inopportune times.
<</if>>
</p>

<p>
Recently, <<theslaver $g.slaver>> slaver|have been spending quite a lot of time in the fort's <<rep setup.buildingtemplate.forge>>, together with the resident blacksmith. And you finally know why today — the slaver comes to your office bringing a unique contraption: a set of pulleys and sturdy rope ending with a pair of fetters.
The contraption could be installed in some bedchamber, and can be used to hang a slave or two from the ceiling for some fun bondage nights. Alternative, you can always find a buyer that is willing to purchase such a unique contraption for their perverted uses.
</p>

<p>
<<if $g.slaver.isHasTrait('per_lavish')>>
Surprisingly, the slaver only asks for a pittance pay in return, just <<money 500>> to barely cover the costs — fitting, considering how generous the slaver is. You're not going to complain either way!
<<elseif $g.slaver.isHasTrait('per_frugal')>>
But of course, there is a matter of costs involved in making the contraption, and according to your slaver, it amounts to a whopping <<money 4000>>. You have your doubts, especially considering how greedy the slaver is, but decide that it's worth the price for such a unique piece of furniture.
<<else>>
All your slaver asks for is some money to cover the materials — a reasonable sum of <<money 2000>>, which you <<uadv $unit.player>> pay.
<</if>>
</p>

<p>
Now that you have your <<uhands $unit.player>> on the <<rep setup.item.f_punishment_good_slaver>>,
<<if $inventory.isHasItem('sexmanual_upsidedown')>>
you might want to reconsult your <<rep setup.item.sexmanual_upsidedown>> to see if there's any interesting use you can get out of this furniture...
<<else>>
you can't help but wonder if there's something kinky you could do with it...
<</if>>
</p>


:: Event_flickering_flame [nobr] {"position":"850,20475","size":"100,100"}
<<include "Opportunity_flickering_flame">>


:: Event_fort_clearing [nobr] {"position":"1100,16100","size":"100,100"}
<p>
It has been several weeks since you've settled at the fort, and its starting
to shape up. Many rubbles have been cleared up — some personally by you — and
the place is starting to feel like home. But there are still many more ruins
to unlodge, and together with <<yourrep $g.slaver>> you look towards the
still ruinous part of your fort.
</p>

<p>
Thinking you might get some more work done today, you decide to go and clean up a
little bit of rubble by the ruined tower next to your fort. As you move the
rocks around, <<yourrep $g.slaver>> slaver|come to join you, and both of you work
your asses around until the sun starts to set. By the end, the first floor of
the tower is starting to look habitable, with most of the big ruins cleared
out of the place.
</p>

<p>
As you are about to head back to your fort, <<yourrep $g.slaver>> slaver|grab you by the shoulders
before handing you a little encouragement present — an acknowledgement and
thanks for all the hard work you have done so far. It's an interestingly
graphic book, depicting various races engaging in anal sex, surely a valuable
addition to a slaving company such as yourself.
<<if $unit.player.isHasTrait('per_chaste')>>
Given your... relatively chaste background, you are horrified by some of the
images shown in the book. But you make sure to keep up appearances, feigning
approving nods, at least until <<rep $g.slaver>> slaver|is out of sight.
<<else>>
You can't wait to read through the book to receive new kind of pleasures from
the various slaves your company will surely gather in the future, and you
swear <<rep $g.slaver>> slaver|smirk a little as <<they $g.slaver>> slaver|watch your
expression turn lewd for a second.
<</if>>
Thanking <<therace $g.slaver>>, you bring the <<rep
setup.item.sexmanual_bodypart_anus>> back with you into your fort.
</p>


:: Event_fort_rescue [nobr] {"position":"1100,15725","size":"100,100"}
<p>
Ever since slavery was banned ten years ago, the people of the <<rep $company.humankingdom>>
abhor slavery. This, compounded with your recent acts against them, has made
them painfully aware of your existence, and you have been wary of some sort
of retaliation in the past few weeks.
</p>

<p>
Today, a small band of adventurers, no doubt sent over by the representatives of the <<rep
$company.humankingdom>>, comes into your fort and launches a surprise attack on your
fort. While you and your slavers manages to fend off their attacks from
damaging the compound, there are nobody to guard the dungeons. When the
assault ends, <<yourrep $g.victim>> victim|is nowhere to be seen, quite
possibly being rescued by the adventurers on order from the <<rep
$company.humankingdom>>.
</p>

<p>
<<if $g.victim.isHasTrait('training_obedience_advanced')>>
Given the slave's trainings, it will be quite difficult for them to restore the
slave into a normal <<urace $g.victim>> being again.
<<elseif $g.victim.isMindbroken()>>
It's unclear however, if the mindbroken slave can ever be reintegrated into
the society.
<<else>>
The disobedient slave surely rejoices at <<their $g.victim>> daring rescue.
<</if>>
<<uneedrescue $g.victim>>, before <<they $g.victim>> disappear forever into the <<lore region_city>>...
</p>


:: Event_fort_restoration_awards [nobr] {"position":"600,17975","size":"100,100"}
<<include "Opportunity_fort_restoration_awards">>


:: Event_fort_restoration_awards_efficiency [nobr] {"position":"850,17975","size":"100,100"}
<<run setup.qc.VarSet(
'quest_fort_restoration_room',
setup.rng.choice(['questoffice', 'market', 'hospital', 'library']),
-1,
).apply($gQuest)>>

<<include "Opportunity_fort_restoration_awards_semi_finals">>


:: Event_fort_restoration_awards_preliminaries [nobr] {"position":"1100,17975","size":"100,100"}
<<run setup.qc.VarSet(
'quest_fort_restoration_skill',
setup.rng.choice(setup.skill).keyword,
-1,
).apply($gQuest)>>

<<include "Opportunity_fort_restoration_awards_preliminaries">>


:: Event_furging_a_new_path [nobr] {"position":"350,14475","size":"100,100"}
<<if !$varstore.get('quest_furging_a_new_path_completed')>>

<p>
<<Yourrep $g.slave>>'s mind has been restored, thanks to the recent treatment you have arranged for <<therace $g.slave>>.
You have done exactly as asked by the mysterious person behind a letter you received some time ago.
And new reports from your contacts in the <<lore region_forest>> reveal that this same person has apparently fulfilled their
part of the deal. As promised, multiple groups of neko see <<rep $company.player>>
as an ally. An ally for what, you aren't sure, but you don't look at a gift…
neko, in the fang, you guess? While you try to untangle the mind puzzle you
brought upon yourself, you notice another envelope just like the one before
slipped precariously between the other reports detailing multiple slimes
sightings in the vicinity of the <<lore region_city>>.
</p>

<<else>>

<p>
As soon as you sit in your office to relax, you notice an awfully familiar
letter on top of you desk.
It appears the old neko got his whiskers back in your business and had found out of the success
of your treatment for <<rep $g.slave>>.
Time to see what the neko writes to you this time.
</p>

<</if>>


:: Event_gift_of_the_lizardkin [nobr] {"position":"350,15350","size":"100,100"}
<p>
Some of your slavers report to duty today while sustaining injuries.
Apparently, someone has planted
numerous booby traps just outside of your fort's compound.
Judging from the design of the traps, you can only guess that this must be the work of
<<rep $company.lizardkin>>, who has harbored quite a bit of grudge against your company in the past
months.
</p>

<p>
Sighing, you organize the rest of your slavers to sweep the area clean. Some additional slavers are
injured during the sweeping, but at least the compound becomes safe again now.
</p>


:: Event_girlish_slave [nobr] {"position":"475,13100","size":"100,100"}
<p>

<<Yourrep $g.slave>> slave|is nice and slim, with a trim chest, narrow hips and not much of an ass to speak of.
<<if $g.slave.isHasTrait('tough_nimble')>>
The body allows <<therace $g.slave>> to remain lithe and nimble.
<</if>>
Today, <<they $g.slave>> slave|is obediently standing before you with <<their $g.slave>> hands crossed over <<their $g.slave>> flat stomach.
You strips <<them $g.slave>> and places <<their $g.slave>> naked torso on your <<uslaverbed $g.slave>> for your pleasure.
A perfectly devoted slave might display <<themself $g.slave>>, and a rebellious one might try to cover <<themself $g.slave>>: <<they $g.slave>>'s neither. <<if $g.slave.isHasDick()>>Though <<they $g.slave>>'s not sexually aroused, <<their $g.slave>> <<udick $g.slave>> is visible and contributes greatly to <<their $g.slave>> androgyny.<<else>><<Their $g.slave>> bare pussy completes the picture of simultaneous innocence and availability.<</if>>
</p>

<<choose>>

<<opt "Let <<them $g.slave>> get dressed and spend some quality time with <<them $g.slave>>">>

<p>
You let <<name $g.slave>> don a nice clothes and take <<them $g.slave>> out. <<They $g.slave>>'s a little suspicious at first but when you reach the
first balcony on your lazy route around your fort,
the sun on <<their $g.slave>> face and the gentle breeze around <<their $g.slave>> <<uears $g.slave>> convince <<them $g.slave>> there's no trick. <<They $g.slave>> watches you <<uadv $g.slave>> as you lead <<them $g.slave>> around, soaking in the scenery and relaxing. Though you still speak as <<their $g.slave>> <<master $unit.player>>,
you chat about goings on around the fort, and you buy <<them $g.slave>> a fresh fruit from a vendor in your <<rep setup.buildingtemplate.market>>. The unexpected show of care and compassion has <<their $g.slave>> quite agog. By the time you take <<their $g.slave>> out onto a secluded corner of your fort and fuck <<them $g.slave>>,
<<if $g.slave.isHasDick() && $g.slave.isInChastity()>>
<<their $g.slave>> chastity cage is dribbling precum, a sign <<they $g.slave>> wouldn't mind having to take it up the ass.
<<elseif $g.slave.isHasDick()>>
<<they $g.slave>>'s happy to take it up the ass, and you can see <<their $g.slave>> dick is tenting the front of <<their $g.slave>>clothes.
<<else>><<they $g.slave>>'s wet and ready and moans happily as you enter <<them $g.slave>>.
<</if>>
There's no hesitation or fear at all on <<their $g.slave>> face when <<they $g.slave>> sees you're returning <<them $g.slave>> to your bedchamber; <<their $g.slave>> trust in you has increased.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<<optif $g.slave.isHasTraitExact('anus_tight') and $g.slave.isFemale()>>
<<opt "Dominate <<their $g.slave>> narrow ass">>

<p>
You make a show of examining <<them $g.slave>> with a critical air that makes <<their $g.slave>> aware of <<their $g.slave>> modest endowments.
Finished, you announce in a serious tone that you're concerned that you can't tell if <<they $g.slave>>'s a <<girl $g.slave>>, since <<girl $g.slave>>s have breasts and butts.
<<if !$g.slave.isCanTalk()>>
<<They $g.slave>> protests wordlessly, gesturing desperately at <<themself $g.slave>>.
<<else>>
<<They $g.slave>> protests, "<<Master $unit.player>>, I'm a slave <<girl $g.slave>>! Please, just look at me, <<Master $unit.player>>!"
<</if>>

<<if $g.slave.isCanSee()>>
Shaking your head
<<else>>
Tutting
<</if>>
with pretended doubt, you say that since you're not sure you'll have to make do. Your order <<their $g.slave>> to lie face down on the <<uslaverbed $g.slave>>
<<if $g.slave.isHasTail()>>and raise <<their $g.slave>> <<utail $g.slave>><</if>>
<<if !$unit.player.isHasDick()>> while you don a strap-on<</if>>. <<They $g.slave>> does doubtfully, only realizing what you intend when <<they $g.slave>> feels <<if !$unit.player.isHasDick()>>the strap-on<<else>>your dickhead<</if>> forcing its way between <<their $g.slave>> narrow buttcheeks. <<They $g.slave>> whimpers and moans into the couch as you roughly sodomize <<them $g.slave>>. It's true, <<they $g.slave>>'s pretty androgynous from this angle, especially while <<they $g.slave>> takes it up the butthole.
</p>

<<run setup.qc.FriendshipWithYou('slave', -50).apply($gQuest)>>

<</choose>>


:: Event_good_slaver_bad_slaver [nobr] {"position":"100,19600","size":"100,100"}
<<include "Opportunity_good_slaver_bad_slaver">>


:: Event_grand_lunacy [nobr] {"position":"350,19600","size":"100,100"}
<<include "Quest_grand_lunacy">>


:: Event_gym_sex [nobr] {"position":"725,13100","size":"100,100"}
<p>
<<if $g.gym.isHasTrait('muscle_verystrong')>>
<<Yourrep $g.gym>> has an immensely powerful physique, and <<therace $g.gym>>
maintains it with a tremendous workout routine. <<Theslaver $g.gym>> can often be seen
working out for hours, lifting weights far heavier than <<their $g.gym>>
peers. This gives <<them $g.gym>> power, but it also makes <<them $g.gym>>
looks quite good.
<<else>>
<<Yourrep $g.gym>> takes care of <<themself $g.gym>>, and it shows.
While there is no explicit requirement that a slaver must work out hard and regularly, it is of course good to be physically fit for such a demanding job. Not to mention, it's often useful to look good.
<</if>>
</p>

<p>
Ever since you've built the <<rep setup.buildingtemplate.gym>>,
<<rep $g.gym>> has been spending quite a lot of time there, maintaining the size of <<their $g.gym>> muscles.
As you pass by the gym today, you see <<them $g.gym>> working out as usual, and <<they $g.gym>> appears to have just completed the final rep of <<their $g.gym>> first workout of the day.
But more interestingly, you see <<yourrep $g.other>> frozen in the open doorway, having seen something in the workout room that caught <<their $g.other>> attention as <<they $g.other>> passed by.
<<Their $g.other>> <<ueyes $g.other>> are fixed on <<reps $g.gym>>

<<if $g.gym.isHasBreasts()>>
sports bra clad boobs with almost painful intensity.
You can't really blame <<them $g.other>>; the bra's soaked in <<their $g.gym>> sweat and <<their $g.gym>> nipples are clearly visible as bumps in the tight material.

<<else>>
abdominal muscles with almost painful intensity.
You can't really blame <<them $g.other>>;
they're pretty cut, and <<their $g.other>> bare chest is coated in a light sheen of glistening sweat.
<</if>>
</p>

<p>
<<Their $g.other>> eyes track up <<reps $g.gym>> torso comically until <<they $g.other>>'s looking into <<their $g.gym>> eyes.
<<Rep $g.other>> stares dumbly at <<rep $g.gym>> for a moment before realizing what <<they $g.other>>'s doing and blushing with embarrassment.
"Sorry, I was just, um, passing by and I thought, um, I saw, um, sorry I'm going now," <<they $g.other>> babbles,
and turns to flee.
</p>


<<if $g.gym.isHasTrait('per_chaste')>>
<p>
The chaste slaver's embarrassment at having being so lustfully watched only doubles when <<rep $g.gym>> finally notices that you were also watching the entire scene unfolds. <<They $g.gym>> blushes furiously, stammering out from the gym quickly to wash and change clothes. In the coming days, however, you noticed <<rep $g.other>> works harder than normal, no doubt trying to impress <<rep $g.gym>>...
</p>
<<elseif $g.gym.isHasTrait('per_submissive')>>
<p>
<<Yourrep $g.gym>> does not give chase, and while others would mistake it for
leniency, you know <<theslaver $g.gym>> too well by now and especially <<their $g.gym>>
submissive tendencies.
In the coming days, however, you noticed <<rep $g.other>> works harder than normal, no doubt trying to impress <<rep $g.gym>>, completely oblivious to <<their $g.gym>> submissive nature...
</p>
<<elseif $g.gym.isHasTrait('per_kind')>>
<p>
<<Yourrep $g.gym>> only smiles at the scene, the kind slaver never thinking of any sort of retaliation. Finally noticing your presence, <<they $g.gym>> waves at you as well before finally going back to <<their $g.gym>> quarters to change clothes.
In the coming days, however, you noticed <<rep $g.other>> works harder than normal, no doubt trying to impress <<rep $g.gym>>, completely oblivious to <<their $g.gym>> submissive nature...
</p>
<<else>>

<p>
As <<they $g.other>> run away, <<rep $g.other>> follows the natural impulse when embarrassed, and turns <<their $g.other>> head resolutely away from <<rep $g.gym>>, trying very hard to forget making such a fool of <<themself $g.other>>.
This means that <<they $g.other>> does not see <<reps $g.gym>> rapid, predatory pursuit of <<their $g.gym>>; nor does <<they $g.other>> hear <<reps $g.gym>> careful stride across the flooring. <<Their $g.other>> first indication that she's prey is when <<reps $g.gym>> <<uhands $g.gym>> grab <<them $g.other>> around <<their $g.other>> middle and hug <<rep $g.other>> hard against <<their $g.gym>>
<<if $g.gym.isHasBreasts()>>
sweaty boobs.
<<else>>
sweaty, bare chest.
<</if>>
<<They $g.other>> stiffens and shrieks with surprise.
<<Reps $g.gym>> warm, animal presence has an immediate effect. <<They $g.gym>> hears <<rep $g.other>> sucks in <<their $g.other>> breath and then feel <<them $g.other>> begin to breathe increasingly hard as <<their $g.gym>> <<uscent $g.gym>> sinks into <<them $g.other>> and <<their $g.other>> embarrassment is starting to get replaced by lust.
</p>

<p>
<<if $g.gym.isFemale()>>
Despite <<their $g.gym>> feminine appearance, <<rep $g.gym>> has capable <<uhands $g.gym>>.
<<else>>
<<rep $g.gym>> has strong <<uhands $g.gym>> to go with <<their $g.gym>> masculine appeal.
<</if>>

They rove across <<reps $g.other>> front, hugging <<them $g.other>> hard against <<themself $g.gym>>
as <<rep $g.gym>> massages and gropes.

<<if $g.other.isHasTrait('breast_huge')>>

<<Their $g.other>> tits are so big that hefting them creates a bit of a burn in <<reps $g.gym>> biceps, in addition to making <<rep $g.other>> writhe against <<them $g.gym>>.

<<else>>

<<rep $g.gym>> pinches <<reps $g.other>> nipples and tug them hard, making <<therace $g.other>> writhe and buck against <<them $g.gym>>.

<</if>>

<<if !$g.gym.isHasDick()>>
<<rep $g.gym>> grabs one of <<reps $g.other>> <<uhands $g.other>>
and guide it down to <<their $g.other>> own
<<ugenital $g.other>>, making <<them $g.other>> play with <<themself $g.other>>.
Meanwhile, <<rep $g.gym>> looks after <<their $g.gym>> womanhood with <<their $g.gym>> other <<uhand $g.gym>>,
schlicking expertly while holding <<rep $g.other>> close, ensuring that <<they $g.other>> feels every motion of what <<they $g.gym>>'s doing.
When <<their $g.gym>> fingers are thoroughly coated with pussyjuice, <<rep $g.gym>> drops <<their $g.other>> <<uhand $g.other>>,
letting <<rep $g.other>> continue masturbating on <<their $g.other>> own, and then use the freed hand to replace the one <<they $g.gym>> gym|was using to touch <<themself $g.gym>>.
Then, <<rep $g.gym>> takes the wet fingers and push them into <<their $g.other>> mouth; <<rep $g.other>> willingly sucks them clean, using <<their $g.other>> tongue to gather every trace of <<reps $g.gym>> secretions.
<<Rep $g.gym>> gathers sweat from between <<their $g.gym>> <<ubreasts $g.gym>>,
and make <<rep $g.other>> suck that off <<their $g.gym>> fingers too. When <<rep $g.other>> orgasms, <<rep $g.gym>> shoves <<them $g.other>> against the wall and humps against <<them $g.other>> and <<their $g.other>> <<uhand $g.other>> both, climaxing <<themself $g.gym>>.

<<else>>

<<rep $g.gym>> pulls <<rep $g.other>> up onto <<their $g.other>> toes and slide <<themself $g.gym>> inside <<them $g.other>>, <<therace $g.other>> gasping when <<they $g.other>> feels <<reps $g.gym>> hot dick enter <<their $g.other>>
<<if $g.other.isHasVagina()>>cunt<<else>>anus<</if>>.
Once <<they $g.gym>>'s hilted, <<rep $g.gym>> bring <<rep $g.other>> <<uhands $g.other>> up on either side of <<their $g.other>> head to grasp
<<their $g.gym>> shoulders behind <<them $g.other>>, and then scoops <<reps $g.other>> <<ulegs $g.other>> up and hoist <<them $g.other>> to rest against <<their $g.gym>> <<ubreasts $g.gym>>,
held in midair and impaled on <<their $g.gym>> <<udick $g.gym>>.
<<Rep $g.gym>> can't pound <<rep $g.other>> all that hard in this challenging position, but the effort of holding <<themself $g.other>> this way forces <<rep $g.other>> to tighten <<their $g.other>> muscles down hard, producing an excellent sensation.
<<if $g.other.isHasVagina()>>
After a while, <<rep $g.gym>> lift <<rep $g.other>> up as high as <<they $g.gym>> can, freeing <<their $g.gym>> member, and then lower <<therace $g.other>> back down again, forcing <<themself $g.gym>> up <<their $g.other>> butt instead despite <<therace $g.other>>'s <<uadjgood $g.other>> begging.
<</if>>
It doesn't take long before you notice <<rep $g.gym>> filling <<reps $g.other>> ass with cum.
<</if>>



Having decided that you've seen enough, you quietly exit the scene, not wanting to alert any of the slavers.
In the coming days you've noticed the two slavers seemingly getting along better with each other.
</p>

<</if>>


:: Event_half_werewolf__epilogue [nobr] {"position":"600,18225","size":"100,100"}
<p>
It has been a few weeks since <<yourrep $g.child>> finally got <<their $g.child>>
revenge. Having <<rep $g.father>> locked securely in the dungeons seems to
finally work, bringing an end to <<reps $g.child>> nightmares. <<Theslaver $g.child>>
child|look mighty peaceful nowadays, cheerful even.
</p>

<p>
Nowadays, <<therace $g.child>> can usually be found busy learning a new
hobby. This can only bode well for <<their $g.child>> career as a slaver. But
more importantly, it seems to be the proof you require that whatever had
plagued the slaver's heart, it has been completely cleared now.
</p>

<p>
You sit back at your desk while reminiscing back about your first meeting
with <<them $g.child>>...
</p>


:: Event_happy_dance [nobr] {"position":"975,13100","size":"100,100"}
<p>
As you pass by your bedchamber, you are struct with a
<<if $g.slave.isFemale()>>feminine<<else>>deep<</if>>
<<if $g.slave.isHasTrait('skill_entertain')>>and beautiful <</if>>humming.
It's <<yourrep $g.slave>>,
<<if $g.slave.isHasTrait('bg_entertainer')>>
a former dancer,
<<elseif $g.slave.isHasTrait('bg_courtesan')>>
a former high-class stripper,
<<elseif $g.slave.isHasTrait('skill_entertain')>>
skilled in <<rep setup.trait.skill_entertain>>,
<</if>>
dancing at the foot of the <<uslavebed $g.slave>>, dancing like no one's watching.
<<They $g.slave>>'s letting it out by humming a beat and dancing seductively, all by <<themself $g.slave>>.
</p>

<p>
You recognize the tune: it's
<<if $g.slave.isHasTrait('race_human')>>
a famous <<rep $g.slave.getSubrace()>> folksong.
<<elseif $g.slave.isHasTrait('race_wolfkin')>>
a famous werewolf folksong.
<<elseif $g.slave.isHasTrait('race_elf')>>
a famous elven ballad.
<<elseif $g.slave.isHasTrait('race_catkin')>>
one of the many famous neko tunes.
<<elseif $g.slave.isHasTrait('race_greenskin')>>
an orcish song you've heard before.
<<elseif $g.slave.isHasTrait('race_lizardkin')>>
an ancient lizardkin chant.
<<elseif $g.slave.isHasTrait('race_demon')>>
cruel-sounding demonic tune.
<</if>>
Shaking <<their $g.slave>> hips
<<if $g.slave.isHasTail()>>and tail<</if>>
in time with <<their $g.slave>> humming,
<<they $g.slave>> runs <<their $g.slave>> <<uhands $g.slave>>
sensually over them, along <<their $g.slave>> flanks, and over
<<their $g.slave>> chest,
<<if $g.slave.isHasTrait('breast_titanic')>>letting the vast mass of <<their $g.slave>> tits rest atop them
<<elseif $g.slave.isHasTrait('breast_huge')>>groping <<their $g.slave>> own heavy breasts
<<elseif $g.slave.isHasBreasts()>>
<<their $g.slave>> fingertips circling <<their $g.slave>> nipples
<<else>>
<<their $g.slave>> fingertips playing with the nipples of their <<ubreasts $g.slave>>
<</if>> for an alluring moment.
As <<their $g.slave>> hips maintain their sexual rhythm, <<their $g.slave>>
<<uhands $g.slave>> continue, tracing up <<their $g.slave>> throat,
over <<their $g.slave>> moist lips, and over <<their $g.slave>> head.
As <<they $g.slave>> stretches up, <<their $g.slave>> <<ubody $g.slave>> begins to sway with the barely perceptible beat,
<<their $g.slave>>
<<if $g.slave.isHasTrait('breast_huge')>><<ubreasts $g.slave>> swaying along.<<elseif $g.slave.isHasBreasts()>>
<<ubreasts $g.slave>> bouncing along.<<else>>
<<ubreasts $g.slave>> adding to <<their $g.slave>> charm.<</if>>
</p>

<<choose>>

<<opt "Enjoy the show">>

<p>
You seat yourself on the <<uslaverbed $g.slave>>, enjoying the spectacle.
<<They $g.slave>> feels your <<ueyes $unit.player>> on <<them $g.slave>>, a sensation <<they $g.slave>> knows well, and turns with a little smile on <<their $g.slave>> <<uface $g.slave>>, putting an extra swing in <<their $g.slave>> hips. <<They $g.slave>>'s still dancing alone, but now <<they $g.slave>>'s giving you a private show.

<<if $g.you.isHasTrait('bg_courtesan')>>
You used to be a stripper yourself, so you
<<elseif $g.you.isHasTrait('bg_entertainer')>>
You used to be a singer yourself, so you
<<elseif $g.you.isHasTrait('skill_entertain')>>
You are not half-bad with singing either, so you unleash your beautiful voice to
<<else>>
You
<</if>>

hum alongside <<them $g.slave>>, letting <<them $g.slave>> pay more attention to the dancing.
</p>

<p>
<<They $g.slave>> advances on you slowly, sensually, relishing the beat and doing <<their $g.slave>> best to show off <<their $g.slave>> body.
<<if $g.slave.isHasDick()>>
<<Their $g.slave>> erection waves back and forth with <<their $g.slave>> rhythm.
<<else>>
<<Their $g.slave>>
womanhood is <<their $g.slave>> centerpiece as <<they $g.slave>> moves.
<</if>>

<<They $g.slave>> gives you an excellent nude lapdance,
<<if $g.slave.isHasTrait('bg_courtesan')>>
expressing the art at the level only an experienced stripper could manage.
<<elseif $g.slave.isHasTrait('bg_entertainer')>>
moving with practiced experience.
<<elseif $g.slave.isHasTrait('skill_entertain')>>
moving with ease.
<</if>>

The interaction is all about you, your eyes on <<their $g.slave>> <<ubody $g.slave>>,
your desire for <<their $g.slave>> touch, and finally your
<<if $unit.player.isHasDick()>>cum flowing into <<their $g.slave>> <<umouth $g.slave>> as <<they $g.slave>> sucks your <<udick $unit.player>>
<<else>>
pussyjuice coating <<their $g.slave>> lips as <<they $g.slave>> eats you out<</if>>.
</p>

<<opt "Dance along with <<them $g.slave>>">>

<p>
<<They $g.slave>> doesn't <<if $g.slave.isCanSee()>>see<<else>>notice<</if>> you advance on
<<them $g.slave>>; <<they $g.slave>>'s facing away from you, and in any case, <<they $g.slave>>'s lost in <<their $g.slave>> own little world.
Only after you're next to <<them $g.slave>> does <<they $g.slave>> senses a presence at <<their $g.slave>> side.
You timed it perfectly,

<<if $g.you.isHasTrait('bg_courtesan')>>
using your experience as a stripper to hum
<<elseif $g.you.isHasTrait('bg_entertainer')>>
using your experience as a singer to hum
<<elseif $g.you.isHasTrait('skill_entertain')>>
using your own expansive range of voice to hum
<<else>>
humming
<</if>>

in rhythm to the same tune, and began to dance beside <<them $g.slave>>.
<<if $unit.player.isHasBreasts()>>You've got a <<woman $g.slave>>'s body, and you match <<their $g.slave>> moves<<if !$unit.player.isSubmissive()>>, though an observer might see greater power and dominance in the way you dance<</if>>.
<<elseif $g.slave.isFemale()>>
You make your moves the masculine companion to <<their $g.slave>>s, moving like a paragon of frank male sexuality.
<<else>>
You make your moves a masculine addition to <<their $g.slave>>s, two males dancing in unison<<if !$unit.player.isSubmissive()>>, although an observer might see greater power and dominance in the way you dance<</if>>.
<</if>>
<<if $g.you.isHasTrait('bg_courtesan')>>
You've got considerable dancing skills from your days as a stripper, and you're not losing to the slave.
<<elseif $g.you.isHasTrait('bg_entertainer')>>
You've got considerable dancing skills from your days as a dancer, and you're not losing to the slave.
<<elseif $g.you.isHasTrait('skill_entertain')>>
You've got considerable <<rep setup.trait.skill_entertain>> skills, and your dancing is not inferior to the slave.
<<else>>
<</if>>

</p>

<p>
There's a momentary flaw in <<their $g.slave>> rhythm, a catch in <<their
$g.slave>> breath as <<they $g.slave>> realizes what you're doing, but <<they
$g.slave>> gets right back into it, displaying <<their $g.slave>> pleasure
with nothing more than a ghost of a smile and a <<if
$g.slave.isCanSee()>>widening of <<their $g.slave>> eyes as <<they $g.slave>>
looks you up and down<<else>>slight perk of<<their $g.slave>> ears as <<they
$g.slave>> tracks your motion<</if>>. <<They $g.slave>> doesn't shove
<<themself $g.slave>> against you; that would be coarse. Instead <<they
$g.slave>> dances alluringly, just out of your grasp.
Taking the dominant role, you encircle <<their $g.slave>> in your <<uarms $unit.player>> and draw <<them $g.slave>> in close, <<their $g.slave>> heat perceptible against your <<uskin $unit.player>> before the very first graze of <<their $g.slave>> <<ubody $g.slave>> against yours.
<<They $g.slave>> continues to dance gorgeously as <<they $g.slave>> helps you out of your clothes.
</p>

<p>
When you're nude, <<they $g.slave>> turns <<their $g.slave>> back to you and starts to grind, letting you feel <<their $g.slave>> <<ubody $g.slave>> all up and down your front. Feeling your <<if !$unit.player.isHasDick()>>building heat, <<they $g.slave>> begins to incorporate gentle caresses of your <<woman $g.slave>>hood<<else>>erection brushing against <<them $g.slave>>, <<they $g.slave>> begins to corral it between <<their $g.slave>> buttocks and thighs<</if>>, and you return the favor by teasing <<their $g.slave>> nipples<<if $g.slave.isHasVagina()>>, pussylips, clit,<</if>> and even <<their $g.slave>> ass. You orgasm one after the other, and <<they $g.slave>> throws <<their $g.slave>> arms around you.
</p>

<<run setup.qc.FriendshipWithYou('slave', 50).apply($gQuest)>>

<</choose>>


:: Event_harbinger_of_chaos [nobr] {"position":"600,18350","size":"100,100"}
<p>
In the past weeks, you and <<yourrep $g.a>> had tried your hardest to remove the curse of misfortunate that has somehow been placed upon <<therace $g.a>>. And it is starting to borne... a strange fruit.
</p>

<p>
It does not seem to have done anything for <<reps $g.a>> misfortune. <<Therace $g.a>> would continue to be shat upon by flying birds, and to fall victim to the most awkwardly placed bumps on the floor.
</p>

<p>
On the other hand, <<they $g.a>> a|is also starting to receive some awkwardly good luck. Last week, the tavern <<they $g.a>> happened to patron was just celebrating their first anniversary, and the drinks were all entirely on the house. Before arriving at your office today, <<they $g.a>> had just found a shiny gem lying on the road, which they sold for a good fortune to one of the merchants in your fort.
</p>

<p>
The rituals seem to indeed boost <<their $g.a>> luck one way or another, but apparently luck and misfortune are two separate entities.
As it stands right now <<rep $g.a>> is now blessed with both good luck and bad luck at the same time.
</p>

<p>
Still, <<therace $g.a>> a|seem to be awfully happy about the result. Indeed, if you were to be cursed with a bad luck, might as well also be blessed with good luck. For every misfortune in <<their $g.a>> life will now be a boon later in <<their $g.a>> life. A much more desirable results, compared to just suffering through your bad luck with nothing to gain.
</p>


:: Event_harbinger_of_crows [nobr] {"position":"850,18350","size":"100,100"}
<p>
In the past weeks, you and <<yourrep $g.a>> had tried your hardest to remove the curse of misfortunate that has somehow been placed upon <<therace $g.a>>. But despite the various rituals you've conducted both, <<rep $g.a>> remains as unlucky as ever. In fact, just before <<they $g.a>> arrived at your office, an errant slave bumped into <<therace $g.a>>, accidentally scalding the slaver with hot water that the slave was carrying with them.
</p>

<p>
However, despite the looming failure, <<rep $g.a>> a|look more resolved than ever. Having a bad luck does not kill <<their $g.a>> future, after all, and <<therace $g.a>> a|is resolved to make up for <<their $g.a>> lot in life with a lot and a lot of hard work.
<<if $g.a.isHasTrait('per_active')>>
In fact, <<they $g.a>> has been working out harder and practicing more than normal.
<<else>>
In fact, <<they $g.a>> has been devouring books after books in order to hone <<their $g.a>> mind.
<</if>>
The results is starting to show too — <<they $g.a>> a|is becoming better in everything.
</p>

<p>
<<Rep $g.a>> might not be able to lift the curse entirely, but <<they $g.a>> a|have learnt how to make the curse into their strength — it becomes a constant motivation and reminder that <<they $g.a>> should work diligently in life. You have no doubt that as long as <<they $g.a>> a|continue to do so, no matter what the gods had planned for <<them $g.a>>, a good thing or two will surely come to <<them $g.a>>
</p>


:: Event_head_courtesan [nobr] {"position":"600,17100","size":"100,100"}
<<set _profit = setup.dutytemplate.questbrothelmanager.profit()>>
<<set _progress = setup.dutytemplate.questbrothelmanager.progress()>>
<<set _class = setup.dutytemplate.questbrothelmanager.class()>>
<<set _facility = setup.dutytemplate.questbrothelmanager.facility()>>
<<set _attraction = setup.dutytemplate.questbrothelmanager.attraction()>>
<<set _name = setup.dutytemplate.questbrothelmanager.brothelName()>>
<<set _gender = setup.dutytemplate.questbrothelmanager.gender()>>
<<set _describe = setup.dutytemplate.questbrothelmanager.describe()>>
<<set _promotion = setup.dutytemplate.questbrothelmanager.promotion()>>
<<set _dom = setup.dutytemplate.questbrothelmanager.sub()>>

<p>
Thanks to your recent efforts, <<attach _describe>> is almost ready to become a high-class sex venue. There is still a glaring emptiness in one position, however. With <<name $g.head>> serving as the brothel's
<<if _promotion == 'money'>>
business manager,
<<else>>
customer relations officer,
<</if>>
the prestigious position of head courtesan is now empty. A new highly qualified courtesan is required.
</p>

<p>
In order to bring your venue to the highest level, <<yourrep $g.owner>>
owner|suggest that whoever you hire as the head courtesan to be a wonder in
<<themself $g.owner>>. Hiring such a person would normally cost an
astronomical amount of money, but for a final time your position as the
leader of a slaving company put you in a unique position. You can instead
supply the head courtesan from among your stable of slaves. Still, given the
requirements, you would need something very special indeed for the position.
First, the slave should have a mastery over some domain of magic -- it would
certainly make for an interesting sex play.
In addition,
<<if _dom == 'sub'>>
  since you've decided to make <<= _name>> a heaven of submissive debauchery,
  the head courtesan <<themself $g.head>> must be similarly submissive.
<<elseif _dom == 'dom'>>
  since you've decided to make <<= _name>> a heaven of dominant courtesans,
  the head courtesan <<themself $g.head>> must be similarly dominant.
<<else>>
  since you've decided to make <<= _name>> to cater to both dominants and submissives,
  the head courtesan <<themself $g.head>> must be neither dominant and submissive,
  but remain a highly valuable slave.
<</if>>
Finally, and perhaps more importantly, the slave <<themself $g.head>> should
be a valuable slave, which should translate to a highly sought-after courtesan.
</p>

<p>
Given the stringent requirements, it may take you some time to find the special, lucky slave...
</p>

